#!/usr/bin/env node
"use strict";
var exports = void 0;

var $node = $node || {}
void function( module ) { var exports = module.exports = this; function require( id ) { return $node[ id.replace( /^.\// , "../" ) ] }; 
;
"use strict";
Error.stackTraceLimit = 50;
var $;
(function ($) {
})($ || ($ = {}));
module.exports = $;

;

$node[ "../mam.ts" ] = $node[ "../mam.ts" ] = module.exports }.call( {} , {} )
;
"use strict"

var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
	var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	else for (var i = decorators.length - 1; i >= 0; i--) if ((d = decorators[i])) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	return c > 3 && r && Object.defineProperty(target, key, r), r;
};

var $ = ( typeof module === 'object' ) ? ( module['export'+'s'] = globalThis ) : globalThis
$.$$ = $

;
"use strict";
var $;
(function ($) {
    $.$mol_ambient_ref = Symbol('$mol_ambient_ref');
    function $mol_ambient(overrides) {
        return Object.setPrototypeOf(overrides, this || $);
    }
    $.$mol_ambient = $mol_ambient;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const instances = new WeakSet();
    function $mol_delegate(proto, target) {
        const proxy = new Proxy(proto, {
            get: (_, field) => {
                const obj = target();
                let val = Reflect.get(obj, field);
                if (typeof val === 'function') {
                    val = val.bind(obj);
                }
                return val;
            },
            has: (_, field) => Reflect.has(target(), field),
            set: (_, field, value) => Reflect.set(target(), field, value),
            getOwnPropertyDescriptor: (_, field) => Reflect.getOwnPropertyDescriptor(target(), field),
            ownKeys: () => Reflect.ownKeys(target()),
            getPrototypeOf: () => Reflect.getPrototypeOf(target()),
            setPrototypeOf: (_, donor) => Reflect.setPrototypeOf(target(), donor),
            isExtensible: () => Reflect.isExtensible(target()),
            preventExtensions: () => Reflect.preventExtensions(target()),
            apply: (_, self, args) => Reflect.apply(target(), self, args),
            construct: (_, args, retarget) => Reflect.construct(target(), args, retarget),
            defineProperty: (_, field, descr) => Reflect.defineProperty(target(), field, descr),
            deleteProperty: (_, field) => Reflect.deleteProperty(target(), field),
        });
        instances.add(proxy);
        return proxy;
    }
    $.$mol_delegate = $mol_delegate;
    Reflect.defineProperty($mol_delegate, Symbol.hasInstance, {
        value: (obj) => instances.has(obj),
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_owning_map = new WeakMap();
    function $mol_owning_allow(having) {
        try {
            if (!having)
                return false;
            if (typeof having !== 'object' && typeof having !== 'function')
                return false;
            if (having instanceof $mol_delegate)
                return false;
            if (typeof having['destructor'] !== 'function')
                return false;
            return true;
        }
        catch {
            return false;
        }
    }
    $.$mol_owning_allow = $mol_owning_allow;
    function $mol_owning_get(having, Owner) {
        if (!$mol_owning_allow(having))
            return null;
        while (true) {
            const owner = $.$mol_owning_map.get(having);
            if (!owner)
                return owner;
            if (!Owner)
                return owner;
            if (owner instanceof Owner)
                return owner;
            having = owner;
        }
    }
    $.$mol_owning_get = $mol_owning_get;
    function $mol_owning_check(owner, having) {
        if (!$mol_owning_allow(having))
            return false;
        if ($.$mol_owning_map.get(having) !== owner)
            return false;
        return true;
    }
    $.$mol_owning_check = $mol_owning_check;
    function $mol_owning_catch(owner, having) {
        if (!$mol_owning_allow(having))
            return false;
        if ($.$mol_owning_map.get(having))
            return false;
        $.$mol_owning_map.set(having, owner);
        return true;
    }
    $.$mol_owning_catch = $mol_owning_catch;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_fail(error) {
        throw error;
    }
    $.$mol_fail = $mol_fail;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_fail_hidden(error) {
        throw error;
    }
    $.$mol_fail_hidden = $mol_fail_hidden;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    const named = new WeakSet();
    function $mol_func_name(func) {
        let name = func.name;
        if (name?.length > 1)
            return name;
        if (named.has(func))
            return name;
        for (let key in this) {
            try {
                if (this[key] !== func)
                    continue;
                name = key;
                Object.defineProperty(func, 'name', { value: name });
                break;
            }
            catch { }
        }
        named.add(func);
        return name;
    }
    $.$mol_func_name = $mol_func_name;
    function $mol_func_name_from(target, source) {
        Object.defineProperty(target, 'name', { value: source.name });
        return target;
    }
    $.$mol_func_name_from = $mol_func_name_from;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_object2 {
        static $ = $;
        [Symbol.toStringTag];
        [$mol_ambient_ref] = null;
        get $() {
            if (this[$mol_ambient_ref])
                return this[$mol_ambient_ref];
            const owner = $mol_owning_get(this);
            return this[$mol_ambient_ref] = owner?.$ || $mol_object2.$;
        }
        set $(next) {
            if (this[$mol_ambient_ref])
                $mol_fail_hidden(new Error('Context already defined'));
            this[$mol_ambient_ref] = next;
        }
        static create(init) {
            const obj = new this;
            if (init)
                init(obj);
            return obj;
        }
        static [Symbol.toPrimitive]() {
            return this.toString();
        }
        static toString() {
            return this[Symbol.toStringTag] || this.$.$mol_func_name(this);
        }
        static toJSON() {
            return this.toString();
        }
        destructor() { }
        static destructor() { }
        toString() {
            return this[Symbol.toStringTag] || this.constructor.name + '<>';
        }
    }
    $.$mol_object2 = $mol_object2;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($_1) {
    let $$;
    (function ($$) {
        let $;
    })($$ = $_1.$$ || ($_1.$$ = {}));
    $_1.$mol_object_field = Symbol('$mol_object_field');
    class $mol_object extends $mol_object2 {
        static make(config) {
            return super.create(obj => {
                for (let key in config)
                    obj[key] = config[key];
            });
        }
    }
    $_1.$mol_object = $mol_object;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_window extends $mol_object {
        static size() {
            return {
                width: 1024,
                height: 768,
            };
        }
    }
    $.$mol_window = $mol_window;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    let $mol_wire_cursor;
    (function ($mol_wire_cursor) {
        $mol_wire_cursor[$mol_wire_cursor["stale"] = -1] = "stale";
        $mol_wire_cursor[$mol_wire_cursor["doubt"] = -2] = "doubt";
        $mol_wire_cursor[$mol_wire_cursor["fresh"] = -3] = "fresh";
        $mol_wire_cursor[$mol_wire_cursor["final"] = -4] = "final";
    })($mol_wire_cursor = $.$mol_wire_cursor || ($.$mol_wire_cursor = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_wire_pub extends Object {
        data = [];
        static get [Symbol.species]() {
            return Array;
        }
        sub_from = 0;
        get sub_list() {
            const res = [];
            for (let i = this.sub_from; i < this.data.length; i += 2) {
                res.push(this.data[i]);
            }
            return res;
        }
        get sub_empty() {
            return this.sub_from === this.data.length;
        }
        sub_on(sub, pub_pos) {
            const pos = this.data.length;
            this.data.push(sub, pub_pos);
            return pos;
        }
        sub_off(sub_pos) {
            if (!(sub_pos < this.data.length)) {
                $mol_fail(new Error(`Wrong pos ${sub_pos}`));
            }
            const end = this.data.length - 2;
            if (sub_pos !== end) {
                this.peer_move(end, sub_pos);
            }
            this.data.length = end;
            if (end === this.sub_from)
                this.reap();
        }
        reap() { }
        promote() {
            $mol_wire_auto()?.track_next(this);
        }
        fresh() { }
        complete() { }
        get incompleted() {
            return false;
        }
        emit(quant = $mol_wire_cursor.stale) {
            for (let i = this.sub_from; i < this.data.length; i += 2) {
                ;
                this.data[i].absorb(quant);
            }
        }
        peer_move(from_pos, to_pos) {
            const peer = this.data[from_pos];
            const self_pos = this.data[from_pos + 1];
            this.data[to_pos] = peer;
            this.data[to_pos + 1] = self_pos;
            peer.peer_repos(self_pos, to_pos);
        }
        peer_repos(peer_pos, self_pos) {
            this.data[peer_pos + 1] = self_pos;
        }
    }
    $.$mol_wire_pub = $mol_wire_pub;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    $.$mol_wire_auto_sub = null;
    function $mol_wire_auto(next = $.$mol_wire_auto_sub) {
        return $.$mol_wire_auto_sub = next;
    }
    $.$mol_wire_auto = $mol_wire_auto;
    $.$mol_wire_affected = [];
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $['devtoolsFormatters'] ||= [];
    function $mol_dev_format_register(config) {
        $['devtoolsFormatters'].push(config);
    }
    $.$mol_dev_format_register = $mol_dev_format_register;
    $.$mol_dev_format_head = Symbol('$mol_dev_format_head');
    $.$mol_dev_format_body = Symbol('$mol_dev_format_body');
    $mol_dev_format_register({
        header: (val, config = false) => {
            if (config)
                return null;
            if (!val)
                return null;
            if ($.$mol_dev_format_head in val) {
                try {
                    return val[$.$mol_dev_format_head]();
                }
                catch (error) {
                    return $.$mol_dev_format_accent($mol_dev_format_native(val), '💨', $mol_dev_format_native(error), '');
                }
            }
            if (typeof val === 'function') {
                return $mol_dev_format_native(val);
            }
            if (Symbol.toStringTag in val) {
                return $mol_dev_format_native(val);
            }
            return null;
        },
        hasBody: val => val[$.$mol_dev_format_body],
        body: val => val[$.$mol_dev_format_body](),
    });
    function $mol_dev_format_native(obj) {
        if (typeof obj === 'undefined')
            return $.$mol_dev_format_shade('undefined');
        return [
            'object',
            {
                object: obj,
                config: true,
            },
        ];
    }
    $.$mol_dev_format_native = $mol_dev_format_native;
    function $mol_dev_format_auto(obj) {
        if (obj == null)
            return $.$mol_dev_format_shade(String(obj));
        return [
            'object',
            {
                object: obj,
                config: false,
            },
        ];
    }
    $.$mol_dev_format_auto = $mol_dev_format_auto;
    function $mol_dev_format_element(element, style, ...content) {
        const styles = [];
        for (let key in style)
            styles.push(`${key} : ${style[key]}`);
        return [
            element,
            {
                style: styles.join(' ; '),
            },
            ...content,
        ];
    }
    $.$mol_dev_format_element = $mol_dev_format_element;
    function $mol_dev_format_span(style, ...content) {
        return $mol_dev_format_element('span', {
            ...style,
        }, ...content);
    }
    $.$mol_dev_format_span = $mol_dev_format_span;
    $.$mol_dev_format_div = $mol_dev_format_element.bind(null, 'div');
    $.$mol_dev_format_ol = $mol_dev_format_element.bind(null, 'ol');
    $.$mol_dev_format_li = $mol_dev_format_element.bind(null, 'li');
    $.$mol_dev_format_table = $mol_dev_format_element.bind(null, 'table');
    $.$mol_dev_format_tr = $mol_dev_format_element.bind(null, 'tr');
    $.$mol_dev_format_td = $mol_dev_format_element.bind(null, 'td');
    $.$mol_dev_format_accent = $mol_dev_format_span.bind(null, {
        'color': 'magenta',
    });
    $.$mol_dev_format_strong = $mol_dev_format_span.bind(null, {
        'font-weight': 'bold',
    });
    $.$mol_dev_format_string = $mol_dev_format_span.bind(null, {
        'color': 'green',
    });
    $.$mol_dev_format_shade = $mol_dev_format_span.bind(null, {
        'color': 'gray',
    });
    $.$mol_dev_format_indent = $.$mol_dev_format_div.bind(null, {
        'margin-left': '13px'
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_wire_pub_sub extends $mol_wire_pub {
        pub_from = 0;
        cursor = $mol_wire_cursor.stale;
        get temp() {
            return false;
        }
        get pub_list() {
            const res = [];
            const max = this.cursor >= 0 ? this.cursor : this.sub_from;
            for (let i = this.pub_from; i < max; i += 2) {
                if (this.data[i])
                    res.push(this.data[i]);
            }
            return res;
        }
        track_on() {
            this.cursor = this.pub_from;
            const sub = $mol_wire_auto();
            $mol_wire_auto(this);
            return sub;
        }
        promote() {
            if (this.cursor >= this.pub_from) {
                $mol_fail(new Error('Circular subscription'));
            }
            super.promote();
        }
        track_next(pub) {
            if (this.cursor < 0)
                $mol_fail(new Error('Promo to non begun sub'));
            if (this.cursor < this.sub_from) {
                const next = this.data[this.cursor];
                if (pub === undefined)
                    return next ?? null;
                if (next === pub) {
                    this.cursor += 2;
                    return next;
                }
                if (next) {
                    if (this.sub_from < this.data.length) {
                        this.peer_move(this.sub_from, this.data.length);
                    }
                    this.peer_move(this.cursor, this.sub_from);
                    this.sub_from += 2;
                }
            }
            else {
                if (pub === undefined)
                    return null;
                if (this.sub_from < this.data.length) {
                    this.peer_move(this.sub_from, this.data.length);
                }
                this.sub_from += 2;
            }
            this.data[this.cursor] = pub;
            this.data[this.cursor + 1] = pub.sub_on(this, this.cursor);
            this.cursor += 2;
            return pub;
        }
        track_off(sub) {
            $mol_wire_auto(sub);
            if (this.cursor < 0) {
                $mol_fail(new Error('End of non begun sub'));
            }
            for (let cursor = this.pub_from; cursor < this.cursor; cursor += 2) {
                const pub = this.data[cursor];
                pub.fresh();
            }
            this.cursor = $mol_wire_cursor.fresh;
        }
        pub_off(sub_pos) {
            this.data[sub_pos] = undefined;
            this.data[sub_pos + 1] = undefined;
        }
        destructor() {
            for (let cursor = this.data.length - 2; cursor >= this.sub_from; cursor -= 2) {
                const sub = this.data[cursor];
                const pos = this.data[cursor + 1];
                sub.pub_off(pos);
            }
            this.data.length = this.sub_from;
            this.cursor = this.pub_from;
            this.track_cut();
            this.cursor = $mol_wire_cursor.final;
        }
        track_cut() {
            if (this.cursor < this.pub_from) {
                $mol_fail(new Error('Cut of non begun sub'));
            }
            let end = this.data.length;
            for (let cursor = this.cursor; cursor < this.sub_from; cursor += 2) {
                const pub = this.data[cursor];
                pub?.sub_off(this.data[cursor + 1]);
                end -= 2;
                if (this.sub_from <= end)
                    this.peer_move(end, cursor);
            }
            this.data.length = end;
            this.sub_from = this.cursor;
        }
        complete() { }
        complete_pubs() {
            const limit = this.cursor < 0 ? this.sub_from : this.cursor;
            for (let cursor = this.pub_from; cursor < limit; cursor += 2) {
                const pub = this.data[cursor];
                if (pub?.incompleted)
                    return;
            }
            for (let cursor = this.pub_from; cursor < limit; cursor += 2) {
                const pub = this.data[cursor];
                pub?.complete();
            }
        }
        absorb(quant = $mol_wire_cursor.stale) {
            if (this.cursor === $mol_wire_cursor.final)
                return;
            if (this.cursor >= quant)
                return;
            this.cursor = quant;
            this.emit($mol_wire_cursor.doubt);
        }
        [$mol_dev_format_head]() {
            return $mol_dev_format_native(this);
        }
        get pub_empty() {
            return this.sub_from === this.pub_from;
        }
    }
    $.$mol_wire_pub_sub = $mol_wire_pub_sub;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_after_tick extends $mol_object2 {
        task;
        static promise = null;
        cancelled = false;
        constructor(task) {
            super();
            this.task = task;
            if (!$mol_after_tick.promise)
                $mol_after_tick.promise = Promise.resolve().then(() => {
                    $mol_after_tick.promise = null;
                });
            $mol_after_tick.promise.then(() => {
                if (this.cancelled)
                    return;
                task();
            });
        }
        destructor() {
            this.cancelled = true;
        }
    }
    $.$mol_after_tick = $mol_after_tick;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_promise_like(val) {
        try {
            return val && typeof val === 'object' && 'then' in val && typeof val.then === 'function';
        }
        catch {
            return false;
        }
    }
    $.$mol_promise_like = $mol_promise_like;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const wrappers = new WeakMap();
    class $mol_wire_fiber extends $mol_wire_pub_sub {
        task;
        host;
        static warm = true;
        static planning = new Set();
        static reaping = new Set();
        static plan_task = null;
        static plan() {
            if (this.plan_task)
                return;
            this.plan_task = new $mol_after_tick(() => {
                try {
                    this.sync();
                }
                finally {
                    $mol_wire_fiber.plan_task = null;
                }
            });
        }
        static sync() {
            while (this.planning.size) {
                for (const fiber of this.planning) {
                    this.planning.delete(fiber);
                    if (fiber.cursor >= 0)
                        continue;
                    if (fiber.cursor === $mol_wire_cursor.final)
                        continue;
                    fiber.fresh();
                }
            }
            while (this.reaping.size) {
                const fibers = this.reaping;
                this.reaping = new Set;
                for (const fiber of fibers) {
                    if (!fiber.sub_empty)
                        continue;
                    fiber.destructor();
                }
            }
        }
        [Symbol.toStringTag];
        cache = undefined;
        get args() {
            return this.data.slice(0, this.pub_from);
        }
        result() {
            if ($mol_promise_like(this.cache))
                return;
            if (this.cache instanceof Error)
                return;
            return this.cache;
        }
        get incompleted() {
            return $mol_promise_like(this.cache);
        }
        field() {
            return this.task.name + '<>';
        }
        constructor(id, task, host, args) {
            super();
            this.task = task;
            this.host = host;
            if (args)
                this.data.push(...args);
            this.pub_from = this.sub_from = args?.length ?? 0;
            this[Symbol.toStringTag] = id;
        }
        plan() {
            $mol_wire_fiber.planning.add(this);
            $mol_wire_fiber.plan();
            return this;
        }
        reap() {
            $mol_wire_fiber.reaping.add(this);
            $mol_wire_fiber.plan();
        }
        toString() {
            return this[Symbol.toStringTag];
        }
        toJSON() {
            return this[Symbol.toStringTag];
        }
        [$mol_dev_format_head]() {
            const cursor = {
                [$mol_wire_cursor.stale]: '🔴',
                [$mol_wire_cursor.doubt]: '🟡',
                [$mol_wire_cursor.fresh]: '🟢',
                [$mol_wire_cursor.final]: '🔵',
            }[this.cursor] ?? this.cursor.toString();
            return $mol_dev_format_div({}, $mol_owning_check(this, this.cache)
                ? $mol_dev_format_auto({
                    [$mol_dev_format_head]: () => $mol_dev_format_shade(cursor),
                    [$mol_dev_format_body]: () => $mol_dev_format_native(this),
                })
                : $mol_dev_format_shade($mol_dev_format_native(this), cursor), $mol_dev_format_auto(this.cache));
        }
        get $() {
            return (this.host ?? this.task)['$'];
        }
        emit(quant = $mol_wire_cursor.stale) {
            if (this.sub_empty)
                this.plan();
            else
                super.emit(quant);
        }
        fresh() {
            if (this.cursor === $mol_wire_cursor.fresh)
                return;
            if (this.cursor === $mol_wire_cursor.final)
                return;
            check: if (this.cursor === $mol_wire_cursor.doubt) {
                for (let i = this.pub_from; i < this.sub_from; i += 2) {
                    ;
                    this.data[i]?.fresh();
                    if (this.cursor !== $mol_wire_cursor.doubt)
                        break check;
                }
                this.cursor = $mol_wire_cursor.fresh;
                return;
            }
            const bu = this.track_on();
            let result;
            try {
                switch (this.pub_from) {
                    case 0:
                        result = this.task.call(this.host);
                        break;
                    case 1:
                        result = this.task.call(this.host, this.data[0]);
                        break;
                    default:
                        result = this.task.call(this.host, ...this.args);
                        break;
                }
                if ($mol_promise_like(result)) {
                    if (wrappers.has(result)) {
                        result = wrappers.get(result).then(a => a);
                    }
                    else {
                        const put = (res) => {
                            if (this.cache === result)
                                this.put(res);
                            return res;
                        };
                        wrappers.set(result, result = Object.assign(result.then(put, put), { destructor: result.destructor || (() => { }) }));
                        wrappers.set(result, result);
                        const error = new Error(`Promise in ${this}`);
                        Object.defineProperty(result, 'stack', { get: () => error.stack });
                    }
                }
            }
            catch (error) {
                if (error instanceof Error || $mol_promise_like(error)) {
                    result = error;
                }
                else {
                    result = new Error(String(error), { cause: error });
                }
                if ($mol_promise_like(result)) {
                    if (wrappers.has(result)) {
                        result = wrappers.get(result);
                    }
                    else {
                        wrappers.set(result, result = Object.assign(result.finally(() => {
                            if (this.cache === result)
                                this.absorb();
                        }), { destructor: result.destructor || (() => { }) }));
                        const error = new Error(`Promise in ${this}`);
                        Object.defineProperty(result, 'stack', { get: () => error.stack });
                    }
                }
            }
            if (!$mol_promise_like(result)) {
                this.track_cut();
            }
            this.track_off(bu);
            this.put(result);
            return this;
        }
        refresh() {
            this.cursor = $mol_wire_cursor.stale;
            this.fresh();
        }
        sync() {
            if (!$mol_wire_fiber.warm) {
                return this.result();
            }
            this.promote();
            this.fresh();
            if (this.cache instanceof Error) {
                return $mol_fail_hidden(this.cache);
            }
            if ($mol_promise_like(this.cache)) {
                return $mol_fail_hidden(this.cache);
            }
            return this.cache;
        }
        async async_raw() {
            while (true) {
                this.fresh();
                if (this.cache instanceof Error) {
                    $mol_fail_hidden(this.cache);
                }
                if (!$mol_promise_like(this.cache))
                    return this.cache;
                await Promise.race([this.cache, this.step()]);
                if (!$mol_promise_like(this.cache))
                    return this.cache;
                if (this.cursor === $mol_wire_cursor.final) {
                    await new Promise(() => { });
                }
            }
        }
        async() {
            const promise = this.async_raw();
            if (!promise.destructor)
                promise.destructor = () => this.destructor();
            return promise;
        }
        step() {
            return new Promise(done => {
                const sub = new $mol_wire_pub_sub;
                const prev = sub.track_on();
                sub.track_next(this);
                sub.track_off(prev);
                sub.absorb = () => {
                    done(null);
                    setTimeout(() => sub.destructor());
                };
            });
        }
        destructor() {
            super.destructor();
            if ($mol_owning_check(this, this.cache)) {
                this.cache.destructor();
            }
        }
    }
    $.$mol_wire_fiber = $mol_wire_fiber;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_guid(length = 8, exists = () => false) {
        for (;;) {
            let id = Math.random().toString(36).substring(2, length + 2).toUpperCase();
            if (exists(id))
                continue;
            return id;
        }
    }
    $.$mol_guid = $mol_guid;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_key_store = new WeakMap();
    const TypedArray = Object.getPrototypeOf(Uint8Array);
    function $mol_key(value) {
        if (typeof value === 'bigint')
            return value.toString() + 'n';
        if (typeof value === 'symbol')
            return value.description;
        if (!value)
            return JSON.stringify(value);
        if (typeof value !== 'object' && typeof value !== 'function')
            return JSON.stringify(value);
        return JSON.stringify(value, (field, value) => {
            if (typeof value === 'bigint')
                return value.toString() + 'n';
            if (typeof value === 'symbol')
                return value.description;
            if (!value)
                return value;
            if (typeof value !== 'object' && typeof value !== 'function')
                return value;
            if (Array.isArray(value))
                return value;
            const proto = Reflect.getPrototypeOf(value);
            if (!proto)
                return value;
            if (Reflect.getPrototypeOf(proto) === null)
                return value;
            if ('toJSON' in value)
                return value;
            if (value instanceof RegExp)
                return value.toString();
            if (value instanceof TypedArray)
                return [...value];
            let key = $.$mol_key_store.get(value);
            if (key)
                return key;
            key = $mol_guid();
            $.$mol_key_store.set(value, key);
            return key;
        });
    }
    $.$mol_key = $mol_key;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_after_timeout extends $mol_object2 {
        delay;
        task;
        id;
        constructor(delay, task) {
            super();
            this.delay = delay;
            this.task = task;
            this.id = setTimeout(task, delay);
        }
        destructor() {
            clearTimeout(this.id);
        }
    }
    $.$mol_after_timeout = $mol_after_timeout;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_after_frame extends $mol_after_timeout {
        task;
        constructor(task) {
            super(16, task);
            this.task = task;
        }
    }
    $.$mol_after_frame = $mol_after_frame;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_compare_deep_cache = new WeakMap();
    function $mol_compare_deep(left, right) {
        if (Object.is(left, right))
            return true;
        if (left === null)
            return false;
        if (right === null)
            return false;
        if (typeof left !== 'object')
            return false;
        if (typeof right !== 'object')
            return false;
        const left_proto = Reflect.getPrototypeOf(left);
        const right_proto = Reflect.getPrototypeOf(right);
        if (left_proto !== right_proto)
            return false;
        if (left instanceof Boolean)
            return Object.is(left.valueOf(), right['valueOf']());
        if (left instanceof Number)
            return Object.is(left.valueOf(), right['valueOf']());
        if (left instanceof String)
            return Object.is(left.valueOf(), right['valueOf']());
        if (left instanceof Date)
            return Object.is(left.valueOf(), right['valueOf']());
        if (left instanceof RegExp)
            return left.source === right.source && left.flags === right.flags;
        if (left instanceof Error)
            return left.message === right.message && left.stack === right.stack;
        let left_cache = $.$mol_compare_deep_cache.get(left);
        if (left_cache) {
            const right_cache = left_cache.get(right);
            if (typeof right_cache === 'boolean')
                return right_cache;
        }
        else {
            left_cache = new WeakMap();
            $.$mol_compare_deep_cache.set(left, left_cache);
        }
        left_cache.set(right, true);
        let result;
        try {
            if (!left_proto)
                result = compare_pojo(left, right);
            else if (!Reflect.getPrototypeOf(left_proto))
                result = compare_pojo(left, right);
            else if (Symbol.toPrimitive in left)
                result = compare_primitive(left, right);
            else if (Array.isArray(left))
                result = compare_array(left, right);
            else if (left instanceof Set)
                result = compare_set(left, right);
            else if (left instanceof Map)
                result = compare_map(left, right);
            else if (ArrayBuffer.isView(left))
                result = compare_buffer(left, right);
            else if (Symbol.iterator in left)
                result = compare_iterator(left[Symbol.iterator](), right[Symbol.iterator]());
            else
                result = false;
        }
        finally {
            left_cache.set(right, result);
        }
        return result;
    }
    $.$mol_compare_deep = $mol_compare_deep;
    function compare_array(left, right) {
        const len = left.length;
        if (len !== right.length)
            return false;
        for (let i = 0; i < len; ++i) {
            if (!$mol_compare_deep(left[i], right[i]))
                return false;
        }
        return true;
    }
    function compare_buffer(left, right) {
        const len = left.byteLength;
        if (len !== right.byteLength)
            return false;
        if (left instanceof DataView)
            return compare_buffer(new Uint8Array(left.buffer, left.byteOffset, left.byteLength), new Uint8Array(right.buffer, left.byteOffset, left.byteLength));
        for (let i = 0; i < len; ++i) {
            if (left[i] !== right[i])
                return false;
        }
        return true;
    }
    function compare_iterator(left, right) {
        while (true) {
            const left_next = left.next();
            const right_next = right.next();
            if (left_next.done !== right_next.done)
                return false;
            if (left_next.done)
                break;
            if (!$mol_compare_deep(left_next.value, right_next.value))
                return false;
        }
        return true;
    }
    function compare_set(left, right) {
        if (left.size !== right.size)
            return false;
        return compare_iterator(left.values(), right.values());
    }
    function compare_map(left, right) {
        if (left.size !== right.size)
            return false;
        return compare_iterator(left.keys(), right.keys())
            && compare_iterator(left.values(), right.values());
    }
    function compare_pojo(left, right) {
        const left_keys = Object.getOwnPropertyNames(left);
        const right_keys = Object.getOwnPropertyNames(right);
        if (!compare_array(left_keys, right_keys))
            return false;
        for (let key of left_keys) {
            if (!$mol_compare_deep(left[key], right[key]))
                return false;
        }
        const left_syms = Object.getOwnPropertySymbols(left);
        const right_syms = Object.getOwnPropertySymbols(right);
        if (!compare_array(left_syms, right_syms))
            return false;
        for (let key of left_syms) {
            if (!$mol_compare_deep(left[key], right[key]))
                return false;
        }
        return true;
    }
    function compare_primitive(left, right) {
        return Object.is(left[Symbol.toPrimitive]('default'), right[Symbol.toPrimitive]('default'));
    }
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_log3_area_lazy(event) {
        const self = this;
        const stack = self.$mol_log3_stack;
        const deep = stack.length;
        let logged = false;
        stack.push(() => {
            logged = true;
            self.$mol_log3_area.call(self, event);
        });
        return () => {
            if (logged)
                self.console.groupEnd();
            if (stack.length > deep)
                stack.length = deep;
        };
    }
    $.$mol_log3_area_lazy = $mol_log3_area_lazy;
    $.$mol_log3_stack = [];
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_span extends $mol_object2 {
        uri;
        source;
        row;
        col;
        length;
        constructor(uri, source, row, col, length) {
            super();
            this.uri = uri;
            this.source = source;
            this.row = row;
            this.col = col;
            this.length = length;
            this[Symbol.toStringTag] = this.uri + ('#' + this.row + ':' + this.col + '/' + this.length);
        }
        static unknown = $mol_span.begin('?');
        static begin(uri, source = '') {
            return new $mol_span(uri, source, 1, 1, 0);
        }
        static end(uri, source) {
            return new $mol_span(uri, source, 1, source.length + 1, 0);
        }
        static entire(uri, source) {
            return new $mol_span(uri, source, 1, 1, source.length);
        }
        toString() {
            return this[Symbol.toStringTag];
        }
        toJSON() {
            return {
                uri: this.uri,
                row: this.row,
                col: this.col,
                length: this.length
            };
        }
        error(message, Class = Error) {
            return new Class(`${message} (${this})`);
        }
        span(row, col, length) {
            return new $mol_span(this.uri, this.source, row, col, length);
        }
        after(length = 0) {
            return new $mol_span(this.uri, this.source, this.row, this.col + this.length, length);
        }
        slice(begin, end = -1) {
            let len = this.length;
            if (begin < 0)
                begin += len;
            if (end < 0)
                end += len;
            if (begin < 0 || begin > len)
                this.$.$mol_fail(this.error(`Begin value '${begin}' out of range`, RangeError));
            if (end < 0 || end > len)
                this.$.$mol_fail(this.error(`End value '${end}' out of range`, RangeError));
            if (end < begin)
                this.$.$mol_fail(this.error(`End value '${end}' can't be less than begin value`, RangeError));
            return this.span(this.row, this.col + begin, end - begin);
        }
    }
    $.$mol_span = $mol_span;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_tree2_to_string(tree) {
        let output = [];
        function dump(tree, prefix = '') {
            if (tree.type.length) {
                if (!prefix.length) {
                    prefix = "\t";
                }
                output.push(tree.type);
                if (tree.kids.length == 1) {
                    output.push(' ');
                    dump(tree.kids[0], prefix);
                    return;
                }
                output.push("\n");
            }
            else if (tree.value.length || prefix.length) {
                output.push("\\" + tree.value + "\n");
            }
            for (const kid of tree.kids) {
                output.push(prefix);
                dump(kid, prefix + "\t");
            }
        }
        dump(tree);
        return output.join('');
    }
    $.$mol_tree2_to_string = $mol_tree2_to_string;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_tree2 extends Object {
        type;
        value;
        kids;
        span;
        constructor(type, value, kids, span) {
            super();
            this.type = type;
            this.value = value;
            this.kids = kids;
            this.span = span;
            this[Symbol.toStringTag] = type || '\\' + value;
        }
        static list(kids, span = $mol_span.unknown) {
            return new $mol_tree2('', '', kids, span);
        }
        list(kids) {
            return $mol_tree2.list(kids, this.span);
        }
        static data(value, kids = [], span = $mol_span.unknown) {
            const chunks = value.split('\n');
            if (chunks.length > 1) {
                let kid_span = span.span(span.row, span.col, 0);
                const data = chunks.map(chunk => {
                    kid_span = kid_span.after(chunk.length);
                    return new $mol_tree2('', chunk, [], kid_span);
                });
                kids = [...data, ...kids];
                value = '';
            }
            return new $mol_tree2('', value, kids, span);
        }
        data(value, kids = []) {
            return $mol_tree2.data(value, kids, this.span);
        }
        static struct(type, kids = [], span = $mol_span.unknown) {
            if (/[ \n\t\\]/.test(type)) {
                $$.$mol_fail(span.error(`Wrong type ${JSON.stringify(type)}`));
            }
            return new $mol_tree2(type, '', kids, span);
        }
        struct(type, kids = []) {
            return $mol_tree2.struct(type, kids, this.span);
        }
        clone(kids, span = this.span) {
            return new $mol_tree2(this.type, this.value, kids, span);
        }
        text() {
            var values = [];
            for (var kid of this.kids) {
                if (kid.type)
                    continue;
                values.push(kid.value);
            }
            return this.value + values.join('\n');
        }
        static fromString(str, uri = 'unknown') {
            return $$.$mol_tree2_from_string(str, uri);
        }
        toString() {
            return $$.$mol_tree2_to_string(this);
        }
        insert(value, ...path) {
            if (path.length === 0)
                return value;
            const type = path[0];
            if (typeof type === 'string') {
                let replaced = false;
                const sub = this.kids.map((item, index) => {
                    if (item.type !== type)
                        return item;
                    replaced = true;
                    return item.insert(value, ...path.slice(1));
                }).filter(Boolean);
                if (!replaced && value) {
                    sub.push(this.struct(type, []).insert(value, ...path.slice(1)));
                }
                return this.clone(sub);
            }
            else if (typeof type === 'number') {
                const sub = this.kids.slice();
                sub[type] = (sub[type] || this.list([]))
                    .insert(value, ...path.slice(1));
                return this.clone(sub.filter(Boolean));
            }
            else {
                const kids = ((this.kids.length === 0) ? [this.list([])] : this.kids)
                    .map(item => item.insert(value, ...path.slice(1)))
                    .filter(Boolean);
                return this.clone(kids);
            }
        }
        select(...path) {
            let next = [this];
            for (const type of path) {
                if (!next.length)
                    break;
                const prev = next;
                next = [];
                for (var item of prev) {
                    switch (typeof (type)) {
                        case 'string':
                            for (var child of item.kids) {
                                if (child.type == type) {
                                    next.push(child);
                                }
                            }
                            break;
                        case 'number':
                            if (type < item.kids.length)
                                next.push(item.kids[type]);
                            break;
                        default: next.push(...item.kids);
                    }
                }
            }
            return this.list(next);
        }
        filter(path, value) {
            const sub = this.kids.filter(item => {
                var found = item.select(...path);
                if (value === undefined) {
                    return Boolean(found.kids.length);
                }
                else {
                    return found.kids.some(child => child.value == value);
                }
            });
            return this.clone(sub);
        }
        hack_self(belt, context = {}) {
            let handle = belt[this.type] || belt[''];
            if (!handle || handle === Object.prototype[this.type]) {
                handle = (input, belt, context) => [
                    input.clone(input.hack(belt, context), context.span)
                ];
            }
            try {
                return handle(this, belt, context);
            }
            catch (error) {
                error.message += `\n${this.clone([])}${this.span}`;
                $mol_fail_hidden(error);
            }
        }
        hack(belt, context = {}) {
            return [].concat(...this.kids.map(child => child.hack_self(belt, context)));
        }
        error(message, Class = Error) {
            return this.span.error(`${message}\n${this.clone([])}`, Class);
        }
    }
    $.$mol_tree2 = $mol_tree2;
    class $mol_tree2_empty extends $mol_tree2 {
        constructor() {
            super('', '', [], $mol_span.unknown);
        }
    }
    $.$mol_tree2_empty = $mol_tree2_empty;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_error_syntax extends SyntaxError {
        reason;
        line;
        span;
        constructor(reason, line, span) {
            super(`${reason}\n${span}\n${line.substring(0, span.col - 1).replace(/\S/g, ' ')}${''.padEnd(span.length, '!')}\n${line}`);
            this.reason = reason;
            this.line = line;
            this.span = span;
        }
    }
    $.$mol_error_syntax = $mol_error_syntax;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_tree2_from_string(str, uri = '?') {
        const span = $mol_span.entire(uri, str);
        var root = $mol_tree2.list([], span);
        var stack = [root];
        var pos = 0, row = 0, min_indent = 0;
        while (str.length > pos) {
            var indent = 0;
            var line_start = pos;
            row++;
            while (str.length > pos && str[pos] == '\t') {
                indent++;
                pos++;
            }
            if (!root.kids.length) {
                min_indent = indent;
            }
            indent -= min_indent;
            if (indent < 0 || indent >= stack.length) {
                const sp = span.span(row, 1, pos - line_start);
                while (str.length > pos && str[pos] != '\n') {
                    pos++;
                }
                if (indent < 0) {
                    if (str.length > pos) {
                        this.$mol_fail(new this.$mol_error_syntax(`Too few tabs`, str.substring(line_start, pos), sp));
                    }
                }
                else {
                    this.$mol_fail(new this.$mol_error_syntax(`Too many tabs`, str.substring(line_start, pos), sp));
                }
            }
            stack.length = indent + 1;
            var parent = stack[indent];
            while (str.length > pos && str[pos] != '\\' && str[pos] != '\n') {
                var error_start = pos;
                while (str.length > pos && (str[pos] == ' ' || str[pos] == '\t')) {
                    pos++;
                }
                if (pos > error_start) {
                    let line_end = str.indexOf('\n', pos);
                    if (line_end === -1)
                        line_end = str.length;
                    const sp = span.span(row, error_start - line_start + 1, pos - error_start);
                    this.$mol_fail(new this.$mol_error_syntax(`Wrong nodes separator`, str.substring(line_start, line_end), sp));
                }
                var type_start = pos;
                while (str.length > pos &&
                    str[pos] != '\\' &&
                    str[pos] != ' ' &&
                    str[pos] != '\t' &&
                    str[pos] != '\n') {
                    pos++;
                }
                if (pos > type_start) {
                    let next = new $mol_tree2(str.slice(type_start, pos), '', [], span.span(row, type_start - line_start + 1, pos - type_start));
                    const parent_kids = parent.kids;
                    parent_kids.push(next);
                    parent = next;
                }
                if (str.length > pos && str[pos] == ' ') {
                    pos++;
                }
            }
            if (str.length > pos && str[pos] == '\\') {
                var data_start = pos;
                while (str.length > pos && str[pos] != '\n') {
                    pos++;
                }
                let next = new $mol_tree2('', str.slice(data_start + 1, pos), [], span.span(row, data_start - line_start + 2, pos - data_start - 1));
                const parent_kids = parent.kids;
                parent_kids.push(next);
                parent = next;
            }
            if (str.length === pos && stack.length > 0) {
                const sp = span.span(row, pos - line_start + 1, 1);
                this.$mol_fail(new this.$mol_error_syntax(`Unexpected EOF, LF required`, str.substring(line_start, str.length), sp));
            }
            stack.push(parent);
            pos++;
        }
        return root;
    }
    $.$mol_tree2_from_string = $mol_tree2_from_string;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_tree2_from_json(json, span = $mol_span.unknown) {
        if (typeof json === 'boolean' || typeof json === 'number' || json === null) {
            return new $mol_tree2(String(json), '', [], span);
        }
        if (typeof json === 'string') {
            return $mol_tree2.data(json, [], span);
        }
        if (typeof json.toJSON === 'function') {
            return $mol_tree2_from_json(json.toJSON());
        }
        if (Array.isArray(json)) {
            const sub = json.map(json => $mol_tree2_from_json(json, span));
            return new $mol_tree2('/', '', sub, span);
        }
        if (ArrayBuffer.isView(json)) {
            const buf = new Uint8Array(json.buffer, json.byteOffset, json.byteLength);
            return $mol_tree2.data(String.fromCharCode(...buf), [], span);
        }
        if (json instanceof Date) {
            return new $mol_tree2('', json.toISOString(), [], span);
        }
        if (json.toString !== Object.prototype.toString) {
            return $mol_tree2.data(json.toString(), [], span);
        }
        if (json instanceof Error) {
            const { name, message, stack } = json;
            json = { ...json, name, message, stack };
        }
        const sub = [];
        for (var key in json) {
            const val = json[key];
            if (val === undefined)
                continue;
            const subsub = $mol_tree2_from_json(val, span);
            if (/^[^\n\t\\ ]+$/.test(key)) {
                sub.push(new $mol_tree2(key, '', [subsub], span));
            }
            else {
                sub.push($mol_tree2.data(key, [subsub], span));
            }
        }
        return new $mol_tree2('*', '', sub, span);
    }
    $.$mol_tree2_from_json = $mol_tree2_from_json;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_term_color {
        static reset = this.ansi(0, 0);
        static bold = this.ansi(1, 22);
        static italic = this.ansi(3, 23);
        static underline = this.ansi(4, 24);
        static inverse = this.ansi(7, 27);
        static hidden = this.ansi(8, 28);
        static strike = this.ansi(9, 29);
        static gray = this.ansi(90, 39);
        static red = this.ansi(91, 39);
        static green = this.ansi(92, 39);
        static yellow = this.ansi(93, 39);
        static blue = this.ansi(94, 39);
        static magenta = this.ansi(95, 39);
        static cyan = this.ansi(96, 39);
        static Gray = (str) => this.inverse(this.gray(str));
        static Red = (str) => this.inverse(this.red(str));
        static Green = (str) => this.inverse(this.green(str));
        static Yellow = (str) => this.inverse(this.yellow(str));
        static Blue = (str) => this.inverse(this.blue(str));
        static Magenta = (str) => this.inverse(this.magenta(str));
        static Cyan = (str) => this.inverse(this.cyan(str));
        static ansi(open, close) {
            if (typeof process === 'undefined')
                return String;
            if (!process.stdout.isTTY)
                return String;
            const prefix = `\x1b[${open}m`;
            const postfix = `\x1b[${close}m`;
            const suffix_regexp = new RegExp(postfix.replace('[', '\\['), 'g');
            return function colorer(str) {
                str = String(str);
                if (str === '')
                    return str;
                const suffix = str.replace(suffix_regexp, prefix);
                return prefix + suffix + postfix;
            };
        }
    }
    $.$mol_term_color = $mol_term_color;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_log3_node_make(level, output, type, color) {
        return function $mol_log3_logger(event) {
            if (!event.time)
                event = { time: new Date().toISOString(), ...event };
            let tree = this.$mol_tree2_from_json(event);
            tree = tree.struct(type, tree.kids);
            let str = color(tree.toString());
            this.console[level](str);
            const self = this;
            return () => self.console.groupEnd();
        };
    }
    $.$mol_log3_node_make = $mol_log3_node_make;
    $.$mol_log3_come = $mol_log3_node_make('info', 'stdout', 'come', $mol_term_color.blue);
    $.$mol_log3_done = $mol_log3_node_make('info', 'stdout', 'done', $mol_term_color.green);
    $.$mol_log3_fail = $mol_log3_node_make('error', 'stderr', 'fail', $mol_term_color.red);
    $.$mol_log3_warn = $mol_log3_node_make('warn', 'stderr', 'warn', $mol_term_color.yellow);
    $.$mol_log3_rise = $mol_log3_node_make('log', 'stdout', 'rise', $mol_term_color.magenta);
    $.$mol_log3_area = $mol_log3_node_make('log', 'stdout', 'area', $mol_term_color.cyan);
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_wire_task extends $mol_wire_fiber {
        static getter(task) {
            return function $mol_wire_task_get(host, args) {
                const sub = $mol_wire_auto();
                const existen = sub?.track_next();
                reuse: if (existen) {
                    if (!existen.temp)
                        break reuse;
                    if (existen.host !== host)
                        break reuse;
                    if (existen.task !== task)
                        break reuse;
                    if (!$mol_compare_deep(existen.args, args))
                        break reuse;
                    return existen;
                }
                const key = (host?.[Symbol.toStringTag] ?? host) + ('.' + task.name + '<#>');
                const next = new $mol_wire_task(key, task, host, args);
                if (existen?.temp) {
                    $$.$mol_log3_warn({
                        place: '$mol_wire_task',
                        message: `Non idempotency`,
                        sub,
                        pubs: [...sub?.pub_list ?? [], existen],
                        next,
                        hint: 'Ignore it',
                    });
                }
                return next;
            };
        }
        get temp() {
            return true;
        }
        complete() {
            if ($mol_promise_like(this.cache))
                return;
            this.destructor();
        }
        put(next) {
            const prev = this.cache;
            this.cache = next;
            if ($mol_promise_like(next)) {
                this.cursor = $mol_wire_cursor.fresh;
                if (next !== prev)
                    this.emit();
                if ($mol_owning_catch(this, next)) {
                    try {
                        next[Symbol.toStringTag] = this[Symbol.toStringTag];
                    }
                    catch {
                        Object.defineProperty(next, Symbol.toStringTag, { value: this[Symbol.toStringTag] });
                    }
                }
                return next;
            }
            this.cursor = $mol_wire_cursor.final;
            if (this.sub_empty)
                this.destructor();
            else if (next !== prev)
                this.emit();
            return next;
        }
    }
    $.$mol_wire_task = $mol_wire_task;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_wire_method(host, field, descr) {
        if (!descr)
            descr = Reflect.getOwnPropertyDescriptor(host, field);
        const orig = descr?.value ?? host[field];
        const sup = Reflect.getPrototypeOf(host);
        if (typeof sup[field] === 'function') {
            Object.defineProperty(orig, 'name', { value: sup[field].name });
        }
        const temp = $mol_wire_task.getter(orig);
        const value = function (...args) {
            const fiber = temp(this ?? null, args);
            return fiber.sync();
        };
        Object.defineProperty(value, 'name', { value: orig.name + ' ' });
        Object.assign(value, { orig });
        const descr2 = { ...descr, value };
        Reflect.defineProperty(host, field, descr2);
        return descr2;
    }
    $.$mol_wire_method = $mol_wire_method;
})($ || ($ = {}));

;
"use strict";

;
"use strict";

;
"use strict";
var $;
(function ($) {
    const catched = new WeakMap();
    function $mol_fail_catch(error) {
        if (typeof error !== 'object')
            return false;
        if ($mol_promise_like(error))
            $mol_fail_hidden(error);
        if (catched.get(error))
            return false;
        catched.set(error, true);
        return true;
    }
    $.$mol_fail_catch = $mol_fail_catch;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_fail_log(error) {
        if ($mol_promise_like(error))
            return false;
        if (!$mol_fail_catch(error))
            return false;
        console.error(error);
        return true;
    }
    $.$mol_fail_log = $mol_fail_log;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_wire_atom extends $mol_wire_fiber {
        static solo(host, task) {
            const field = task.name + '<>';
            const existen = Object.getOwnPropertyDescriptor(host ?? task, field)?.value;
            if (existen)
                return existen;
            const prefix = host?.[Symbol.toStringTag] ?? (host instanceof Function ? $$.$mol_func_name(host) : host);
            const key = prefix + ('.' + field);
            const fiber = new $mol_wire_atom(key, task, host, []);
            (host ?? task)[field] = fiber;
            return fiber;
        }
        static plex(host, task, key) {
            const field = task.name + '<>';
            let dict = Object.getOwnPropertyDescriptor(host ?? task, field)?.value;
            const prefix = host?.[Symbol.toStringTag] ?? (host instanceof Function ? $$.$mol_func_name(host) : host);
            const key_str = $mol_key(key);
            if (dict) {
                const existen = dict.get(key_str);
                if (existen)
                    return existen;
            }
            else {
                dict = (host ?? task)[field] = new Map();
            }
            const id = prefix + ('.' + task.name) + ('<' + key_str.replace(/^"|"$/g, "'") + '>');
            const fiber = new $mol_wire_atom(id, task, host, [key]);
            dict.set(key_str, fiber);
            return fiber;
        }
        static watching = new Set();
        static watcher = null;
        static watch() {
            $mol_wire_atom.watcher = new $mol_after_frame($mol_wire_atom.watch);
            for (const atom of $mol_wire_atom.watching) {
                if (atom.cursor === $mol_wire_cursor.final) {
                    $mol_wire_atom.watching.delete(atom);
                }
                else {
                    atom.cursor = $mol_wire_cursor.stale;
                    atom.fresh();
                }
            }
        }
        watch() {
            if (!$mol_wire_atom.watcher) {
                $mol_wire_atom.watcher = new $mol_after_frame($mol_wire_atom.watch);
            }
            $mol_wire_atom.watching.add(this);
        }
        resync(args) {
            return this.put(this.task.call(this.host, ...args));
        }
        once() {
            return this.sync();
        }
        channel() {
            return Object.assign((next) => {
                if (next !== undefined)
                    return this.resync([...this.args, next]);
                if (!$mol_wire_fiber.warm)
                    return this.result();
                if ($mol_wire_auto()?.temp) {
                    return this.once();
                }
                else {
                    return this.sync();
                }
            }, { atom: this });
        }
        destructor() {
            super.destructor();
            if (this.pub_from === 0) {
                ;
                (this.host ?? this.task)[this.field()] = null;
            }
            else {
                ;
                (this.host ?? this.task)[this.field()].delete($mol_key(this.args[0]));
            }
        }
        put(next) {
            const prev = this.cache;
            update: if (next !== prev) {
                try {
                    if ($mol_compare_deep(prev, next))
                        break update;
                }
                catch (error) {
                    $mol_fail_log(error);
                }
                if ($mol_owning_check(this, prev)) {
                    prev.destructor();
                }
                if ($mol_owning_catch(this, next)) {
                    try {
                        next[Symbol.toStringTag] = this[Symbol.toStringTag];
                    }
                    catch {
                        Object.defineProperty(next, Symbol.toStringTag, { value: this[Symbol.toStringTag] });
                    }
                }
                if (!this.sub_empty)
                    this.emit();
            }
            this.cache = next;
            this.cursor = $mol_wire_cursor.fresh;
            if ($mol_promise_like(next))
                return next;
            this.complete_pubs();
            return next;
        }
    }
    __decorate([
        $mol_wire_method
    ], $mol_wire_atom.prototype, "resync", null);
    __decorate([
        $mol_wire_method
    ], $mol_wire_atom.prototype, "once", null);
    $.$mol_wire_atom = $mol_wire_atom;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_wire_solo(host, field, descr) {
        if (!descr)
            descr = Reflect.getOwnPropertyDescriptor(host, field);
        const orig = descr?.value ?? host[field];
        const sup = Reflect.getPrototypeOf(host);
        if (typeof sup[field] === 'function') {
            Object.defineProperty(orig, 'name', { value: sup[field].name });
        }
        const descr2 = {
            ...descr,
            value: function (...args) {
                let atom = $mol_wire_atom.solo(this, orig);
                if ((args.length === 0) || (args[0] === undefined)) {
                    if (!$mol_wire_fiber.warm)
                        return atom.result();
                    if ($mol_wire_auto()?.temp) {
                        return atom.once();
                    }
                    else {
                        return atom.sync();
                    }
                }
                return atom.resync(args);
            }
        };
        Reflect.defineProperty(descr2.value, 'name', { value: orig.name + ' ' });
        Reflect.defineProperty(descr2.value, 'length', { value: orig.length });
        Object.assign(descr2.value, { orig });
        Reflect.defineProperty(host, field, descr2);
        return descr2;
    }
    $.$mol_wire_solo = $mol_wire_solo;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_wire_plex(host, field, descr) {
        if (!descr)
            descr = Reflect.getOwnPropertyDescriptor(host, field);
        const orig = descr?.value ?? host[field];
        const sup = Reflect.getPrototypeOf(host);
        if (typeof sup[field] === 'function') {
            Object.defineProperty(orig, 'name', { value: sup[field].name });
        }
        const descr2 = {
            ...descr,
            value: function (...args) {
                let atom = $mol_wire_atom.plex(this, orig, args[0]);
                if ((args.length === 1) || (args[1] === undefined)) {
                    if (!$mol_wire_fiber.warm)
                        return atom.result();
                    if ($mol_wire_auto()?.temp) {
                        return atom.once();
                    }
                    else {
                        return atom.sync();
                    }
                }
                return atom.resync(args);
            }
        };
        Reflect.defineProperty(descr2.value, 'name', { value: orig.name + ' ' });
        Reflect.defineProperty(descr2.value, 'length', { value: orig.length });
        Object.assign(descr2.value, { orig });
        Reflect.defineProperty(host, field, descr2);
        return descr2;
    }
    $.$mol_wire_plex = $mol_wire_plex;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_mem = $mol_wire_solo;
    $.$mol_mem_key = $mol_wire_plex;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $node = new Proxy({ require }, {
    get(target, name, wrapper) {
        if (target[name])
            return target[name];
        if (name.startsWith('node:'))
            return target.require(name);
        if (name[0] === '.')
            return target.require(name);
        const mod = target.require('module');
        if (mod.builtinModules.indexOf(name) >= 0)
            return target.require(name);
        try {
            target.require.resolve(name);
        }
        catch {
            const $$ = $;
            $$.$mol_exec('.', 'npm', 'install', '--omit=dev', name);
            try {
                $$.$mol_exec('.', 'npm', 'install', '--omit=dev', '@types/' + name);
            }
            catch (e) {
                if ($$.$mol_fail_catch(e)) {
                    $$.$mol_fail_log(e);
                }
            }
        }
        try {
            return target.require(name);
        }
        catch (error) {
            if ($.$mol_fail_catch(error) && error.code === 'ERR_REQUIRE_ESM') {
                const module = cache.get(name);
                if (module)
                    return module;
                throw import(name).then(module => cache.set(name, module));
            }
            $.$mol_fail_log(error);
            return null;
        }
    },
    set(target, name, value) {
        target[name] = value;
        return true;
    },
});
const cache = new Map();
require = (req => Object.assign(function require(name) {
    return $node[name];
}, req))(require);

;
"use strict";
var $;
(function ($) {
    function cause_serialize(cause) {
        return JSON.stringify(cause, null, '  ')
            .replace(/\(/, '<')
            .replace(/\)/, ' >');
    }
    function frame_normalize(frame) {
        return (typeof frame === 'string' ? frame : cause_serialize(frame))
            .trim()
            .replace(/at /gm, '   at ')
            .replace(/^(?!    +at )(.*)/gm, '    at | $1 (#)');
    }
    class $mol_error_mix extends AggregateError {
        cause;
        name = $$.$mol_func_name(this.constructor).replace(/^\$/, '') + '_Error';
        constructor(message, cause = {}, ...errors) {
            super(errors, message, { cause });
            this.cause = cause;
            const desc = Object.getOwnPropertyDescriptor(this, 'stack');
            const stack_get = () => desc?.get?.() ?? super.stack ?? desc?.value ?? this.message;
            Object.defineProperty(this, 'stack', {
                get: () => stack_get() + '\n' + [
                    this.cause ?? 'no cause',
                    ...this.errors.flatMap(e => [
                        e.stack,
                        ...e instanceof $mol_error_mix || !e.cause ? [] : [e.cause]
                    ])
                ].map(frame_normalize).join('\n')
            });
            Object.defineProperty(this, 'cause', {
                get: () => cause
            });
        }
        static [Symbol.toPrimitive]() {
            return this.toString();
        }
        static toString() {
            return $$.$mol_func_name(this);
        }
        static make(...params) {
            return new this(...params);
        }
    }
    $.$mol_error_mix = $mol_error_mix;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_env() {
        return {};
    }
    $.$mol_env = $mol_env;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_env = function $mol_env() {
        return this.process.env;
    };
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const factories = new WeakMap();
    function factory(val) {
        let make = factories.get(val);
        if (make)
            return make;
        make = $mol_func_name_from((...args) => new val(...args), val);
        factories.set(val, make);
        return make;
    }
    function $mol_wire_sync(obj) {
        return new Proxy(obj, {
            get(obj, field) {
                let val = obj[field];
                if (typeof val !== 'function')
                    return val;
                const temp = $mol_wire_task.getter(val);
                return function $mol_wire_sync(...args) {
                    const fiber = temp(obj, args);
                    return fiber.sync();
                };
            },
            construct(obj, args) {
                const temp = $mol_wire_task.getter(factory(obj));
                return temp(obj, args).sync();
            },
            apply(obj, self, args) {
                const temp = $mol_wire_task.getter(obj);
                return temp(self, args).sync();
            },
        });
    }
    $.$mol_wire_sync = $mol_wire_sync;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_run_error extends $mol_error_mix {
    }
    $.$mol_run_error = $mol_run_error;
    $.$mol_run_spawn = (...args) => $node['child_process'].spawn(...args);
    $.$mol_run_spawn_sync = (...args) => $node['child_process'].spawnSync(...args);
    class $mol_run extends $mol_object {
        static async_enabled() {
            return Boolean(this.$.$mol_env()['MOL_RUN_ASYNC']);
        }
        static spawn(options) {
            const sync = !this.async_enabled() || !Boolean($mol_wire_auto());
            const env = options.env ?? this.$.$mol_env();
            return $mol_wire_sync(this).spawn_async({ ...options, sync, env });
        }
        static spawn_async({ dir, sync, timeout, command, env }) {
            const args_raw = typeof command === 'string' ? command.split(' ') : command;
            const [app, ...args] = args_raw;
            const opts = { shell: true, cwd: dir, env };
            const log_object = {
                place: `${this}.spawn()`,
                message: 'Run',
                command: args_raw.join(' '),
                dir: $node.path.relative('', dir),
            };
            if (sync) {
                this.$.$mol_log3_come({
                    hint: 'Run inside fiber',
                    ...log_object
                });
                let error;
                let res;
                try {
                    res = this.$.$mol_run_spawn_sync(app, args, opts);
                    error = res.error;
                }
                catch (err) {
                    error = err;
                }
                if (!res || error || res.status) {
                    throw new $mol_run_error(this.error_message(res), { ...log_object, status: res?.status, signal: res?.signal }, ...(error ? [error] : []));
                }
                return res;
            }
            let sub;
            try {
                sub = this.$.$mol_run_spawn(app, args, {
                    ...opts,
                    stdio: ['pipe', 'inherit', 'inherit'],
                });
            }
            catch (error) {
                throw new $mol_run_error(this.error_message(undefined), log_object, error);
            }
            const pid = sub.pid ?? 0;
            this.$.$mol_log3_come({
                ...log_object,
                pid,
            });
            let timeout_kill = false;
            let timer;
            const std_data = [];
            const error_data = [];
            const add = (std_chunk, error_chunk) => {
                if (std_chunk)
                    std_data.push(std_chunk);
                if (error_chunk)
                    error_data.push(error_chunk);
                if (!timeout)
                    return;
                clearTimeout(timer);
                timer = setTimeout(() => {
                    const signal = timeout_kill ? 'SIGKILL' : 'SIGTERM';
                    timeout_kill = true;
                    add();
                    sub.kill(signal);
                }, timeout);
            };
            add();
            sub.stdout?.on('data', data => add(data));
            sub.stderr?.on('data', data => add(undefined, data));
            const result_promise = new Promise((done, fail) => {
                const close = (error, status = null, signal = null) => {
                    if (!timer && timeout)
                        return;
                    clearTimeout(timer);
                    timer = undefined;
                    const res = {
                        pid,
                        signal,
                        get stdout() { return Buffer.concat(std_data); },
                        get stderr() { return Buffer.concat(error_data); }
                    };
                    if (error || status || timeout_kill)
                        return fail(new $mol_run_error(this.error_message(res) + (timeout_kill ? ', timeout' : ''), { ...log_object, pid, status, signal, timeout_kill }, ...error ? [error] : []));
                    this.$.$mol_log3_done({
                        ...log_object,
                        pid,
                    });
                    done(res);
                };
                sub.on('disconnect', () => close(new Error('Disconnected')));
                sub.on('error', err => close(err));
                sub.on('exit', (status, signal) => close(null, status, signal));
            });
            return Object.assign(result_promise, { destructor: () => {
                    clearTimeout(timer);
                    sub.kill('SIGKILL');
                } });
        }
        static error_message(res) {
            return res?.stderr.toString() || res?.stdout.toString() || 'Run error';
        }
    }
    $.$mol_run = $mol_run;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_exec(dir, command, ...args) {
        return this.$mol_run.spawn({ command: [command, ...args], dir });
    }
    $.$mol_exec = $mol_exec;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_dom_context = new $node.jsdom.JSDOM('', { url: 'https://localhost/' }).window;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_view_selection extends $mol_object {
        static focused(next, notify) {
            const parents = [];
            let element = next?.[0] ?? $mol_dom_context.document.activeElement;
            while (element) {
                parents.push(element);
                element = element.parentNode;
            }
            if (!next || notify)
                return parents;
            new $mol_after_tick(() => {
                const element = this.focused()[0];
                if (element)
                    element.focus();
                else
                    $mol_dom_context.blur();
            });
            return parents;
        }
    }
    __decorate([
        $mol_mem
    ], $mol_view_selection, "focused", null);
    $.$mol_view_selection = $mol_view_selection;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_wrapper extends $mol_object2 {
        static wrap;
        static run(task) {
            return this.func(task)();
        }
        static func(func) {
            return this.wrap(func);
        }
        static get class() {
            return (Class) => {
                const construct = (target, args) => new Class(...args);
                const handler = {
                    construct: this.func(construct)
                };
                handler[Symbol.toStringTag] = Class.name + '#';
                return new Proxy(Class, handler);
            };
        }
        static get method() {
            return (obj, name, descr) => {
                descr.value = this.func(descr.value);
                return descr;
            };
        }
        static get field() {
            return (obj, name, descr) => {
                descr.get = descr.set = this.func(descr.get);
                return descr;
            };
        }
    }
    $.$mol_wrapper = $mol_wrapper;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_memo extends $mol_wrapper {
        static wrap(task) {
            const store = new WeakMap();
            const fun = function (next) {
                if (next === undefined && store.has(this))
                    return store.get(this);
                const val = task.call(this, next) ?? next;
                store.set(this, val);
                return val;
            };
            Reflect.defineProperty(fun, 'name', { value: task.name + ' ' });
            return fun;
        }
    }
    $.$mol_memo = $mol_memo;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_dom = $mol_dom_context;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_dom_qname(name) {
        return name.replace(/\W/g, '').replace(/^(?=\d+)/, '_');
    }
    $.$mol_dom_qname = $mol_dom_qname;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_wire_probe(task, def) {
        const warm = $mol_wire_fiber.warm;
        try {
            $mol_wire_fiber.warm = false;
            const res = task();
            if (res === undefined)
                return def;
            return res;
        }
        finally {
            $mol_wire_fiber.warm = warm;
        }
    }
    $.$mol_wire_probe = $mol_wire_probe;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_wire_watch() {
        const atom = $mol_wire_auto();
        if (atom instanceof $mol_wire_atom) {
            atom.watch();
        }
        else {
            $mol_fail(new Error('Atom is required for watching'));
        }
    }
    $.$mol_wire_watch = $mol_wire_watch;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_const(value) {
        const getter = (() => value);
        getter['()'] = value;
        getter[Symbol.toStringTag] = value;
        getter[$mol_dev_format_head] = () => $mol_dev_format_span({}, '()=> ', $mol_dev_format_auto(value));
        return getter;
    }
    $.$mol_const = $mol_const;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_wire_solid() {
        let current = $mol_wire_auto();
        if (current.temp)
            current = current.host;
        if (current.reap !== nothing) {
            current?.sub_on(sub, sub.data.length);
        }
        current.reap = nothing;
    }
    $.$mol_wire_solid = $mol_wire_solid;
    const nothing = () => { };
    const sub = new $mol_wire_pub_sub;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_dom_render_attributes(el, attrs) {
        for (let name in attrs) {
            let val = attrs[name];
            if (val === undefined) {
                continue;
            }
            else if (val === null || val === false) {
                if (!el.hasAttribute(name))
                    continue;
                el.removeAttribute(name);
            }
            else {
                const str = String(val);
                if (el.getAttribute(name) === str)
                    continue;
                el.setAttribute(name, str);
            }
        }
    }
    $.$mol_dom_render_attributes = $mol_dom_render_attributes;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_dom_render_events(el, events, passive = false) {
        for (let name in events) {
            el.addEventListener(name, events[name], { passive });
        }
    }
    $.$mol_dom_render_events = $mol_dom_render_events;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_dom_render_styles(el, styles) {
        for (let name in styles) {
            let val = styles[name];
            const style = el.style;
            const kebab = (name) => name.replace(/[A-Z]/g, letter => '-' + letter.toLowerCase());
            if (typeof val === 'number') {
                style.setProperty(kebab(name), `${val}px`);
            }
            else {
                style.setProperty(kebab(name), val);
            }
        }
    }
    $.$mol_dom_render_styles = $mol_dom_render_styles;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_dom_render_children(el, childNodes) {
        const node_set = new Set(childNodes);
        let nextNode = el.firstChild;
        for (let view of childNodes) {
            if (view == null)
                continue;
            if (view instanceof $mol_dom_context.Node) {
                while (true) {
                    if (!nextNode) {
                        el.appendChild(view);
                        break;
                    }
                    if (nextNode == view) {
                        nextNode = nextNode.nextSibling;
                        break;
                    }
                    else {
                        if (node_set.has(nextNode)) {
                            el.insertBefore(view, nextNode);
                            break;
                        }
                        else {
                            const nn = nextNode.nextSibling;
                            el.removeChild(nextNode);
                            nextNode = nn;
                        }
                    }
                }
            }
            else {
                if (nextNode && nextNode.nodeName === '#text') {
                    const str = String(view);
                    if (nextNode.nodeValue !== str)
                        nextNode.nodeValue = str;
                    nextNode = nextNode.nextSibling;
                }
                else {
                    const textNode = $mol_dom_context.document.createTextNode(String(view));
                    el.insertBefore(textNode, nextNode);
                }
            }
        }
        while (nextNode) {
            const currNode = nextNode;
            nextNode = currNode.nextSibling;
            el.removeChild(currNode);
        }
    }
    $.$mol_dom_render_children = $mol_dom_render_children;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_dom_render_fields(el, fields) {
        for (let key in fields) {
            const val = fields[key];
            if (val === undefined)
                continue;
            if (val === el[key])
                continue;
            el[key] = val;
        }
    }
    $.$mol_dom_render_fields = $mol_dom_render_fields;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_wire_async(obj) {
        let fiber;
        const temp = $mol_wire_task.getter(obj);
        return new Proxy(obj, {
            get(obj, field) {
                const val = obj[field];
                if (typeof val !== 'function')
                    return val;
                let fiber;
                const temp = $mol_wire_task.getter(val);
                return function $mol_wire_async(...args) {
                    fiber?.destructor();
                    fiber = temp(obj, args);
                    return fiber.async();
                };
            },
            apply(obj, self, args) {
                fiber?.destructor();
                fiber = temp(self, args);
                return fiber.async();
            },
        });
    }
    $.$mol_wire_async = $mol_wire_async;
})($ || ($ = {}));

;
"use strict";

;
"use strict";

;
"use strict";
var $;
(function ($) {
    function $mol_style_attach(id, text) {
        const doc = $mol_dom_context.document;
        if (!doc)
            return null;
        const elid = `$mol_style_attach:${id}`;
        let el = doc.getElementById(elid);
        if (!el) {
            el = doc.createElement('style');
            el.id = elid;
            doc.head.appendChild(el);
        }
        if (el.innerHTML != text)
            el.innerHTML = text;
        return el;
    }
    $.$mol_style_attach = $mol_style_attach;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_decor {
        value;
        constructor(value) {
            this.value = value;
        }
        prefix() { return ''; }
        valueOf() { return this.value; }
        postfix() { return ''; }
        toString() {
            return `${this.prefix()}${this.valueOf()}${this.postfix()}`;
        }
    }
    $.$mol_decor = $mol_decor;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_style_unit extends $mol_decor {
        literal;
        constructor(value, literal) {
            super(value);
            this.literal = literal;
        }
        postfix() {
            return this.literal;
        }
        static per(value) { return `${value}%`; }
        static px(value) { return `${value}px`; }
        static mm(value) { return `${value}mm`; }
        static cm(value) { return `${value}cm`; }
        static Q(value) { return `${value}Q`; }
        static in(value) { return `${value}in`; }
        static pc(value) { return `${value}pc`; }
        static pt(value) { return `${value}pt`; }
        static cap(value) { return `${value}cap`; }
        static ch(value) { return `${value}ch`; }
        static em(value) { return `${value}em`; }
        static rem(value) { return `${value}rem`; }
        static ex(value) { return `${value}ex`; }
        static ic(value) { return `${value}ic`; }
        static lh(value) { return `${value}lh`; }
        static rlh(value) { return `${value}rlh`; }
        static vh(value) { return `${value}vh`; }
        static vw(value) { return `${value}vw`; }
        static vi(value) { return `${value}vi`; }
        static vb(value) { return `${value}vb`; }
        static vmin(value) { return `${value}vmin`; }
        static vmax(value) { return `${value}vmax`; }
        static deg(value) { return `${value}deg`; }
        static rad(value) { return `${value}rad`; }
        static grad(value) { return `${value}grad`; }
        static turn(value) { return `${value}turn`; }
        static s(value) { return `${value}s`; }
        static ms(value) { return `${value}ms`; }
    }
    $.$mol_style_unit = $mol_style_unit;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const { per } = $mol_style_unit;
    class $mol_style_func extends $mol_decor {
        name;
        constructor(name, value) {
            super(value);
            this.name = name;
        }
        prefix() { return this.name + '('; }
        postfix() { return ')'; }
        static linear_gradient(value) {
            return new $mol_style_func('linear-gradient', value);
        }
        static calc(value) {
            return new $mol_style_func('calc', value);
        }
        static vary(name, defaultValue) {
            return new $mol_style_func('var', defaultValue ? [name, defaultValue] : name);
        }
        static url(href) {
            return new $mol_style_func('url', JSON.stringify(href));
        }
        static hsla(hue, saturation, lightness, alpha) {
            return new $mol_style_func('hsla', [hue, per(saturation), per(lightness), alpha]);
        }
        static clamp(min, mid, max) {
            return new $mol_style_func('clamp', [min, mid, max]);
        }
        static rgba(red, green, blue, alpha) {
            return new $mol_style_func('rgba', [red, green, blue, alpha]);
        }
        static scale(zoom) {
            return new $mol_style_func('scale', [zoom]);
        }
        static linear(...breakpoints) {
            return new $mol_style_func("linear", breakpoints.map((e) => Array.isArray(e)
                ? String(e[0]) +
                    " " +
                    (typeof e[1] === "number" ? e[1] + "%" : e[1].toString())
                : String(e)));
        }
        static cubic_bezier(x1, y1, x2, y2) {
            return new $mol_style_func('cubic-bezier', [x1, y1, x2, y2]);
        }
        static steps(value, step_position) {
            return new $mol_style_func('steps', [value, step_position]);
        }
        static blur(value) {
            return new $mol_style_func('blur', value ?? "");
        }
        static brightness(value) {
            return new $mol_style_func('brightness', value ?? "");
        }
        static contrast(value) {
            return new $mol_style_func('contrast', value ?? "");
        }
        static drop_shadow(color, x_offset, y_offset, blur_radius) {
            return new $mol_style_func("drop-shadow", blur_radius
                ? [color, x_offset, y_offset, blur_radius]
                : [color, x_offset, y_offset]);
        }
        static grayscale(value) {
            return new $mol_style_func('grayscale', value ?? "");
        }
        static hue_rotate(value) {
            return new $mol_style_func('hue-rotate', value ?? "");
        }
        static invert(value) {
            return new $mol_style_func('invert', value ?? "");
        }
        static opacity(value) {
            return new $mol_style_func('opacity', value ?? "");
        }
        static sepia(value) {
            return new $mol_style_func('sepia', value ?? "");
        }
        static saturate(value) {
            return new $mol_style_func('saturate', value ?? "");
        }
    }
    $.$mol_style_func = $mol_style_func;
})($ || ($ = {}));

;
"use strict";

;
"use strict";

;
"use strict";
var $;
(function ($) {
    function $mol_style_prop(prefix, keys) {
        const record = keys.reduce((rec, key) => {
            rec[key] = $mol_style_func.vary(`--${prefix}_${key}`);
            return rec;
        }, {});
        return record;
    }
    $.$mol_style_prop = $mol_style_prop;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_theme = $mol_style_prop('mol_theme', [
        'back',
        'hover',
        'card',
        'current',
        'special',
        'text',
        'control',
        'shade',
        'line',
        'focus',
        'field',
        'image',
    ]);
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/theme/theme.css", ":root {\n\t--mol_theme_hue: 240deg;\n\t--mol_theme_hue_spread: 90deg;\n}\n\n:where([mol_theme]) {\n\tcolor: var(--mol_theme_text);\n\tfill: var(--mol_theme_text);\n\tbackground-color: var(--mol_theme_back);\n}\n\t\n:root, [mol_theme=\"$mol_theme_dark\"], :where([mol_theme=\"$mol_theme_dark\"]) [mol_theme]  {\n\n\t--mol_theme_luma: -1;\n\t--mol_theme_image: invert(1) hue-rotate( 180deg );\n\n\t--mol_theme_back: hsl( var(--mol_theme_hue), 20%, 10% );\n\t--mol_theme_card: hsl( var(--mol_theme_hue), 50%, 20%, .25 );\n\t--mol_theme_field: hsl( var(--mol_theme_hue), 50%, 8%, .25 );\n\t--mol_theme_hover: hsl( var(--mol_theme_hue), 0%, 50%, .1 );\n\t\n\t--mol_theme_text: hsl( var(--mol_theme_hue), 0%, 80% );\n\t--mol_theme_shade: hsl( var(--mol_theme_hue), 0%, 60%, 1 );\n\t--mol_theme_line: hsl( var(--mol_theme_hue), 0%, 50%, .25 );\n\t--mol_theme_focus: hsl( calc( var(--mol_theme_hue) + 180deg ), 100%, 65% );\n\t\n\t--mol_theme_control: hsl( var(--mol_theme_hue), 60%, 65% );\n\t--mol_theme_current: hsl( calc( var(--mol_theme_hue) - var(--mol_theme_hue_spread) ), 60%, 65% );\n\t--mol_theme_special: hsl( calc( var(--mol_theme_hue) + var(--mol_theme_hue_spread) ), 60%, 65% );\n\n} @supports( color: oklch( 0% 0 0deg ) ) {\n:root, [mol_theme=\"$mol_theme_dark\"], :where([mol_theme=\"$mol_theme_dark\"]) [mol_theme]  {\n\t\n\t--mol_theme_back: oklch( 20% .03 var(--mol_theme_hue) );\n\t--mol_theme_card: oklch( 30% .05 var(--mol_theme_hue) / .25 );\n\t--mol_theme_field: oklch( 15% 0 var(--mol_theme_hue) / .25 );\n\t--mol_theme_hover: oklch( 70% 0 var(--mol_theme_hue) / .1 );\n\t\n\t--mol_theme_text: oklch( 80% 0 var(--mol_theme_hue) );\n\t--mol_theme_shade: oklch( 60% 0 var(--mol_theme_hue) );\n\t--mol_theme_line: oklch( 60% 0 var(--mol_theme_hue) / .25 );\n\t--mol_theme_focus: oklch( 80% .2 calc( var(--mol_theme_hue) + 180deg ) );\n\t\n\t--mol_theme_control: oklch( 70% .1 var(--mol_theme_hue) );\n\t--mol_theme_current: oklch( 70% .2 calc( var(--mol_theme_hue) - var(--mol_theme_hue_spread) ) );\n\t--mol_theme_special: oklch( 70% .2 calc( var(--mol_theme_hue) + var(--mol_theme_hue_spread) ) );\n\n} }\n\n[mol_theme=\"$mol_theme_light\"], :where([mol_theme=\"$mol_theme_light\"]) [mol_theme] {\n\t\n\t--mol_theme_luma: 1;\n\t--mol_theme_image: none;\n\t\n\t--mol_theme_back: hsl( var(--mol_theme_hue), 20%, 92% );\n\t--mol_theme_card: hsl( var(--mol_theme_hue), 50%, 100%, .5 );\n\t--mol_theme_field: hsl( var(--mol_theme_hue), 50%, 100%, .75 );\n\t--mol_theme_hover: hsl( var(--mol_theme_hue), 0%, 50%, .1 );\n\t\n\t--mol_theme_text: hsl( var(--mol_theme_hue), 0%, 0% );\n\t--mol_theme_shade: hsl( var(--mol_theme_hue), 0%, 40%, 1 );\n\t--mol_theme_line: hsl( var(--mol_theme_hue), 0%, 50%, .25 );\n\t--mol_theme_focus: hsl( calc( var(--mol_theme_hue) + 180deg ), 100%, 40% );\n\t\n\t--mol_theme_control: hsl( var(--mol_theme_hue), 80%, 30% );\n\t--mol_theme_current: hsl( calc( var(--mol_theme_hue) - var(--mol_theme_hue_spread) ), 80%, 30% );\n\t--mol_theme_special: hsl( calc( var(--mol_theme_hue) + var(--mol_theme_hue_spread) ), 80%, 30% );\n\n} @supports( color: oklch( 0% 0 0deg ) ) {\n[mol_theme=\"$mol_theme_light\"], :where([mol_theme=\"$mol_theme_light\"]) [mol_theme] {\n\t--mol_theme_back: oklch( 92% .01 var(--mol_theme_hue) );\n\t--mol_theme_card: oklch( 99% .01 var(--mol_theme_hue) / .5 );\n\t--mol_theme_field: oklch( 100% 0 var(--mol_theme_hue) / .5 );\n\t--mol_theme_hover: oklch( 70% 0 var(--mol_theme_hue) / .1 );\n\t\n\t--mol_theme_text: oklch( 20% 0 var(--mol_theme_hue) );\n\t--mol_theme_shade: oklch( 60% 0 var(--mol_theme_hue) );\n\t--mol_theme_line: oklch( 50% 0 var(--mol_theme_hue) / .25 );\n\t--mol_theme_focus: oklch( 60% .2 calc( var(--mol_theme_hue) + 180deg ) );\n\t\n\t--mol_theme_control: oklch( 40% .15 var(--mol_theme_hue) );\n\t--mol_theme_current: oklch( 50% .2 calc( var(--mol_theme_hue) - var(--mol_theme_hue_spread) ) );\n\t--mol_theme_special: oklch( 50% .2 calc( var(--mol_theme_hue) + var(--mol_theme_hue_spread) ) );\n\n} }\n\n:where( :root, [mol_theme=\"$mol_theme_dark\"] ) [mol_theme=\"$mol_theme_base\"] {\n\t--mol_theme_back: oklch( 25% .05 var(--mol_theme_hue) );\n\t--mol_theme_card: oklch( 35% .1 var(--mol_theme_hue) / .25 );\n}\n:where( [mol_theme=\"$mol_theme_light\"] ) [mol_theme=\"$mol_theme_base\"] {\n\t--mol_theme_back: oklch( 85% .05 var(--mol_theme_hue) );\n\t--mol_theme_card: oklch( 98% .03 var(--mol_theme_hue) / .25 );\n}\n\n:where( :root, [mol_theme=\"$mol_theme_dark\"] ) [mol_theme=\"$mol_theme_current\"] {\n\t--mol_theme_back: oklch( 25% .05 calc( var(--mol_theme_hue) - var(--mol_theme_hue_spread) ) );\n\t--mol_theme_card: oklch( 35% .1 calc( var(--mol_theme_hue) - var(--mol_theme_hue_spread) ) / .25 );\n}\n:where( [mol_theme=\"$mol_theme_light\"] ) [mol_theme=\"$mol_theme_current\"] {\n\t--mol_theme_back: oklch( 85% .05 calc( var(--mol_theme_hue) - var(--mol_theme_hue_spread) ) );\n\t--mol_theme_card: oklch( 98% .03 calc( var(--mol_theme_hue) - var(--mol_theme_hue_spread) ) / .25 );\n}\n\n:where( :root, [mol_theme=\"$mol_theme_dark\"] ) [mol_theme=\"$mol_theme_special\"] {\n\t--mol_theme_back: oklch( 25% .05 calc( var(--mol_theme_hue) + var(--mol_theme_hue_spread) ) );\n\t--mol_theme_card: oklch( 35% .1 calc( var(--mol_theme_hue) + var(--mol_theme_hue_spread) ) / .25 );\n}\n:where( [mol_theme=\"$mol_theme_light\"] ) [mol_theme=\"$mol_theme_special\"] {\n\t--mol_theme_back: oklch( 85% .05 calc( var(--mol_theme_hue) + var(--mol_theme_hue_spread) ) );\n\t--mol_theme_card: oklch( 98% .03 calc( var(--mol_theme_hue) + var(--mol_theme_hue_spread) ) / .25 );\n}\n\n:where( :root, [mol_theme=\"$mol_theme_dark\"] ) [mol_theme=\"$mol_theme_accent\"] {\n\t--mol_theme_back: oklch( 35% .1 calc( var(--mol_theme_hue) + 180deg ) );\n\t--mol_theme_card: oklch( 45% .15 calc( var(--mol_theme_hue) + 180deg ) / .25 );\n}\n:where( [mol_theme=\"$mol_theme_light\"] ) [mol_theme=\"$mol_theme_accent\"] {\n\t--mol_theme_back: oklch( 83% .1 calc( var(--mol_theme_hue) + 180deg ) );\n\t--mol_theme_card: oklch( 98% .03 calc( var(--mol_theme_hue) + 180deg ) / .25 );\n}\n\n");
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_gap = $mol_style_prop('mol_gap', [
        'block',
        'text',
        'round',
        'space',
        'blur',
    ]);
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/gap/gap.css", ":root {\n\t--mol_gap_block: .75rem;\n\t--mol_gap_text: .5rem .75rem;\n\t--mol_gap_round: .25rem;\n\t--mol_gap_space: .25rem;\n\t--mol_gap_blur: .5rem;\n}\n");
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_view_visible_width() {
        return $mol_window.size().width;
    }
    $.$mol_view_visible_width = $mol_view_visible_width;
    function $mol_view_visible_height() {
        return $mol_window.size().height;
    }
    $.$mol_view_visible_height = $mol_view_visible_height;
    function $mol_view_state_key(suffix) {
        return suffix;
    }
    $.$mol_view_state_key = $mol_view_state_key;
    class $mol_view extends $mol_object {
        static Root(id) {
            return new this;
        }
        autorun() {
            try {
                this.dom_tree();
                document.title = this.title();
            }
            catch (error) {
                $mol_fail_log(error);
            }
        }
        static autobind() {
            const nodes = $mol_dom_context.document.querySelectorAll('[mol_view_root]:not([mol_view_root=""])');
            for (let i = nodes.length - 1; i >= 0; --i) {
                const name = nodes.item(i).getAttribute('mol_view_root');
                const View = $[name];
                if (!View) {
                    console.error(`Can not attach view. Class not found: ${name}`);
                    continue;
                }
                const view = View.Root(i);
                view.dom_node(nodes.item(i));
                view.autorun();
            }
        }
        title() {
            return this.toString().match(/.*\.(\w+)/)?.[1] ?? this.toString();
        }
        focused(next) {
            let node = this.dom_node();
            const value = $mol_view_selection.focused(next === undefined ? undefined : (next ? [node] : []));
            return value.indexOf(node) !== -1;
        }
        state_key(suffix = '') {
            return this.$.$mol_view_state_key(suffix);
        }
        dom_name() {
            return $mol_dom_qname(this.constructor.toString()) || 'div';
        }
        dom_name_space() { return 'http://www.w3.org/1999/xhtml'; }
        sub() {
            return [];
        }
        sub_visible() {
            return this.sub();
        }
        minimal_width() {
            let min = 0;
            try {
                const sub = this.sub();
                if (!sub)
                    return 0;
                sub.forEach(view => {
                    if (view instanceof $mol_view) {
                        min = Math.max(min, view.minimal_width());
                    }
                });
            }
            catch (error) {
                $mol_fail_log(error);
                return 24;
            }
            return min;
        }
        maximal_width() {
            return this.minimal_width();
        }
        minimal_height() {
            let min = 0;
            try {
                for (const view of this.sub() ?? []) {
                    if (view instanceof $mol_view) {
                        min = Math.max(min, view.minimal_height());
                    }
                }
            }
            catch (error) {
                $mol_fail_log(error);
                return 24;
            }
            return min;
        }
        static watchers = new Set();
        view_rect() {
            if ($mol_wire_probe(() => this.view_rect()) === undefined) {
                $mol_wire_watch();
                return null;
            }
            else {
                const { width, height, left, right, top, bottom } = this.dom_node().getBoundingClientRect();
                return { width, height, left, right, top, bottom };
            }
        }
        dom_id() {
            return this.toString().replace(/</g, '(').replace(/>/g, ')').replaceAll(/"/g, "'");
        }
        dom_node_external(next) {
            const node = next ?? $mol_dom_context.document.createElementNS(this.dom_name_space(), this.dom_name());
            const id = this.dom_id();
            node.setAttribute('id', id);
            node.toString = $mol_const('<#' + id + '>');
            return node;
        }
        dom_node(next) {
            $mol_wire_solid();
            const node = this.dom_node_external(next);
            $mol_dom_render_attributes(node, this.attr_static());
            const events = this.event_async();
            $mol_dom_render_events(node, events);
            return node;
        }
        dom_final() {
            this.render();
            const sub = this.sub_visible();
            if (!sub)
                return;
            for (const el of sub) {
                if (el && typeof el === 'object' && 'dom_final' in el) {
                    el['dom_final']();
                }
            }
            return this.dom_node();
        }
        dom_tree(next) {
            const node = this.dom_node(next);
            render: try {
                $mol_dom_render_attributes(node, { mol_view_error: null });
                try {
                    this.render();
                }
                finally {
                    for (let plugin of this.plugins()) {
                        if (plugin instanceof $mol_plugin) {
                            plugin.dom_tree();
                        }
                    }
                }
            }
            catch (error) {
                $mol_fail_log(error);
                const mol_view_error = $mol_promise_like(error) ? 'Promise' : error.name || error.constructor.name;
                $mol_dom_render_attributes(node, { mol_view_error });
                if ($mol_promise_like(error))
                    break render;
                try {
                    const message = error.message || error;
                    node.innerText = message.replace(/^|$/mg, '\xA0\xA0');
                }
                catch { }
            }
            try {
                this.auto();
            }
            catch (error) {
                $mol_fail_log(error);
            }
            return node;
        }
        dom_node_actual() {
            const node = this.dom_node();
            $mol_dom_render_styles(node, this.style_size());
            const attr = this.attr();
            const style = this.style();
            $mol_dom_render_attributes(node, attr);
            $mol_dom_render_styles(node, style);
            return node;
        }
        auto() {
            return null;
        }
        render() {
            const node = this.dom_node_actual();
            const sub = this.sub_visible();
            if (!sub)
                return;
            const nodes = sub.map(child => {
                if (child == null)
                    return null;
                return (child instanceof $mol_view)
                    ? child.dom_node()
                    : child instanceof $mol_dom_context.Node
                        ? child
                        : String(child);
            });
            $mol_dom_render_children(node, nodes);
            for (const el of sub)
                if (el && typeof el === 'object' && 'dom_tree' in el)
                    el['dom_tree']();
            $mol_dom_render_fields(node, this.field());
        }
        static view_classes() {
            const proto = this.prototype;
            let current = proto;
            const classes = [];
            while (current) {
                if (current.constructor.name !== classes.at(-1)?.name) {
                    classes.push(current.constructor);
                }
                if (!(current instanceof $mol_view))
                    break;
                current = Object.getPrototypeOf(current);
            }
            return classes;
        }
        static _view_names;
        static view_names(suffix) {
            let cache = Reflect.getOwnPropertyDescriptor(this, '_view_names')?.value;
            if (!cache)
                cache = this._view_names = new Map;
            const cached = cache.get(suffix);
            if (cached)
                return cached;
            const names = [];
            const suffix2 = '_' + suffix[0].toLowerCase() + suffix.substring(1);
            for (const Class of this.view_classes()) {
                if (suffix in Class.prototype)
                    names.push(this.$.$mol_func_name(Class) + suffix2);
                else
                    break;
            }
            cache.set(suffix, names);
            return names;
        }
        view_names_owned() {
            const names = [];
            let owner = $mol_owning_get(this);
            if (!(owner?.host instanceof $mol_view))
                return names;
            const suffix = owner.task.name.trim();
            const suffix2 = '_' + suffix[0].toLowerCase() + suffix.substring(1);
            names.push(...owner.host.constructor.view_names(suffix));
            for (let prefix of owner.host.view_names_owned()) {
                names.push(prefix + suffix2);
            }
            return names;
        }
        view_names() {
            const names = new Set();
            for (let name of this.view_names_owned())
                names.add(name);
            for (let Class of this.constructor.view_classes()) {
                const name = this.$.$mol_func_name(Class);
                if (name)
                    names.add(name);
            }
            return names;
        }
        theme(next = null) {
            return next;
        }
        attr_static() {
            let attrs = {};
            for (let name of this.view_names())
                attrs[name.replace(/\$/g, '').replace(/^(?=\d)/, '_').toLowerCase()] = '';
            return attrs;
        }
        attr() {
            return {
                mol_theme: this.theme() ?? undefined,
            };
        }
        style_size() {
            return {
                minHeight: this.minimal_height(),
                minWidth: this.minimal_width(),
            };
        }
        style() {
            return {};
        }
        field() {
            return {};
        }
        event() {
            return {};
        }
        event_async() {
            return { ...$mol_wire_async(this.event()) };
        }
        plugins() {
            return [];
        }
        [$mol_dev_format_head]() {
            return $mol_dev_format_span({}, $mol_dev_format_native(this));
        }
        *view_find(check, path = []) {
            if (check(this))
                return yield [...path, this];
            try {
                for (const item of this.sub()) {
                    if (item instanceof $mol_view) {
                        yield* item.view_find(check, [...path, this]);
                    }
                }
            }
            catch (error) {
                if ($mol_promise_like(error))
                    $mol_fail_hidden(error);
                $mol_fail_log(error);
            }
        }
        force_render(path) {
            const kids = this.sub();
            const index = kids.findIndex(item => {
                if (item instanceof $mol_view) {
                    return path.has(item);
                }
                else {
                    return false;
                }
            });
            if (index >= 0) {
                kids[index].force_render(path);
            }
        }
        ensure_visible(view, align = "start") {
            const path = this.view_find(v => v === view).next().value;
            this.force_render(new Set(path));
            try {
                this.dom_final();
            }
            catch (err) {
                $mol_fail_log(err);
            }
            view.dom_node().scrollIntoView({ block: align });
        }
        bring() {
            const win = this.$.$mol_dom_context;
            if (win.parent !== win.self && !win.document.hasFocus())
                return;
            new this.$.$mol_after_timeout(0, () => {
                this.focused(true);
            });
        }
        destructor() {
            const node = $mol_wire_probe(() => this.dom_node());
            if (!node)
                return;
            const events = $mol_wire_probe(() => this.event_async());
            if (!events)
                return;
            for (let event_name in events) {
                node.removeEventListener(event_name, events[event_name]);
            }
        }
    }
    __decorate([
        $mol_mem
    ], $mol_view.prototype, "autorun", null);
    __decorate([
        $mol_mem
    ], $mol_view.prototype, "title", null);
    __decorate([
        $mol_mem
    ], $mol_view.prototype, "focused", null);
    __decorate([
        $mol_memo.method
    ], $mol_view.prototype, "dom_name", null);
    __decorate([
        $mol_mem
    ], $mol_view.prototype, "minimal_width", null);
    __decorate([
        $mol_mem
    ], $mol_view.prototype, "minimal_height", null);
    __decorate([
        $mol_mem
    ], $mol_view.prototype, "view_rect", null);
    __decorate([
        $mol_memo.method
    ], $mol_view.prototype, "dom_id", null);
    __decorate([
        $mol_mem
    ], $mol_view.prototype, "dom_node", null);
    __decorate([
        $mol_mem
    ], $mol_view.prototype, "dom_final", null);
    __decorate([
        $mol_mem
    ], $mol_view.prototype, "dom_tree", null);
    __decorate([
        $mol_mem
    ], $mol_view.prototype, "dom_node_actual", null);
    __decorate([
        $mol_mem
    ], $mol_view.prototype, "render", null);
    __decorate([
        $mol_memo.method
    ], $mol_view.prototype, "view_names_owned", null);
    __decorate([
        $mol_memo.method
    ], $mol_view.prototype, "view_names", null);
    __decorate([
        $mol_mem
    ], $mol_view.prototype, "theme", null);
    __decorate([
        $mol_mem
    ], $mol_view.prototype, "event_async", null);
    __decorate([
        $mol_mem_key
    ], $mol_view, "Root", null);
    __decorate([
        $mol_mem
    ], $mol_view, "autobind", null);
    __decorate([
        $mol_memo.method
    ], $mol_view, "view_classes", null);
    $.$mol_view = $mol_view;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/view/view/view.css", "[mol_view] {\n\ttransition-property: height, width, min-height, min-width, max-width, max-height, transform;\n\ttransition-duration: .2s;\n\ttransition-timing-function: ease-out;\n\t-webkit-appearance: none;\n\tbox-sizing: border-box;\n\tdisplay: flex;\n\tflex-shrink: 0;\n\tcontain: style;\n\tscrollbar-color: var(--mol_theme_line) transparent;\n\tscrollbar-width: thin;\n}\t\n\n[mol_view]::selection {\n\tbackground: var(--mol_theme_line);\n}\t\n\n[mol_view]::-webkit-scrollbar {\n\twidth: .25rem;\n\theight: .25rem;\n}\n\n[mol_view]::-webkit-scrollbar-corner {\n\tbackground-color: var(--mol_theme_line);\n}\n\n[mol_view]::-webkit-scrollbar-track {\n\tbackground-color: transparent;\n}\n\n[mol_view]::-webkit-scrollbar-thumb {\n\tbackground-color: var(--mol_theme_line);\n\tborder-radius: var(--mol_gap_round);\n}\n\n[mol_view] > * {\n\tword-break: inherit;\n}\n\n[mol_view_root] {\n\tmargin: 0;\n\tpadding: 0;\n\twidth: 100%;\n\theight: 100%;\n\tbox-sizing: border-box;\n\tfont-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n\tfont-size: 1rem;\n\tline-height: 1.5rem;\n\tbackground: var(--mol_theme_back);\n\tcolor: var(--mol_theme_text);\n\tcontain: unset; /** Fixes bg ignoring when applied to body on Chrome */\n\ttab-size: 4;\n\toverscroll-behavior: contain; /** Disable navigation gestures **/\n}\n\n@media print {\n\t[mol_view_root] {\n\t\theight: auto;\n\t}\n}\n\n[mol_view][mol_view_error]:not([mol_view_error=\"Promise\"]) {\n\tbackground-image: repeating-linear-gradient(\n\t\t-45deg,\n\t\t#f92323,\n\t\t#f92323 .5rem,\n\t\t#ff3d3d .5rem,\n\t\t#ff3d3d 1.5rem\n\t);\n\tcolor: black;\n\talign-items: center;\n\tjustify-content: center;\n}\n\n@keyframes mol_view_wait {\n\tfrom {\n\t\topacity: .25;\n\t}\n\t20% {\n\t\topacity: .75;\n\t}\n\tto {\n\t\topacity: .25;\n\t}\n}\n\n:where([mol_view][mol_view_error=\"Promise\"]) {\n\tbackground: var(--mol_theme_hover);\n}\n\n[mol_view][mol_view_error=\"Promise\"] {\n\tanimation: mol_view_wait 1s steps(20,end) infinite;\n}\n");
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_plugin extends $mol_view {
        dom_node_external(next) {
            return next ?? $mol_owning_get(this).host.dom_node();
        }
        render() {
            this.dom_node_actual();
        }
    }
    $.$mol_plugin = $mol_plugin;
})($ || ($ = {}));

;
	($.$mol_scroll) = class $mol_scroll extends ($.$mol_view) {
		tabindex(){
			return -1;
		}
		event_scroll(next){
			if(next !== undefined) return next;
			return null;
		}
		scroll_top(next){
			if(next !== undefined) return next;
			return 0;
		}
		scroll_left(next){
			if(next !== undefined) return next;
			return 0;
		}
		field(){
			return {...(super.field()), "tabIndex": (this.tabindex())};
		}
		event(){
			return {...(super.event()), "scroll": (next) => (this.event_scroll(next))};
		}
	};
	($mol_mem(($.$mol_scroll.prototype), "event_scroll"));
	($mol_mem(($.$mol_scroll.prototype), "scroll_top"));
	($mol_mem(($.$mol_scroll.prototype), "scroll_left"));


;
"use strict";
var $;
(function ($) {
    class $mol_dom_listener extends $mol_object {
        _node;
        _event;
        _handler;
        _config;
        constructor(_node, _event, _handler, _config = { passive: true }) {
            super();
            this._node = _node;
            this._event = _event;
            this._handler = _handler;
            this._config = _config;
            this._node.addEventListener(this._event, this._handler, this._config);
        }
        destructor() {
            this._node.removeEventListener(this._event, this._handler, this._config);
            super.destructor();
        }
    }
    $.$mol_dom_listener = $mol_dom_listener;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_print extends $mol_object {
        static before() {
            return new $mol_dom_listener(this.$.$mol_dom_context, 'beforeprint', () => {
                this.active(true);
            });
        }
        static after() {
            return new $mol_dom_listener(this.$.$mol_dom_context, 'afterprint', () => {
                this.active(false);
            });
        }
        static active(next) {
            this.before();
            this.after();
            return next || false;
        }
    }
    __decorate([
        $mol_mem
    ], $mol_print, "before", null);
    __decorate([
        $mol_mem
    ], $mol_print, "after", null);
    __decorate([
        $mol_mem
    ], $mol_print, "active", null);
    $.$mol_print = $mol_print;
})($ || ($ = {}));

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";
var $;
(function ($) {
    function $mol_style_sheet(Component, config0) {
        let rules = [];
        const block = $mol_dom_qname($mol_ambient({}).$mol_func_name(Component));
        const kebab = (name) => name.replace(/[A-Z]/g, letter => '-' + letter.toLowerCase());
        const make_class = (prefix, path, config) => {
            const props = [];
            const selector = (prefix, path) => {
                if (path.length === 0)
                    return prefix || `[${block}]`;
                let res = `[${block}_${path.join('_')}]`;
                if (prefix)
                    res = prefix + ' :where(' + res + ')';
                return res;
            };
            for (const key of Object.keys(config).reverse()) {
                if (/^(--)?[a-z]/.test(key)) {
                    const addProp = (keys, val) => {
                        if (Array.isArray(val)) {
                            if (val[0] && [Array, Object].includes(val[0].constructor)) {
                                val = val.map(v => {
                                    return Object.entries(v).map(([n, a]) => {
                                        if (a === true)
                                            return kebab(n);
                                        if (a === false)
                                            return null;
                                        return String(a);
                                    }).filter(Boolean).join(' ');
                                }).join(',');
                            }
                            else {
                                val = val.join(' ');
                            }
                            props.push(`\t${keys.join('-')}: ${val};\n`);
                        }
                        else if (val.constructor === Object) {
                            for (let suffix in val) {
                                addProp([...keys, kebab(suffix)], val[suffix]);
                            }
                        }
                        else {
                            props.push(`\t${keys.join('-')}: ${val};\n`);
                        }
                    };
                    addProp([kebab(key)], config[key]);
                }
                else if (/^[A-Z]/.test(key)) {
                    make_class(prefix, [...path, key.toLowerCase()], config[key]);
                }
                else if (key[0] === '$') {
                    make_class(selector(prefix, path) + ' :where([' + $mol_dom_qname(key) + '])', [], config[key]);
                }
                else if (key === '>') {
                    const types = config[key];
                    for (let type in types) {
                        make_class(selector(prefix, path) + ' > :where([' + $mol_dom_qname(type) + '])', [], types[type]);
                    }
                }
                else if (key === '@') {
                    const attrs = config[key];
                    for (let name in attrs) {
                        for (let val in attrs[name]) {
                            make_class(selector(prefix, path) + ':where([' + name + '=' + JSON.stringify(val) + '])', [], attrs[name][val]);
                        }
                    }
                }
                else if (key === '@media') {
                    const media = config[key];
                    for (let query in media) {
                        rules.push('}\n');
                        make_class(prefix, path, media[query]);
                        rules.push(`${key} ${query} {\n`);
                    }
                }
                else if (key[0] === '[' && key[key.length - 1] === ']') {
                    const attr = key.slice(1, -1);
                    const vals = config[key];
                    for (let val in vals) {
                        make_class(selector(prefix, path) + ':where([' + attr + '=' + JSON.stringify(val) + '])', [], vals[val]);
                    }
                }
                else {
                    make_class(selector(prefix, path) + key, [], config[key]);
                }
            }
            if (props.length) {
                rules.push(`${selector(prefix, path)} {\n${props.reverse().join('')}}\n`);
            }
        };
        make_class('', [], config0);
        return rules.reverse().join('');
    }
    $.$mol_style_sheet = $mol_style_sheet;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_style_define(Component, config) {
        return $mol_style_attach(Component.name, $mol_style_sheet(Component, config));
    }
    $.$mol_style_define = $mol_style_define;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_scroll extends $.$mol_scroll {
            scroll_top(next, cache) {
                const el = this.dom_node();
                if (next !== undefined && !cache)
                    el.scrollTop = next;
                return el.scrollTop;
            }
            scroll_left(next, cache) {
                const el = this.dom_node();
                if (next !== undefined && !cache)
                    el.scrollLeft = next;
                return el.scrollLeft;
            }
            event_scroll(next) {
                const el = this.dom_node();
                this.scroll_left(el.scrollLeft, 'cache');
                this.scroll_top(el.scrollTop, 'cache');
            }
            minimal_height() {
                return this.$.$mol_print.active() ? null : 0;
            }
            minimal_width() {
                return this.$.$mol_print.active() ? null : 0;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_scroll.prototype, "scroll_top", null);
        __decorate([
            $mol_mem
        ], $mol_scroll.prototype, "scroll_left", null);
        $$.$mol_scroll = $mol_scroll;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        const { per, rem, px } = $mol_style_unit;
        $mol_style_define($mol_scroll, {
            display: 'grid',
            overflow: 'auto',
            flex: {
                direction: 'column',
                grow: 1,
                shrink: 1,
            },
            outline: 'none',
            align: {
                self: 'stretch',
                items: 'flex-start',
            },
            boxSizing: 'border-box',
            willChange: 'scroll-position',
            scroll: {
                padding: [rem(.75), 0],
            },
            maxHeight: per(100),
            maxWidth: per(100),
            webkitOverflowScrolling: 'touch',
            contain: 'content',
            '>': {
                $mol_view: {
                    gridArea: '1/1',
                },
            },
            '::before': {
                display: 'none',
            },
            '::after': {
                display: 'none',
            },
            '::-webkit-scrollbar': {
                width: rem(.25),
                height: rem(.25),
            },
            '@media': {
                'print': {
                    overflow: 'hidden',
                    contain: 'none',
                    maxHeight: 'unset',
                },
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_book2) = class $mol_book2 extends ($.$mol_scroll) {
		pages(){
			return [];
		}
		menu_title(){
			return "";
		}
		sub(){
			return (this.pages());
		}
		minimal_width(){
			return 0;
		}
		Placeholder(){
			const obj = new this.$.$mol_view();
			return obj;
		}
		Gap(id){
			const obj = new this.$.$mol_view();
			(obj.title) = () => ("");
			return obj;
		}
	};
	($mol_mem(($.$mol_book2.prototype), "Placeholder"));
	($mol_mem_key(($.$mol_book2.prototype), "Gap"));


;
"use strict";
var $;
(function ($) {
    $.$mol_mem_cached = $mol_wire_probe;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_layer = $mol_style_prop('mol_layer', [
        'hover',
        'focus',
        'speck',
        'float',
        'popup',
    ]);
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/layer/layer.css", ":root {\n\t--mol_layer_hover: 1;\n\t--mol_layer_focus: 2;\n\t--mol_layer_speck: 3;\n\t--mol_layer_float: 4;\n\t--mol_layer_popup: 5;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_book2 extends $.$mol_book2 {
            title() {
                return this.pages().map(page => {
                    try {
                        return page?.title();
                    }
                    catch (error) {
                        $mol_fail_log(error);
                    }
                }).reverse().filter(Boolean).join(' | ');
            }
            menu_title() {
                return this.pages()[0]?.title() || this.title();
            }
            sub() {
                const placeholder = this.Placeholder();
                const next = [...this.pages(), placeholder];
                const prev = $mol_mem_cached(() => this.sub()) ?? [];
                for (let i = 1; i++;) {
                    const p = prev[prev.length - i];
                    const n = next[next.length - i];
                    if (!n)
                        break;
                    if (p === n)
                        continue;
                    if (n === placeholder)
                        continue;
                    new this.$.$mol_after_tick(() => {
                        const b = this.dom_node();
                        const p = n.dom_node();
                        b.scroll({
                            left: p.offsetLeft + p.offsetWidth - b.offsetWidth,
                            behavior: 'smooth',
                        });
                    });
                    break;
                }
                return next;
            }
            bring() {
                const pages = this.pages();
                if (pages.length)
                    pages[pages.length - 1].bring();
                else
                    super.bring();
            }
        }
        __decorate([
            $mol_mem
        ], $mol_book2.prototype, "sub", null);
        $$.$mol_book2 = $mol_book2;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/book2/book2.view.css", "[mol_book2] {\n\tdisplay: flex;\n\tflex-flow: row nowrap;\n\talign-items: stretch;\n\tflex: 1 1 auto;\n\talign-self: stretch;\n\tmargin: 0;\n\t/* box-shadow: 0 0 0 1px var(--mol_theme_line); */\n\t/* transform: translateZ(0); */\n\ttransition: none;\n\tscroll-snap-type: x mandatory;\n\t/* padding: 0 1px;\n\tscroll-padding: 0 1px;\n\tgap: 1px; */\n}\n\n[mol_book2] > * {\n/* \tflex: none; */\n\tscroll-snap-stop: always;\n\tscroll-snap-align: end;\n\tposition: relative;\n\tmin-height: 100%;\n\tmax-height: 100%;\n\tmax-width: 100%;\n\tflex-shrink: 0;\n\tbox-shadow: inset 0 0 0 1px var(--mol_theme_field);\n}\n\n[mol_book2] > *:not(:first-of-type):before,\n[mol_book2] > *:not(:last-of-type)::after {\n\tcontent: '';\n\tposition: absolute;\n\ttop: 1.5rem;\n\twidth: 3px;\n\theight: 1rem;\n\tbackground: linear-gradient(\n\t\tto bottom,\n\t\tvar(--mol_theme_focus) 0%,\n\t\tvar(--mol_theme_focus) 14%,\n\t\ttransparent 15%,\n\t\ttransparent 42%,\n\t\tvar(--mol_theme_focus) 43%,\n\t\tvar(--mol_theme_focus) 57%,\n\t\ttransparent 58%,\n\t\ttransparent 85%,\n\t\tvar(--mol_theme_focus) 86%,\n\t\tvar(--mol_theme_focus) 100%\n\t);\n\topacity: .5;\n\tz-index: var(--mol_layer_speck);\n}\n[mol_book2] > *:not(:first-of-type):before {\n\tleft: -1px;\n}\n[mol_book2] > *:not(:last-of-type)::after {\n\tright: -1px;\n}\n\n:where([mol_book2]) > * {\n\tbackground-color: var(--mol_theme_card);\n\t/* box-shadow: 0 0 0 1px var(--mol_theme_back); */\n}\n\n[mol_book2] > [mol_book2] {\n\tdisplay: contents;\n}\n\n[mol_book2] > *:first-child {\n\tscroll-snap-align: start;\n}\n\n[mol_book2] > [mol_view] {\n\ttransform: none; /* prevent content clipping */\n}\n\n[mol_book2_placeholder] {\n\tflex: 1 1 0;\n\tbackground: none;\n}\n\n[mol_book2_gap] {\n\tbackground: none;\n\tflex-grow: 1;\n\tscroll-snap-align: none;\n\tmargin-right: -1px;\n\tbox-shadow: none;\n}\n\n[mol_book2_gap]::before,\n[mol_book2_gap]::after {\n\tdisplay: none;\n}\n");
})($ || ($ = {}));

;
	($.$mol_pop) = class $mol_pop extends ($.$mol_view) {
		Anchor(){
			return null;
		}
		align(){
			return "bottom_center";
		}
		bubble_content(){
			return [];
		}
		height_max(){
			return 9999;
		}
		Bubble(){
			const obj = new this.$.$mol_pop_bubble();
			(obj.align) = () => ((this.align()));
			(obj.content) = () => ((this.bubble_content()));
			(obj.height_max) = () => ((this.height_max()));
			return obj;
		}
		showed(next){
			if(next !== undefined) return next;
			return false;
		}
		align_vert(){
			return "";
		}
		align_hor(){
			return "";
		}
		prefer(){
			return "vert";
		}
		sub(){
			return [(this.Anchor())];
		}
		sub_visible(){
			return [(this.Anchor()), (this.Bubble())];
		}
	};
	($mol_mem(($.$mol_pop.prototype), "Bubble"));
	($mol_mem(($.$mol_pop.prototype), "showed"));
	($.$mol_pop_bubble) = class $mol_pop_bubble extends ($.$mol_view) {
		content(){
			return [];
		}
		height_max(){
			return 9999;
		}
		align(){
			return "";
		}
		sub(){
			return (this.content());
		}
		style(){
			return {...(super.style()), "maxHeight": (this.height_max())};
		}
		attr(){
			return {
				...(super.attr()), 
				"mol_pop_align": (this.align()), 
				"tabindex": 0
			};
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_pop extends $.$mol_pop {
            showed(next = false) {
                this.focused();
                return next;
            }
            sub_visible() {
                return [
                    this.Anchor(),
                    ...this.showed() ? [this.Bubble()] : [],
                ];
            }
            height_max() {
                const viewport = this.$.$mol_window.size();
                const rect_bubble = this.view_rect();
                const align = this.align_vert();
                if (align === 'bottom')
                    return (viewport.height - rect_bubble.bottom) * .66;
                if (align === 'top')
                    return rect_bubble.top * .66;
                return 0;
            }
            align() {
                switch (this.prefer()) {
                    case 'hor': return `${this.align_hor()}_${this.align_vert()}`;
                    case 'vert': return `${this.align_vert()}_${this.align_hor()}`;
                    default: return this.prefer();
                }
            }
            align_vert() {
                const viewport = this.view_port();
                const rect_pop = this.view_rect();
                if (!rect_pop)
                    return 'suspense';
                return rect_pop.top > (viewport.top + viewport.height / 2) ? 'top' : 'bottom';
            }
            align_hor() {
                const viewport = this.view_port();
                const rect_pop = this.view_rect();
                if (!rect_pop)
                    return 'suspense';
                return rect_pop.left > (viewport.left + viewport.width / 2) ? 'left' : 'right';
            }
            View_port() {
                const view = new $mol_view;
                view.dom_node = () => {
                    let node = this.dom_node();
                    while (node = node.offsetParent) {
                        if (this.$.$mol_dom_context.getComputedStyle(node).overflow !== 'visible')
                            return node;
                    }
                    return this.$.$mol_dom_context.document.documentElement;
                };
                return view;
            }
            view_port() {
                return this.View_port().view_rect() ?? { ...this.$.$mol_window.size(), left: 0, top: 0 };
            }
        }
        __decorate([
            $mol_mem
        ], $mol_pop.prototype, "showed", null);
        __decorate([
            $mol_mem
        ], $mol_pop.prototype, "sub_visible", null);
        __decorate([
            $mol_mem
        ], $mol_pop.prototype, "height_max", null);
        __decorate([
            $mol_mem
        ], $mol_pop.prototype, "align", null);
        __decorate([
            $mol_mem
        ], $mol_pop.prototype, "align_vert", null);
        __decorate([
            $mol_mem
        ], $mol_pop.prototype, "align_hor", null);
        __decorate([
            $mol_mem
        ], $mol_pop.prototype, "View_port", null);
        __decorate([
            $mol_mem
        ], $mol_pop.prototype, "view_port", null);
        $$.$mol_pop = $mol_pop;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/pop/pop.view.css", "[mol_pop] {\n\tposition: relative;\n\tdisplay: inline-flex;\n}\n\n[mol_pop_bubble] {\n\tbox-shadow: 0 0 1rem hsla(0,0%,0%,.5);\n\tborder-radius: var(--mol_gap_round);\n\tposition: absolute;\n\tz-index: var(--mol_layer_popup);\n\tbackground: var(--mol_theme_back);\n\tmax-width: none;\n\tmax-height: none;\n\t/* overflow: hidden;\n\toverflow-y: scroll;\n\toverflow-y: overlay; */\n\tword-break: normal;\n\twidth: max-content;\n\t/* height: max-content; */\n\tflex-direction: column;\n\tmax-width: 80vw;\n\tmax-height: 80vw;\n\tcontain: paint;\n\ttransition-property: opacity;\n}\n\n:where( [mol_pop_bubble] > * ) {\n\tbackground: var(--mol_theme_card);\n}\n\n[mol_pop_bubble][mol_scroll] {\n\tbackground: var(--mol_theme_back);\n}\n\n[mol_pop_bubble]:focus {\n\toutline: none;\n}\n\n[mol_pop_align=\"suspense_suspense\"] {\n\topacity: 0;\n}\n\n[mol_pop_align=\"left_top\"] {\n\ttransform: translate(-100%);\n\tleft: 0;\n\tbottom: 0;\n}\n\n[mol_pop_align=\"left_center\"] {\n\ttransform: translate(-100%, -50%);\n\tleft: 0;\n\ttop: 50%;\n}\n\n[mol_pop_align=\"left_bottom\"] {\n\ttransform: translate(-100%);\n\tleft: 0;\n\ttop: 0;\n}\n\n[mol_pop_align=\"right_top\"] {\n\ttransform: translate(100%);\n\tright: 0;\n\tbottom: 0;\n}\n\n[mol_pop_align=\"right_center\"] {\n\ttransform: translate(100%, -50%);\n\tright: 0;\n\ttop: 50%;\n}\n\n[mol_pop_align=\"right_bottom\"] {\n\ttransform: translate(100%);\n\tright: 0;\n\ttop: 0;\n}\n\n[mol_pop_align=\"center\"] {\n\tleft: 50%;\n\ttop: 50%;\n\ttransform: translate(-50%, -50%);\n}\n\n[mol_pop_align=\"top_left\"] {\n\tright: 0;\n\tbottom: 100%;\n}\n\n[mol_pop_align=\"top_center\"] {\n\ttransform: translate(-50%);\n\tleft: 50%;\n\tbottom: 100%;\n}\n\n[mol_pop_align=\"top_right\"] {\n\tleft: 0;\n\tbottom: 100%;\n}\n\n[mol_pop_align=\"bottom_left\"] {\n\tright: 0;\n\ttop: 100%;\n}\n\n[mol_pop_align=\"bottom_center\"] {\n\ttransform: translate(-50%);\n\tleft: 50%;\n\ttop: 100%;\n}\n\n[mol_pop_align=\"bottom_right\"] {\n\tleft: 0;\n\ttop: 100%;\n}\n");
})($ || ($ = {}));

;
	($.$mol_hotkey) = class $mol_hotkey extends ($.$mol_plugin) {
		keydown(next){
			if(next !== undefined) return next;
			return null;
		}
		event(){
			return {...(super.event()), "keydown": (next) => (this.keydown(next))};
		}
		key(){
			return {};
		}
		mod_ctrl(){
			return false;
		}
		mod_alt(){
			return false;
		}
		mod_shift(){
			return false;
		}
	};
	($mol_mem(($.$mol_hotkey.prototype), "keydown"));


;
"use strict";
var $;
(function ($) {
    let $mol_keyboard_code;
    (function ($mol_keyboard_code) {
        $mol_keyboard_code[$mol_keyboard_code["backspace"] = 8] = "backspace";
        $mol_keyboard_code[$mol_keyboard_code["tab"] = 9] = "tab";
        $mol_keyboard_code[$mol_keyboard_code["enter"] = 13] = "enter";
        $mol_keyboard_code[$mol_keyboard_code["shift"] = 16] = "shift";
        $mol_keyboard_code[$mol_keyboard_code["ctrl"] = 17] = "ctrl";
        $mol_keyboard_code[$mol_keyboard_code["alt"] = 18] = "alt";
        $mol_keyboard_code[$mol_keyboard_code["pause"] = 19] = "pause";
        $mol_keyboard_code[$mol_keyboard_code["capsLock"] = 20] = "capsLock";
        $mol_keyboard_code[$mol_keyboard_code["escape"] = 27] = "escape";
        $mol_keyboard_code[$mol_keyboard_code["space"] = 32] = "space";
        $mol_keyboard_code[$mol_keyboard_code["pageUp"] = 33] = "pageUp";
        $mol_keyboard_code[$mol_keyboard_code["pageDown"] = 34] = "pageDown";
        $mol_keyboard_code[$mol_keyboard_code["end"] = 35] = "end";
        $mol_keyboard_code[$mol_keyboard_code["home"] = 36] = "home";
        $mol_keyboard_code[$mol_keyboard_code["left"] = 37] = "left";
        $mol_keyboard_code[$mol_keyboard_code["up"] = 38] = "up";
        $mol_keyboard_code[$mol_keyboard_code["right"] = 39] = "right";
        $mol_keyboard_code[$mol_keyboard_code["down"] = 40] = "down";
        $mol_keyboard_code[$mol_keyboard_code["insert"] = 45] = "insert";
        $mol_keyboard_code[$mol_keyboard_code["delete"] = 46] = "delete";
        $mol_keyboard_code[$mol_keyboard_code["key0"] = 48] = "key0";
        $mol_keyboard_code[$mol_keyboard_code["key1"] = 49] = "key1";
        $mol_keyboard_code[$mol_keyboard_code["key2"] = 50] = "key2";
        $mol_keyboard_code[$mol_keyboard_code["key3"] = 51] = "key3";
        $mol_keyboard_code[$mol_keyboard_code["key4"] = 52] = "key4";
        $mol_keyboard_code[$mol_keyboard_code["key5"] = 53] = "key5";
        $mol_keyboard_code[$mol_keyboard_code["key6"] = 54] = "key6";
        $mol_keyboard_code[$mol_keyboard_code["key7"] = 55] = "key7";
        $mol_keyboard_code[$mol_keyboard_code["key8"] = 56] = "key8";
        $mol_keyboard_code[$mol_keyboard_code["key9"] = 57] = "key9";
        $mol_keyboard_code[$mol_keyboard_code["A"] = 65] = "A";
        $mol_keyboard_code[$mol_keyboard_code["B"] = 66] = "B";
        $mol_keyboard_code[$mol_keyboard_code["C"] = 67] = "C";
        $mol_keyboard_code[$mol_keyboard_code["D"] = 68] = "D";
        $mol_keyboard_code[$mol_keyboard_code["E"] = 69] = "E";
        $mol_keyboard_code[$mol_keyboard_code["F"] = 70] = "F";
        $mol_keyboard_code[$mol_keyboard_code["G"] = 71] = "G";
        $mol_keyboard_code[$mol_keyboard_code["H"] = 72] = "H";
        $mol_keyboard_code[$mol_keyboard_code["I"] = 73] = "I";
        $mol_keyboard_code[$mol_keyboard_code["J"] = 74] = "J";
        $mol_keyboard_code[$mol_keyboard_code["K"] = 75] = "K";
        $mol_keyboard_code[$mol_keyboard_code["L"] = 76] = "L";
        $mol_keyboard_code[$mol_keyboard_code["M"] = 77] = "M";
        $mol_keyboard_code[$mol_keyboard_code["N"] = 78] = "N";
        $mol_keyboard_code[$mol_keyboard_code["O"] = 79] = "O";
        $mol_keyboard_code[$mol_keyboard_code["P"] = 80] = "P";
        $mol_keyboard_code[$mol_keyboard_code["Q"] = 81] = "Q";
        $mol_keyboard_code[$mol_keyboard_code["R"] = 82] = "R";
        $mol_keyboard_code[$mol_keyboard_code["S"] = 83] = "S";
        $mol_keyboard_code[$mol_keyboard_code["T"] = 84] = "T";
        $mol_keyboard_code[$mol_keyboard_code["U"] = 85] = "U";
        $mol_keyboard_code[$mol_keyboard_code["V"] = 86] = "V";
        $mol_keyboard_code[$mol_keyboard_code["W"] = 87] = "W";
        $mol_keyboard_code[$mol_keyboard_code["X"] = 88] = "X";
        $mol_keyboard_code[$mol_keyboard_code["Y"] = 89] = "Y";
        $mol_keyboard_code[$mol_keyboard_code["Z"] = 90] = "Z";
        $mol_keyboard_code[$mol_keyboard_code["metaLeft"] = 91] = "metaLeft";
        $mol_keyboard_code[$mol_keyboard_code["metaRight"] = 92] = "metaRight";
        $mol_keyboard_code[$mol_keyboard_code["select"] = 93] = "select";
        $mol_keyboard_code[$mol_keyboard_code["numpad0"] = 96] = "numpad0";
        $mol_keyboard_code[$mol_keyboard_code["numpad1"] = 97] = "numpad1";
        $mol_keyboard_code[$mol_keyboard_code["numpad2"] = 98] = "numpad2";
        $mol_keyboard_code[$mol_keyboard_code["numpad3"] = 99] = "numpad3";
        $mol_keyboard_code[$mol_keyboard_code["numpad4"] = 100] = "numpad4";
        $mol_keyboard_code[$mol_keyboard_code["numpad5"] = 101] = "numpad5";
        $mol_keyboard_code[$mol_keyboard_code["numpad6"] = 102] = "numpad6";
        $mol_keyboard_code[$mol_keyboard_code["numpad7"] = 103] = "numpad7";
        $mol_keyboard_code[$mol_keyboard_code["numpad8"] = 104] = "numpad8";
        $mol_keyboard_code[$mol_keyboard_code["numpad9"] = 105] = "numpad9";
        $mol_keyboard_code[$mol_keyboard_code["multiply"] = 106] = "multiply";
        $mol_keyboard_code[$mol_keyboard_code["add"] = 107] = "add";
        $mol_keyboard_code[$mol_keyboard_code["subtract"] = 109] = "subtract";
        $mol_keyboard_code[$mol_keyboard_code["decimal"] = 110] = "decimal";
        $mol_keyboard_code[$mol_keyboard_code["divide"] = 111] = "divide";
        $mol_keyboard_code[$mol_keyboard_code["F1"] = 112] = "F1";
        $mol_keyboard_code[$mol_keyboard_code["F2"] = 113] = "F2";
        $mol_keyboard_code[$mol_keyboard_code["F3"] = 114] = "F3";
        $mol_keyboard_code[$mol_keyboard_code["F4"] = 115] = "F4";
        $mol_keyboard_code[$mol_keyboard_code["F5"] = 116] = "F5";
        $mol_keyboard_code[$mol_keyboard_code["F6"] = 117] = "F6";
        $mol_keyboard_code[$mol_keyboard_code["F7"] = 118] = "F7";
        $mol_keyboard_code[$mol_keyboard_code["F8"] = 119] = "F8";
        $mol_keyboard_code[$mol_keyboard_code["F9"] = 120] = "F9";
        $mol_keyboard_code[$mol_keyboard_code["F10"] = 121] = "F10";
        $mol_keyboard_code[$mol_keyboard_code["F11"] = 122] = "F11";
        $mol_keyboard_code[$mol_keyboard_code["F12"] = 123] = "F12";
        $mol_keyboard_code[$mol_keyboard_code["numLock"] = 144] = "numLock";
        $mol_keyboard_code[$mol_keyboard_code["scrollLock"] = 145] = "scrollLock";
        $mol_keyboard_code[$mol_keyboard_code["semicolon"] = 186] = "semicolon";
        $mol_keyboard_code[$mol_keyboard_code["equals"] = 187] = "equals";
        $mol_keyboard_code[$mol_keyboard_code["comma"] = 188] = "comma";
        $mol_keyboard_code[$mol_keyboard_code["dash"] = 189] = "dash";
        $mol_keyboard_code[$mol_keyboard_code["period"] = 190] = "period";
        $mol_keyboard_code[$mol_keyboard_code["forwardSlash"] = 191] = "forwardSlash";
        $mol_keyboard_code[$mol_keyboard_code["graveAccent"] = 192] = "graveAccent";
        $mol_keyboard_code[$mol_keyboard_code["bracketOpen"] = 219] = "bracketOpen";
        $mol_keyboard_code[$mol_keyboard_code["slashBack"] = 220] = "slashBack";
        $mol_keyboard_code[$mol_keyboard_code["slashBackLeft"] = 226] = "slashBackLeft";
        $mol_keyboard_code[$mol_keyboard_code["bracketClose"] = 221] = "bracketClose";
        $mol_keyboard_code[$mol_keyboard_code["quoteSingle"] = 222] = "quoteSingle";
    })($mol_keyboard_code = $.$mol_keyboard_code || ($.$mol_keyboard_code = {}));
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_hotkey extends $.$mol_hotkey {
            key() {
                return super.key();
            }
            keydown(event) {
                if (!event)
                    return;
                if (event.defaultPrevented)
                    return;
                let name = $mol_keyboard_code[event.keyCode];
                if (this.mod_ctrl() !== (event.ctrlKey || event.metaKey))
                    return;
                if (this.mod_alt() !== event.altKey)
                    return;
                if (this.mod_shift() !== event.shiftKey)
                    return;
                const handle = this.key()[name];
                if (handle)
                    handle(event);
            }
        }
        $$.$mol_hotkey = $mol_hotkey;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_nav) = class $mol_nav extends ($.$mol_plugin) {
		event_key(next){
			if(next !== undefined) return next;
			return null;
		}
		cycle(next){
			if(next !== undefined) return next;
			return false;
		}
		mod_ctrl(){
			return false;
		}
		mod_shift(){
			return false;
		}
		mod_alt(){
			return false;
		}
		keys_x(next){
			if(next !== undefined) return next;
			return [];
		}
		keys_y(next){
			if(next !== undefined) return next;
			return [];
		}
		current_x(next){
			if(next !== undefined) return next;
			return null;
		}
		current_y(next){
			if(next !== undefined) return next;
			return null;
		}
		event_up(next){
			if(next !== undefined) return next;
			return null;
		}
		event_down(next){
			if(next !== undefined) return next;
			return null;
		}
		event_left(next){
			if(next !== undefined) return next;
			return null;
		}
		event_right(next){
			if(next !== undefined) return next;
			return null;
		}
		event(){
			return {...(super.event()), "keydown": (next) => (this.event_key(next))};
		}
	};
	($mol_mem(($.$mol_nav.prototype), "event_key"));
	($mol_mem(($.$mol_nav.prototype), "cycle"));
	($mol_mem(($.$mol_nav.prototype), "keys_x"));
	($mol_mem(($.$mol_nav.prototype), "keys_y"));
	($mol_mem(($.$mol_nav.prototype), "current_x"));
	($mol_mem(($.$mol_nav.prototype), "current_y"));
	($mol_mem(($.$mol_nav.prototype), "event_up"));
	($mol_mem(($.$mol_nav.prototype), "event_down"));
	($mol_mem(($.$mol_nav.prototype), "event_left"));
	($mol_mem(($.$mol_nav.prototype), "event_right"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_nav extends $.$mol_nav {
            event_key(event) {
                if (!event)
                    return event;
                if (event.defaultPrevented)
                    return;
                if (this.mod_ctrl() && !event.ctrlKey)
                    return;
                if (this.mod_shift() && !event.shiftKey)
                    return;
                if (this.mod_alt() && !event.altKey)
                    return;
                switch (event.keyCode) {
                    case $mol_keyboard_code.up: return this.event_up(event);
                    case $mol_keyboard_code.down: return this.event_down(event);
                    case $mol_keyboard_code.left: return this.event_left(event);
                    case $mol_keyboard_code.right: return this.event_right(event);
                    case $mol_keyboard_code.pageUp: return this.event_up(event);
                    case $mol_keyboard_code.pageDown: return this.event_down(event);
                }
            }
            event_up(event) {
                if (!event)
                    return event;
                const keys = this.keys_y();
                if (keys.length < 1)
                    return;
                const index_y = this.index_y();
                const index_old = index_y === null ? 0 : index_y;
                const index_new = (index_old + keys.length - 1) % keys.length;
                event.preventDefault();
                if (index_old === 0 && !this.cycle())
                    return;
                this.current_y(this.keys_y()[index_new]);
            }
            event_down(event) {
                if (!event)
                    return event;
                const keys = this.keys_y();
                if (keys.length < 1)
                    return;
                const index_y = this.index_y();
                const index_old = index_y === null ? keys.length - 1 : index_y;
                const index_new = (index_old + 1) % keys.length;
                event.preventDefault();
                if (index_new === 0 && !this.cycle())
                    return;
                this.current_y(this.keys_y()[index_new]);
            }
            event_left(event) {
                if (!event)
                    return event;
                const keys = this.keys_x();
                if (keys.length < 1)
                    return;
                const index_x = this.index_x();
                const index_old = index_x === null ? 0 : index_x;
                const index_new = (index_old + keys.length - 1) % keys.length;
                event.preventDefault();
                if (index_old === 0 && !this.cycle())
                    return;
                this.current_x(this.keys_x()[index_new]);
            }
            event_right(event) {
                if (!event)
                    return event;
                const keys = this.keys_x();
                if (keys.length < 1)
                    return;
                const index_x = this.index_x();
                const index_old = index_x === null ? keys.length - 1 : index_x;
                const index_new = (index_old + 1) % keys.length;
                event.preventDefault();
                if (index_new === 0 && !this.cycle())
                    return;
                this.current_x(this.keys_x()[index_new]);
            }
            index_y() {
                let index = this.keys_y().indexOf(this.current_y());
                if (index < 0)
                    return null;
                return index;
            }
            index_x() {
                let index = this.keys_x().indexOf(this.current_x());
                if (index < 0)
                    return null;
                return index;
            }
        }
        $$.$mol_nav = $mol_nav;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_mem_persist = $mol_wire_solid;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_storage extends $mol_object2 {
        static native() {
            return this.$.$mol_dom_context.navigator.storage ?? {
                persisted: async () => false,
                persist: async () => false,
                estimate: async () => ({}),
                getDirectory: async () => null,
            };
        }
        static persisted(next, cache) {
            $mol_mem_persist();
            if (cache)
                return Boolean(next);
            const native = this.native();
            if (next && !$mol_mem_cached(() => this.persisted())) {
                native.persist().then(actual => {
                    setTimeout(() => this.persisted(actual, 'cache'), 5000);
                    if (actual)
                        this.$.$mol_log3_done({ place: `$mol_storage`, message: `Persist: Yes` });
                    else
                        this.$.$mol_log3_fail({ place: `$mol_storage`, message: `Persist: No` });
                });
            }
            return next ?? $mol_wire_sync(native).persisted();
        }
        static estimate() {
            return $mol_wire_sync(this.native() ?? {}).estimate();
        }
        static dir() {
            return $mol_wire_sync(this.native()).getDirectory();
        }
    }
    __decorate([
        $mol_mem
    ], $mol_storage, "native", null);
    __decorate([
        $mol_mem
    ], $mol_storage, "persisted", null);
    $.$mol_storage = $mol_storage;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_state_local extends $mol_object {
        static 'native()';
        static native() {
            if (this['native()'])
                return this['native()'];
            check: try {
                const native = $mol_dom_context.localStorage;
                if (!native)
                    break check;
                native.setItem('', '');
                native.removeItem('');
                return this['native()'] = native;
            }
            catch (error) {
                console.warn(error);
            }
            return this['native()'] = {
                getItem(key) {
                    return this[':' + key];
                },
                setItem(key, value) {
                    this[':' + key] = value;
                },
                removeItem(key) {
                    this[':' + key] = void 0;
                }
            };
        }
        static changes(next) { return next; }
        static value(key, next) {
            this.changes();
            if (next === void 0)
                return JSON.parse(this.native().getItem(key) || 'null');
            if (next === null) {
                this.native().removeItem(key);
            }
            else {
                this.native().setItem(key, JSON.stringify(next));
                this.$.$mol_storage.persisted(true);
            }
            return next;
        }
        prefix() { return ''; }
        value(key, next) {
            return $mol_state_local.value(this.prefix() + '.' + key, next);
        }
    }
    __decorate([
        $mol_mem
    ], $mol_state_local, "changes", null);
    __decorate([
        $mol_mem_key
    ], $mol_state_local, "value", null);
    $.$mol_state_local = $mol_state_local;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_action = $mol_wire_method;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_lock extends $mol_object {
        promise = null;
        async wait() {
            let next = () => { };
            let destructed = false;
            const task = $mol_wire_auto();
            if (!task)
                return next;
            const destructor = task.destructor.bind(task);
            task.destructor = () => {
                destructor();
                destructed = true;
                next();
            };
            let promise;
            do {
                promise = this.promise;
                await promise;
                if (destructed)
                    return next;
            } while (promise !== this.promise);
            this.promise = new Promise(done => { next = done; });
            return next;
        }
        grab() { return $mol_wire_sync(this).wait(); }
    }
    $.$mol_lock = $mol_lock;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_compare_array(a, b) {
        if (a === b)
            return true;
        if (Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
            return false;
        if (a.length !== b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (a[i] !== b[i])
                return false;
        return true;
    }
    $.$mol_compare_array = $mol_compare_array;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    const decoders = {};
    function $mol_charset_decode(buffer, encoding = 'utf8') {
        let decoder = decoders[encoding];
        if (!decoder)
            decoder = decoders[encoding] = new TextDecoder(encoding);
        return decoder.decode(buffer);
    }
    $.$mol_charset_decode = $mol_charset_decode;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const TextEncoder = globalThis.TextEncoder ?? $node.util.TextEncoder;
    const encoder = new TextEncoder();
    function $mol_charset_encode(value) {
        return encoder.encode(value);
    }
    $.$mol_charset_encode = $mol_charset_encode;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_file_transaction extends $mol_object {
        path() { return ''; }
        modes() { return []; }
        write(options) {
            return 0;
        }
        read() {
            return new Uint8Array();
        }
        truncate(size) { }
        close() { }
        destructor() {
            this.close();
        }
    }
    $.$mol_file_transaction = $mol_file_transaction;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    let file_modes;
    (function (file_modes) {
        file_modes[file_modes["create"] = $node.fs.constants.O_CREAT] = "create";
        file_modes[file_modes["exists_truncate"] = $node.fs.constants.O_TRUNC] = "exists_truncate";
        file_modes[file_modes["exists_fail"] = $node.fs.constants.O_EXCL] = "exists_fail";
        file_modes[file_modes["read_only"] = $node.fs.constants.O_RDONLY] = "read_only";
        file_modes[file_modes["write_only"] = $node.fs.constants.O_WRONLY] = "write_only";
        file_modes[file_modes["read_write"] = $node.fs.constants.O_RDWR] = "read_write";
        file_modes[file_modes["append"] = $node.fs.constants.O_APPEND] = "append";
    })(file_modes || (file_modes = {}));
    function mode_mask(modes) {
        return modes.reduce((res, mode) => res | file_modes[mode], 0);
    }
    class $mol_file_transaction_node extends $mol_file_transaction {
        descr() {
            $mol_wire_solid();
            return $node.fs.openSync(this.path(), mode_mask(this.modes()));
        }
        write({ buffer, offset = 0, length, position = null }) {
            if (Array.isArray(buffer)) {
                return $node.fs.writevSync(this.descr(), buffer, position ?? undefined);
            }
            if (typeof buffer === 'string') {
                return $node.fs.writeSync(this.descr(), buffer, position);
            }
            length = length ?? buffer.byteLength;
            return $node.fs.writeSync(this.descr(), buffer, offset, length, position);
        }
        truncate(size) {
            $node.fs.ftruncateSync(this.descr());
        }
        read() {
            return $mol_file_node_buffer_normalize($node.fs.readFileSync(this.descr()));
        }
        close() {
            $node.fs.closeSync(this.descr());
        }
    }
    __decorate([
        $mol_mem
    ], $mol_file_transaction_node.prototype, "descr", null);
    $.$mol_file_transaction_node = $mol_file_transaction_node;
    $.$mol_file_transaction = $mol_file_transaction_node;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_file_base extends $mol_object {
        static absolute(path) {
            return this.make({
                path: $mol_const(path)
            });
        }
        static relative(path) {
            throw new Error('Not implemented yet');
        }
        static base = '';
        path() {
            return '.';
        }
        parent() {
            return this.resolve('..');
        }
        exists_cut() { return this.exists(); }
        root() {
            const path = this.path();
            const base = this.constructor.base;
            return base.startsWith(path) || this == this.parent();
        }
        stat(next, virt) {
            const path = this.path();
            const parent = this.parent();
            if (!this.root()) {
                parent.version();
            }
            parent.watcher();
            if (virt)
                return next ?? null;
            return next ?? this.info(path);
        }
        static changed = new Set;
        static frame = null;
        static changed_add(type, path) {
            if (/([\/\\]\.|___$)/.test(path))
                return;
            const file = this.relative(path.at(-1) === '/' ? path.slice(0, -1) : path);
            this.changed.add(file);
            if (!this.watching)
                return;
            this.frame?.destructor();
            this.frame = new this.$.$mol_after_timeout(this.watch_debounce(), () => {
                if (!this.watching)
                    return;
                this.watching = false;
                $mol_wire_async(this).flush();
            });
        }
        static watch_debounce() { return 500; }
        static flush() {
            for (const file of this.changed) {
                const parent = file.parent();
                try {
                    if ($mol_wire_probe(() => parent.sub()))
                        parent.sub(null);
                    file.reset();
                }
                catch (error) {
                    if ($mol_fail_catch(error))
                        $mol_fail_log(error);
                }
            }
            this.changed.clear();
            this.watching = true;
        }
        static watching = true;
        static lock = new $mol_lock;
        static watch_off(path) {
            this.watching = false;
            this.flush();
            this.watching = false;
            this.changed.add(this.absolute(path));
        }
        static unwatched(side_effect, affected_dir) {
            const unlock = this.lock.grab();
            this.watch_off(affected_dir);
            try {
                const result = side_effect();
                this.flush();
                unlock();
                return result;
            }
            catch (e) {
                if (!$mol_promise_like(e)) {
                    this.flush();
                    unlock();
                }
                $mol_fail_hidden(e);
            }
        }
        reset() {
            this.stat(null);
        }
        modified() { return this.stat()?.mtime ?? null; }
        version() {
            const next = this.stat()?.mtime.getTime().toString(36).toUpperCase() ?? '';
            return next;
        }
        info(path) { return null; }
        ensure() { }
        drop() { }
        copy(to) { }
        read() { return new Uint8Array; }
        write(buffer) { }
        kids() {
            return [];
        }
        readable(opts) {
            return new ReadableStream;
        }
        writable(opts) {
            return new WritableStream;
        }
        buffer(next) {
            let readed = new Uint8Array();
            if (next === undefined) {
                if (this.version())
                    readed = this.read();
            }
            const prev = $mol_mem_cached(() => this.buffer());
            const changed = prev === undefined || !$mol_compare_array(prev, next ?? readed);
            if (prev !== undefined && changed) {
                this.$.$mol_log3_rise({
                    place: `$mol_file_node.buffer()`,
                    message: 'Changed',
                    path: this.relate(),
                });
            }
            if (next === undefined)
                return changed ? readed : prev;
            if (!changed && this.exists())
                return prev;
            this.parent().exists(true);
            this.stat(this.stat_make(next.length), 'virt');
            this.write(next);
            return next;
        }
        stat_make(size) {
            const now = new Date();
            return {
                type: 'file',
                size,
                atime: now,
                mtime: now,
                ctime: now,
            };
        }
        clone(to) {
            if (!this.exists())
                return null;
            const target = this.constructor.absolute(to);
            try {
                this.version();
                target.parent().exists(true);
                this.copy(to);
                target.reset();
                return target;
            }
            catch (error) {
                if ($mol_fail_catch(error)) {
                    console.error(error);
                }
            }
            return null;
        }
        watcher() {
            return {
                destructor() { }
            };
        }
        exists(next) {
            const exists = Boolean(this.stat());
            if (next === undefined)
                return exists;
            if (next === exists)
                return exists;
            if (next) {
                this.parent().exists(true);
                this.ensure();
            }
            else {
                this.drop();
            }
            this.reset();
            return next;
        }
        type() {
            return this.stat()?.type ?? '';
        }
        name() {
            return this.path().replace(/^.*\//, '');
        }
        ext() {
            const match = /((?:\.\w+)+)$/.exec(this.path());
            return match ? match[1].substring(1) : '';
        }
        text(next, virt) {
            if (next !== undefined)
                this.exists();
            return this.text_int(next, virt);
        }
        text_int(next, virt) {
            if (virt) {
                this.stat(this.stat_make(0), 'virt');
                return next;
            }
            if (next === undefined) {
                return $mol_charset_decode(this.buffer());
            }
            else {
                const buffer = $mol_charset_encode(next);
                this.buffer(buffer);
                return next;
            }
        }
        sub(reset) {
            if (!this.exists())
                return [];
            if (this.type() !== 'dir')
                return [];
            this.version();
            return this.kids().filter(file => file.exists());
        }
        resolve(path) {
            throw new Error('implement');
        }
        relate(base = this.constructor.relative('.')) {
            const base_path = base.path();
            const path = this.path();
            return path.startsWith(base_path) ? path.slice(base_path.length) : path;
        }
        find(include, exclude) {
            const found = [];
            const sub = this.sub();
            for (const child of sub) {
                const child_path = child.path();
                if (exclude && child_path.match(exclude))
                    continue;
                if (!include || child_path.match(include))
                    found.push(child);
                if (child.type() === 'dir') {
                    const sub_child = child.find(include, exclude);
                    for (const child of sub_child)
                        found.push(child);
                }
            }
            return found;
        }
        size() {
            switch (this.type()) {
                case 'file': return this.stat()?.size ?? 0;
                default: return 0;
            }
        }
        toJSON() {
            return this.path();
        }
        open(...modes) {
            return this.$.$mol_file_transaction.make({
                path: () => this.path(),
                modes: () => modes
            });
        }
    }
    __decorate([
        $mol_action
    ], $mol_file_base.prototype, "exists_cut", null);
    __decorate([
        $mol_mem
    ], $mol_file_base.prototype, "stat", null);
    __decorate([
        $mol_mem
    ], $mol_file_base.prototype, "modified", null);
    __decorate([
        $mol_mem
    ], $mol_file_base.prototype, "version", null);
    __decorate([
        $mol_mem_key
    ], $mol_file_base.prototype, "readable", null);
    __decorate([
        $mol_mem_key
    ], $mol_file_base.prototype, "writable", null);
    __decorate([
        $mol_mem
    ], $mol_file_base.prototype, "buffer", null);
    __decorate([
        $mol_action
    ], $mol_file_base.prototype, "stat_make", null);
    __decorate([
        $mol_mem_key
    ], $mol_file_base.prototype, "clone", null);
    __decorate([
        $mol_mem
    ], $mol_file_base.prototype, "exists", null);
    __decorate([
        $mol_mem
    ], $mol_file_base.prototype, "type", null);
    __decorate([
        $mol_mem
    ], $mol_file_base.prototype, "text_int", null);
    __decorate([
        $mol_mem
    ], $mol_file_base.prototype, "sub", null);
    __decorate([
        $mol_mem
    ], $mol_file_base.prototype, "size", null);
    __decorate([
        $mol_action
    ], $mol_file_base.prototype, "open", null);
    __decorate([
        $mol_mem_key
    ], $mol_file_base, "absolute", null);
    __decorate([
        $mol_action
    ], $mol_file_base, "flush", null);
    __decorate([
        $mol_action
    ], $mol_file_base, "watch_off", null);
    $.$mol_file_base = $mol_file_base;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_file extends $mol_file_base {
    }
    $.$mol_file = $mol_file;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function stat_convert(stat) {
        if (!stat)
            return null;
        let type;
        if (stat.isDirectory())
            type = 'dir';
        if (stat.isFile())
            type = 'file';
        if (stat.isSymbolicLink())
            type = 'link';
        if (!type)
            return $mol_fail(new Error(`Unsupported file type`));
        return {
            type,
            size: Number(stat.size),
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime
        };
    }
    function $mol_file_node_buffer_normalize(buf) {
        return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
    }
    $.$mol_file_node_buffer_normalize = $mol_file_node_buffer_normalize;
    class $mol_file_node extends $mol_file {
        static relative(path) {
            return this.absolute($node.path.resolve(this.base, path).replace(/\\/g, '/'));
        }
        watcher(reset) {
            const path = this.path();
            const root = this.root();
            if (!root && !this.exists())
                return super.watcher();
            let watcher;
            try {
                watcher = $node.fs.watch(path);
            }
            catch (error) {
                if (!(error instanceof Error))
                    error = new Error('Unknown watch error', { cause: error });
                error.message += '\n' + path;
                if (root || error.code !== 'ENOENT') {
                    this.$.$mol_fail_log(error);
                }
                return super.watcher();
            }
            watcher.on('change', (type, name) => {
                if (!name)
                    return;
                const path = $node.path.join(this.path(), name.toString());
                this.constructor.changed_add(type, path);
            });
            watcher.on('error', e => this.$.$mol_fail_log(e));
            let destructed = false;
            watcher.on('close', () => {
                if (!destructed)
                    setTimeout(() => $mol_wire_async(this).watcher(null), 500);
            });
            return {
                destructor() {
                    destructed = true;
                    watcher.close();
                }
            };
        }
        info(path) {
            try {
                return stat_convert($node.fs.statSync(path));
            }
            catch (error) {
                if (this.$.$mol_fail_catch(error)) {
                    if (error.code === 'ENOENT')
                        return null;
                    error.message += '\n' + path;
                    this.$.$mol_fail_hidden(error);
                }
            }
            return null;
        }
        ensure() {
            const path = this.path();
            try {
                $node.fs.mkdirSync(path, { recursive: true });
                return null;
            }
            catch (e) {
                if (this.$.$mol_fail_catch(e)) {
                    if (e.code === 'EEXIST')
                        return null;
                    e.message += '\n' + path;
                    this.$.$mol_fail_hidden(e);
                }
            }
        }
        copy(to) {
            $node.fs.copyFileSync(this.path(), to);
        }
        drop() {
            $node.fs.unlinkSync(this.path());
        }
        read() {
            const path = this.path();
            try {
                return $mol_file_node_buffer_normalize($node.fs.readFileSync(path));
            }
            catch (error) {
                if (!$mol_promise_like(error)) {
                    error.message += '\n' + path;
                }
                $mol_fail_hidden(error);
            }
        }
        write(buffer) {
            const path = this.path();
            try {
                $node.fs.writeFileSync(path, buffer);
            }
            catch (error) {
                if (this.$.$mol_fail_catch(error)) {
                    error.message += '\n' + path;
                }
                return this.$.$mol_fail_hidden(error);
            }
        }
        kids() {
            const path = this.path();
            try {
                const kids = $node.fs.readdirSync(path)
                    .filter(name => !/^\.+$/.test(name))
                    .map(name => this.resolve(name));
                return kids;
            }
            catch (e) {
                if (this.$.$mol_fail_catch(e)) {
                    if (e.code === 'ENOENT')
                        return [];
                    e.message += '\n' + path;
                }
                $mol_fail_hidden(e);
            }
        }
        resolve(path) {
            return this.constructor
                .relative($node.path.join(this.path(), path));
        }
        relate(base = this.constructor.relative('.')) {
            return $node.path.relative(base.path(), this.path()).replace(/\\/g, '/');
        }
        readable(opts) {
            const { Readable } = $node['node:stream'];
            const stream = $node.fs.createReadStream(this.path(), {
                flags: 'r',
                autoClose: true,
                start: opts?.start,
                end: opts?.end,
                encoding: 'binary',
            });
            return Readable.toWeb(stream);
        }
        writable(opts) {
            const { Writable } = $node['node:stream'];
            const stream = $node.fs.createWriteStream(this.path(), {
                flags: 'w+',
                autoClose: true,
                start: opts?.start,
                encoding: 'binary',
            });
            return Writable.toWeb(stream);
        }
    }
    __decorate([
        $mol_mem
    ], $mol_file_node.prototype, "watcher", null);
    __decorate([
        $mol_action
    ], $mol_file_node.prototype, "info", null);
    __decorate([
        $mol_action
    ], $mol_file_node.prototype, "ensure", null);
    __decorate([
        $mol_action
    ], $mol_file_node.prototype, "copy", null);
    __decorate([
        $mol_action
    ], $mol_file_node.prototype, "drop", null);
    __decorate([
        $mol_action
    ], $mol_file_node.prototype, "read", null);
    __decorate([
        $mol_action
    ], $mol_file_node.prototype, "write", null);
    __decorate([
        $mol_mem_key
    ], $mol_file_node.prototype, "readable", null);
    __decorate([
        $mol_mem
    ], $mol_file_node.prototype, "writable", null);
    $.$mol_file_node = $mol_file_node;
    $.$mol_file = $mol_file_node;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_state_local_node extends $mol_state_local {
        static dir() {
            const base = process.env.XDG_DATA_HOME || ($node.os.homedir() + '/.local/share');
            return $mol_file.absolute(base).resolve('./mol_state_local');
        }
        static value(key, next) {
            const file = this.dir().resolve(encodeURIComponent(key) + '.json');
            if (next === null) {
                file.exists(false);
                return null;
            }
            const arg = next === undefined ? undefined : JSON.stringify(next);
            return JSON.parse(file.text(arg) || 'null');
        }
    }
    __decorate([
        $mol_mem
    ], $mol_state_local_node, "dir", null);
    __decorate([
        $mol_mem_key
    ], $mol_state_local_node, "value", null);
    $.$mol_state_local_node = $mol_state_local_node;
    $.$mol_state_local = $mol_state_local_node;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_locale extends $mol_object {
        static lang_default() {
            return 'en';
        }
        static lang(next) {
            return this.$.$mol_state_local.value('locale', next) || $mol_dom_context.navigator.language.replace(/-.*/, '') || this.lang_default();
        }
        static source(lang) {
            return JSON.parse(this.$.$mol_file.relative(`web.locale=${lang}.json`).text().toString());
        }
        static texts(lang, next) {
            if (next)
                return next;
            try {
                return this.source(lang).valueOf();
            }
            catch (error) {
                if ($mol_fail_catch(error)) {
                    const def = this.lang_default();
                    if (lang === def)
                        throw error;
                }
            }
            return {};
        }
        static text(key) {
            const lang = this.lang();
            const target = this.texts(lang)[key];
            if (target)
                return target;
            this.warn(key);
            const en = this.texts('en')[key];
            if (!en)
                return key;
            return en;
        }
        static warn(key) {
            console.warn(`Not translated to "${this.lang()}": ${key}`);
            return null;
        }
    }
    __decorate([
        $mol_mem
    ], $mol_locale, "lang_default", null);
    __decorate([
        $mol_mem
    ], $mol_locale, "lang", null);
    __decorate([
        $mol_mem_key
    ], $mol_locale, "source", null);
    __decorate([
        $mol_mem_key
    ], $mol_locale, "texts", null);
    __decorate([
        $mol_mem_key
    ], $mol_locale, "text", null);
    __decorate([
        $mol_mem_key
    ], $mol_locale, "warn", null);
    $.$mol_locale = $mol_locale;
})($ || ($ = {}));

;
	($.$mol_string) = class $mol_string extends ($.$mol_view) {
		selection_watcher(){
			return null;
		}
		error_report(){
			return null;
		}
		disabled(){
			return false;
		}
		value(next){
			if(next !== undefined) return next;
			return "";
		}
		value_changed(next){
			return (this.value(next));
		}
		hint(){
			return "";
		}
		hint_visible(){
			return (this.hint());
		}
		spellcheck(){
			return true;
		}
		autocomplete_native(){
			return "";
		}
		selection_end(){
			return 0;
		}
		selection_start(){
			return 0;
		}
		keyboard(){
			return "text";
		}
		enter(){
			return "go";
		}
		length_max(){
			return +Infinity;
		}
		type(next){
			if(next !== undefined) return next;
			return "text";
		}
		event_change(next){
			if(next !== undefined) return next;
			return null;
		}
		submit_with_ctrl(){
			return false;
		}
		submit(next){
			if(next !== undefined) return next;
			return null;
		}
		Submit(){
			const obj = new this.$.$mol_hotkey();
			(obj.mod_ctrl) = () => ((this.submit_with_ctrl()));
			(obj.key) = () => ({"enter": (next) => (this.submit(next))});
			return obj;
		}
		dom_name(){
			return "input";
		}
		enabled(){
			return true;
		}
		minimal_height(){
			return 40;
		}
		autocomplete(){
			return false;
		}
		selection(next){
			if(next !== undefined) return next;
			return [0, 0];
		}
		auto(){
			return [(this.selection_watcher()), (this.error_report())];
		}
		field(){
			return {
				...(super.field()), 
				"disabled": (this.disabled()), 
				"value": (this.value_changed()), 
				"placeholder": (this.hint_visible()), 
				"spellcheck": (this.spellcheck()), 
				"autocomplete": (this.autocomplete_native()), 
				"selectionEnd": (this.selection_end()), 
				"selectionStart": (this.selection_start()), 
				"inputMode": (this.keyboard()), 
				"enterkeyhint": (this.enter())
			};
		}
		attr(){
			return {
				...(super.attr()), 
				"maxlength": (this.length_max()), 
				"type": (this.type())
			};
		}
		event(){
			return {...(super.event()), "input": (next) => (this.event_change(next))};
		}
		plugins(){
			return [(this.Submit())];
		}
	};
	($mol_mem(($.$mol_string.prototype), "value"));
	($mol_mem(($.$mol_string.prototype), "type"));
	($mol_mem(($.$mol_string.prototype), "event_change"));
	($mol_mem(($.$mol_string.prototype), "submit"));
	($mol_mem(($.$mol_string.prototype), "Submit"));
	($mol_mem(($.$mol_string.prototype), "selection"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_string extends $.$mol_string {
            event_change(next) {
                if (!next)
                    return;
                const el = next.target;
                const from = el.selectionStart;
                const to = el.selectionEnd;
                try {
                    el.value = this.value_changed(el.value);
                }
                catch (error) {
                    const el = this.dom_node();
                    if (error instanceof Error) {
                        el.setCustomValidity(error.message);
                        el.reportValidity();
                    }
                    $mol_fail_hidden(error);
                }
                if (to === null)
                    return;
                el.selectionEnd = to;
                el.selectionStart = from;
                this.selection_change(next);
            }
            error_report() {
                try {
                    if (this.focused())
                        this.value();
                }
                catch (error) {
                    const el = this.dom_node();
                    if (error instanceof Error) {
                        el.setCustomValidity(error.message);
                        el.reportValidity();
                    }
                }
            }
            hint_visible() {
                return (this.enabled() ? this.hint() : '') || ' ';
            }
            disabled() {
                return !this.enabled();
            }
            autocomplete_native() {
                return this.autocomplete() ? 'on' : 'off';
            }
            selection_watcher() {
                return new $mol_dom_listener(this.$.$mol_dom_context.document, 'selectionchange', $mol_wire_async(event => this.selection_change(event)));
            }
            selection_change(event) {
                const el = this.dom_node();
                if (el !== this.$.$mol_dom_context.document.activeElement)
                    return;
                const [from, to] = this.selection([
                    el.selectionStart,
                    el.selectionEnd,
                ]);
                el.selectionEnd = to;
                el.selectionStart = from;
                if (to !== from && el.selectionEnd === el.selectionStart) {
                    el.selectionEnd = to;
                }
            }
            selection_start() {
                const el = this.dom_node();
                if (!this.focused())
                    return undefined;
                if (el.selectionStart == null)
                    return undefined;
                return this.selection()[0];
            }
            selection_end() {
                const el = this.dom_node();
                if (!this.focused())
                    return undefined;
                if (el.selectionEnd == null)
                    return undefined;
                return this.selection()[1];
            }
        }
        __decorate([
            $mol_action
        ], $mol_string.prototype, "event_change", null);
        __decorate([
            $mol_mem
        ], $mol_string.prototype, "error_report", null);
        __decorate([
            $mol_mem
        ], $mol_string.prototype, "selection_watcher", null);
        $$.$mol_string = $mol_string;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/string/string.view.css", "[mol_string] {\n\tbox-sizing: border-box;\n\toutline-offset: 0;\n\tborder: none;\n\tborder-radius: var(--mol_gap_round);\n\twhite-space: pre-line;\n\toverflow: hidden;\n\ttext-overflow: ellipsis;\n\tpadding: var(--mol_gap_text);\n\ttext-align: left;\n\tposition: relative;\n\tfont: inherit;\n\tflex: 1 1 auto;\n\tbackground: transparent;\n\tmin-width: 0;\n\tcolor: inherit;\n\tbackground: var(--mol_theme_field);\n}\n\n[mol_string]:disabled:not(:placeholder-shown) {\n\tbackground-color: transparent;\n\tcolor: var(--mol_theme_text);\n}\n\n[mol_string]:where(:not(:disabled)) {\n\tbox-shadow: inset 0 0 0 1px var(--mol_theme_line);\n}\n\n[mol_string]:where(:not(:disabled)):hover {\n\tbox-shadow: inset 0 0 0 2px var(--mol_theme_line);\n\tz-index: var(--mol_layer_hover);\n}\n\n[mol_string]:focus {\n\toutline: none;\n\tz-index: var(--mol_layer_focus);\n\tcolor: var(--mol_theme_text);\n\tbox-shadow: inset 0 0 0 1px var(--mol_theme_focus);\n}\n\n[mol_string]::placeholder {\n\tcolor: var(--mol_theme_shade);\n}\n\n[mol_string]::-ms-clear {\n\tdisplay: none;\n}\n");
})($ || ($ = {}));

;
	($.$mol_svg) = class $mol_svg extends ($.$mol_view) {
		dom_name(){
			return "svg";
		}
		dom_name_space(){
			return "http://www.w3.org/2000/svg";
		}
		font_size(){
			return 16;
		}
		font_family(){
			return "";
		}
		style_size(){
			return {};
		}
	};


;
"use strict";
var $;
(function ($) {
    class $mol_state_time extends $mol_object {
        static task(precision, reset) {
            if (precision) {
                return new $mol_after_timeout(precision, () => this.task(precision, null));
            }
            else {
                return new $mol_after_frame(() => this.task(precision, null));
            }
        }
        static now(precision) {
            this.task(precision);
            return Date.now();
        }
    }
    __decorate([
        $mol_mem_key
    ], $mol_state_time, "task", null);
    __decorate([
        $mol_mem_key
    ], $mol_state_time, "now", null);
    $.$mol_state_time = $mol_state_time;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_svg extends $.$mol_svg {
            computed_style() {
                const win = this.$.$mol_dom_context;
                const style = win.getComputedStyle(this.dom_node());
                if (!style['font-size'])
                    $mol_state_time.now(0);
                return style;
            }
            font_size() {
                return parseInt(this.computed_style()['font-size']) || 16;
            }
            font_family() {
                return this.computed_style()['font-family'];
            }
        }
        __decorate([
            $mol_mem
        ], $mol_svg.prototype, "computed_style", null);
        __decorate([
            $mol_mem
        ], $mol_svg.prototype, "font_size", null);
        __decorate([
            $mol_mem
        ], $mol_svg.prototype, "font_family", null);
        $$.$mol_svg = $mol_svg;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_svg_root) = class $mol_svg_root extends ($.$mol_svg) {
		view_box(){
			return "0 0 100 100";
		}
		aspect(){
			return "xMidYMid";
		}
		dom_name(){
			return "svg";
		}
		attr(){
			return {
				...(super.attr()), 
				"viewBox": (this.view_box()), 
				"preserveAspectRatio": (this.aspect())
			};
		}
	};


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/svg/root/root.view.css", "[mol_svg_root] {\n\toverflow: hidden;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_svg_path) = class $mol_svg_path extends ($.$mol_svg) {
		geometry(){
			return "";
		}
		dom_name(){
			return "path";
		}
		attr(){
			return {...(super.attr()), "d": (this.geometry())};
		}
	};


;
"use strict";

;
	($.$mol_icon) = class $mol_icon extends ($.$mol_svg_root) {
		path(){
			return "";
		}
		Path(){
			const obj = new this.$.$mol_svg_path();
			(obj.geometry) = () => ((this.path()));
			return obj;
		}
		view_box(){
			return "0 0 24 24";
		}
		minimal_width(){
			return 16;
		}
		minimal_height(){
			return 16;
		}
		sub(){
			return [(this.Path())];
		}
	};
	($mol_mem(($.$mol_icon.prototype), "Path"));


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/icon/icon.view.css", "[mol_icon] {\n\tfill: currentColor;\n\tstroke: none;\n\twidth: 1em;\n\theight: 1.5em;\n\tflex: 0 0 auto;\n\tvertical-align: top;\n\tdisplay: inline-block;\n\tfilter: drop-shadow(0px 1px 1px var(--mol_theme_back));\n\ttransform-origin: center;\n}\n\n[mol_icon_path] {\n\ttransform-origin: center;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_icon_close) = class $mol_icon_close extends ($.$mol_icon) {
		path(){
			return "M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z";
		}
	};


;
"use strict";

;
	($.$mol_speck) = class $mol_speck extends ($.$mol_view) {
		theme(){
			return "$mol_theme_accent";
		}
		value(){
			return null;
		}
		attr(){
			return {...(super.attr()), "mol_theme": (this.theme())};
		}
		style(){
			return {...(super.style()), "minHeight": "1em"};
		}
		sub(){
			return [(this.value())];
		}
	};


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/speck/speck.view.css", "[mol_speck] {\n\tfont-size: .625rem;\n\tborder-radius: 1rem;\n\tmargin: -0.5rem -0.25rem;\n\talign-self: flex-start;\n\tmin-height: 1em;\n\tmin-width: .5em;\n\tvertical-align: sub;\n\tpadding: .25em .5em;\n\tposition: absolute;\n\tz-index: var(--mol_layer_speck);\n\ttext-align: center;\n\tline-height: 1;\n\tdisplay: inline-block;\n\twhite-space: nowrap;\n\ttext-overflow: ellipsis;\n\tuser-select: none;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_button) = class $mol_button extends ($.$mol_view) {
		event_activate(next){
			if(next !== undefined) return next;
			return null;
		}
		clicks(next){
			if(next !== undefined) return next;
			return null;
		}
		event_key_press(next){
			if(next !== undefined) return next;
			return null;
		}
		disabled(){
			return false;
		}
		tab_index(){
			return 0;
		}
		hint(){
			return "";
		}
		hint_safe(){
			return (this.hint());
		}
		error(){
			return "";
		}
		enabled(){
			return true;
		}
		click(next){
			if(next !== undefined) return next;
			return null;
		}
		event_click(next){
			if(next !== undefined) return next;
			return null;
		}
		event(){
			return {
				...(super.event()), 
				"click": (next) => (this.event_activate(next)), 
				"dblclick": (next) => (this.clicks(next)), 
				"keydown": (next) => (this.event_key_press(next))
			};
		}
		attr(){
			return {
				...(super.attr()), 
				"disabled": (this.disabled()), 
				"role": "button", 
				"tabindex": (this.tab_index()), 
				"title": (this.hint_safe())
			};
		}
		sub(){
			return [(this.title())];
		}
		Speck(){
			const obj = new this.$.$mol_speck();
			(obj.value) = () => ((this.error()));
			return obj;
		}
	};
	($mol_mem(($.$mol_button.prototype), "event_activate"));
	($mol_mem(($.$mol_button.prototype), "clicks"));
	($mol_mem(($.$mol_button.prototype), "event_key_press"));
	($mol_mem(($.$mol_button.prototype), "click"));
	($mol_mem(($.$mol_button.prototype), "event_click"));
	($mol_mem(($.$mol_button.prototype), "Speck"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_button extends $.$mol_button {
            status(next = [null]) { return next; }
            disabled() {
                return !this.enabled();
            }
            event_activate(next) {
                if (!next)
                    return;
                if (!this.enabled())
                    return;
                try {
                    this.event_click(next);
                    this.click(next);
                    this.status([null]);
                }
                catch (error) {
                    Promise.resolve().then(() => this.status([error]));
                    $mol_fail_hidden(error);
                }
            }
            event_key_press(event) {
                if (event.keyCode === $mol_keyboard_code.enter) {
                    return this.event_activate(event);
                }
            }
            tab_index() {
                return this.enabled() ? super.tab_index() : -1;
            }
            error() {
                const [error] = this.status();
                if (!error)
                    return '';
                if (error instanceof Promise) {
                    return $mol_fail_hidden(error);
                }
                return String(error.message ?? error);
            }
            hint_safe() {
                try {
                    return this.hint();
                }
                catch (error) {
                    $mol_fail_log(error);
                    return '';
                }
            }
            sub_visible() {
                return [
                    ...this.error() ? [this.Speck()] : [],
                    ...this.sub(),
                ];
            }
        }
        __decorate([
            $mol_mem
        ], $mol_button.prototype, "status", null);
        $$.$mol_button = $mol_button;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/button/button.view.css", "[mol_button] {\n\tborder: none;\n\tfont: inherit;\n\tdisplay: inline-flex;\n\tflex-shrink: 0;\n\ttext-decoration: inherit;\n\tcursor: inherit;\n\tposition: relative;\n\tbox-sizing: border-box;\n\tword-break: normal;\n\tcursor: default;\n\tuser-select: none;\n\tborder-radius: var(--mol_gap_round);\n\tbackground: transparent;\n\tcolor: inherit;\n}\n\n[mol_button]:where(:not(:disabled)):hover {\n\tz-index: var(--mol_layer_hover);\n}\n\n[mol_button]:focus-visible {\n\toutline: none;\n\tz-index: var(--mol_layer_focus);\n}\n");
})($ || ($ = {}));

;
	($.$mol_button_typed) = class $mol_button_typed extends ($.$mol_button) {
		minimal_height(){
			return 40;
		}
		minimal_width(){
			return 40;
		}
	};


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/button/typed/typed.view.css", "[mol_button_typed] {\n\talign-content: center;\n\talign-items: center;\n\tpadding: var(--mol_gap_text);\n\tborder-radius: var(--mol_gap_round);\n\tgap: var(--mol_gap_space);\n\tuser-select: none;\n\tcursor: pointer;\n}\n\n[mol_button_typed][disabled] {\n\tpointer-events: none;\n}\n\n[mol_button_typed]:hover ,\n[mol_button_typed]:focus-visible {\n\tbox-shadow: inset 0 0 0 10rem var(--mol_theme_hover);\n}\n\n[mol_button_typed]:active {\n\tcolor: var(--mol_theme_focus);\n}\n\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_button_minor) = class $mol_button_minor extends ($.$mol_button_typed) {};


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/button/minor/minor.view.css", "[mol_button_minor] {\n\tcolor: var(--mol_theme_control);\n}\n\n[mol_button_minor][disabled] {\n\tcolor: var(--mol_theme_shade);\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_list) = class $mol_list extends ($.$mol_view) {
		rows(){
			return [];
		}
		gap_before(){
			return 0;
		}
		gap_after(){
			return 0;
		}
		render_visible_only(){
			return true;
		}
		render_over(){
			return 0;
		}
		sub(){
			return (this.rows());
		}
		Empty(){
			const obj = new this.$.$mol_view();
			return obj;
		}
		Gap_before(){
			const obj = new this.$.$mol_view();
			(obj.style) = () => ({"paddingTop": (this.gap_before())});
			return obj;
		}
		Gap_after(){
			const obj = new this.$.$mol_view();
			(obj.style) = () => ({"paddingTop": (this.gap_after())});
			return obj;
		}
		view_window(){
			return [0, 0];
		}
	};
	($mol_mem(($.$mol_list.prototype), "Empty"));
	($mol_mem(($.$mol_list.prototype), "Gap_before"));
	($mol_mem(($.$mol_list.prototype), "Gap_after"));


;
"use strict";
var $;
(function ($) {
    let cache = null;
    function $mol_support_css_overflow_anchor() {
        return cache ?? (cache = this.$mol_dom_context.CSS?.supports('overflow-anchor:auto') ?? false);
    }
    $.$mol_support_css_overflow_anchor = $mol_support_css_overflow_anchor;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_list extends $.$mol_list {
            sub() {
                const rows = this.rows();
                return (rows.length === 0) ? [this.Empty()] : rows;
            }
            render_visible_only() {
                return this.$.$mol_support_css_overflow_anchor();
            }
            view_window(next) {
                const kids = this.sub();
                if (kids.length < 3)
                    return [0, kids.length];
                if (this.$.$mol_print.active())
                    return [0, kids.length];
                const rect = this.view_rect();
                if (next)
                    return next;
                let [min, max] = $mol_mem_cached(() => this.view_window()) ?? [0, 0];
                let max2 = max = Math.min(max, kids.length);
                let min2 = min = Math.max(0, Math.min(min, max - 1));
                const anchoring = this.render_visible_only();
                const window_height = this.$.$mol_window.size().height + 40;
                const over = Math.ceil(window_height * this.render_over());
                const limit_top = -over;
                const limit_bottom = window_height + over;
                const gap_before = $mol_mem_cached(() => this.gap_before()) ?? 0;
                const gap_after = $mol_mem_cached(() => this.gap_after()) ?? 0;
                let top = Math.ceil(rect?.top ?? 0) + gap_before;
                let bottom = Math.ceil(rect?.bottom ?? 0) - gap_after;
                if (top <= limit_top && bottom >= limit_bottom) {
                    return [min2, max2];
                }
                if (anchoring && ((bottom < limit_top) || (top > limit_bottom))) {
                    min = 0;
                    top = Math.ceil(rect?.top ?? 0);
                    while (min < (kids.length - 1)) {
                        const height = kids[min].minimal_height();
                        if (top + height >= limit_top)
                            break;
                        top += height;
                        ++min;
                    }
                    min2 = min;
                    max2 = max = min;
                    bottom = top;
                }
                let top2 = top;
                let bottom2 = bottom;
                if (anchoring && (top < limit_top) && (bottom < limit_bottom) && (max < kids.length)) {
                    min2 = max;
                    top2 = bottom;
                }
                if ((bottom > limit_bottom) && (top > limit_top) && (min > 0)) {
                    max2 = min;
                    bottom2 = top;
                }
                while (anchoring && ((top2 > limit_top) && (min2 > 0))) {
                    --min2;
                    top2 -= kids[min2].minimal_height();
                }
                while (bottom2 < limit_bottom && max2 < kids.length) {
                    bottom2 += kids[max2].minimal_height();
                    ++max2;
                }
                return [min2, max2];
            }
            gap_before() {
                const skipped = this.sub().slice(0, this.view_window()[0]);
                return Math.max(0, skipped.reduce((sum, view) => sum + view.minimal_height(), 0));
            }
            gap_after() {
                const skipped = this.sub().slice(this.view_window()[1]);
                return Math.max(0, skipped.reduce((sum, view) => sum + view.minimal_height(), 0));
            }
            sub_visible() {
                return [
                    ...this.gap_before() ? [this.Gap_before()] : [],
                    ...this.sub().slice(...this.view_window()),
                    ...this.gap_after() ? [this.Gap_after()] : [],
                ];
            }
            minimal_height() {
                return this.sub().reduce((sum, view) => {
                    try {
                        return sum + view.minimal_height();
                    }
                    catch (error) {
                        $mol_fail_log(error);
                        return sum;
                    }
                }, 0);
            }
            force_render(path) {
                const kids = this.rows();
                const index = kids.findIndex(item => path.has(item));
                if (index >= 0) {
                    const win = this.view_window();
                    if (index < win[0] || index >= win[1]) {
                        this.view_window([this.render_visible_only() ? index : 0, index + 1]);
                    }
                    kids[index].force_render(path);
                }
            }
        }
        __decorate([
            $mol_mem
        ], $mol_list.prototype, "sub", null);
        __decorate([
            $mol_mem
        ], $mol_list.prototype, "view_window", null);
        __decorate([
            $mol_mem
        ], $mol_list.prototype, "gap_before", null);
        __decorate([
            $mol_mem
        ], $mol_list.prototype, "gap_after", null);
        __decorate([
            $mol_mem
        ], $mol_list.prototype, "sub_visible", null);
        __decorate([
            $mol_mem
        ], $mol_list.prototype, "minimal_height", null);
        $$.$mol_list = $mol_list;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/list/list.view.css", "[mol_list] {\n\twill-change: contents;\n\tdisplay: flex;\n\tflex-direction: column;\n\tflex-shrink: 0;\n\tmax-width: 100%;\n\t/* display: flex;\n\talign-items: stretch;\n\talign-content: stretch; */\n\ttransition: none;\n\tmin-height: 1.5rem;\n}\n\n[mol_list_gap_before] ,\n[mol_list_gap_after] {\n\tdisplay: block !important;\n\tflex: none;\n\ttransition: none;\n\toverflow-anchor: none;\n}\n");
})($ || ($ = {}));

;
	($.$mol_paragraph) = class $mol_paragraph extends ($.$mol_view) {
		line_height(){
			return 24;
		}
		letter_width(){
			return 7;
		}
		width_limit(){
			return +Infinity;
		}
		row_width(){
			return 0;
		}
		sub(){
			return [(this.title())];
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_paragraph extends $.$mol_paragraph {
            maximal_width() {
                let width = 0;
                const letter = this.letter_width();
                for (const kid of this.sub()) {
                    if (!kid)
                        continue;
                    if (kid instanceof $mol_view) {
                        width += kid.maximal_width();
                    }
                    else if (typeof kid !== 'object') {
                        width += String(kid).length * letter;
                    }
                }
                return width;
            }
            width_limit() {
                return this.$.$mol_window.size().width;
            }
            minimal_width() {
                return this.letter_width();
            }
            row_width() {
                return Math.max(Math.min(this.width_limit(), this.maximal_width()), this.letter_width());
            }
            minimal_height() {
                return Math.max(1, Math.ceil(this.maximal_width() / this.row_width())) * this.line_height();
            }
        }
        __decorate([
            $mol_mem
        ], $mol_paragraph.prototype, "maximal_width", null);
        __decorate([
            $mol_mem
        ], $mol_paragraph.prototype, "row_width", null);
        __decorate([
            $mol_mem
        ], $mol_paragraph.prototype, "minimal_height", null);
        $$.$mol_paragraph = $mol_paragraph;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/paragraph/paragraph.view.css", ":where([mol_paragraph]) {\n\tmargin: 0;\n\tmax-width: 100%;\n}\n");
})($ || ($ = {}));

;
	($.$mol_dimmer) = class $mol_dimmer extends ($.$mol_paragraph) {
		parts(){
			return [];
		}
		string(id){
			return "";
		}
		haystack(){
			return "";
		}
		needle(){
			return "";
		}
		sub(){
			return (this.parts());
		}
		Low(id){
			const obj = new this.$.$mol_paragraph();
			(obj.sub) = () => ([(this.string(id))]);
			return obj;
		}
		High(id){
			const obj = new this.$.$mol_paragraph();
			(obj.sub) = () => ([(this.string(id))]);
			return obj;
		}
	};
	($mol_mem_key(($.$mol_dimmer.prototype), "Low"));
	($mol_mem_key(($.$mol_dimmer.prototype), "High"));


;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";

;
"use strict";
var $;
(function ($) {
    class $mol_regexp extends RegExp {
        groups;
        constructor(source, flags = 'gsu', groups = []) {
            super(source, flags);
            this.groups = groups;
        }
        *[Symbol.matchAll](str) {
            const index = this.lastIndex;
            this.lastIndex = 0;
            try {
                while (this.lastIndex < str.length) {
                    const found = this.exec(str);
                    if (!found)
                        break;
                    yield found;
                }
            }
            finally {
                this.lastIndex = index;
            }
        }
        [Symbol.match](str) {
            const res = [...this[Symbol.matchAll](str)].filter(r => r.groups).map(r => r[0]);
            if (!res.length)
                return null;
            return res;
        }
        [Symbol.split](str) {
            const res = [];
            let token_last = null;
            for (let token of this[Symbol.matchAll](str)) {
                if (token.groups && (token_last ? token_last.groups : true))
                    res.push('');
                res.push(token[0]);
                token_last = token;
            }
            if (!res.length)
                res.push('');
            return res;
        }
        test(str) {
            return Boolean(str.match(this));
        }
        exec(str) {
            const from = this.lastIndex;
            if (from >= str.length)
                return null;
            const res = super.exec(str);
            if (res === null) {
                this.lastIndex = str.length;
                if (!str)
                    return null;
                return Object.assign([str.slice(from)], {
                    index: from,
                    input: str,
                });
            }
            if (from === this.lastIndex) {
                $mol_fail(new Error('Captured empty substring'));
            }
            const groups = {};
            const skipped = str.slice(from, this.lastIndex - res[0].length);
            if (skipped) {
                this.lastIndex = this.lastIndex - res[0].length;
                return Object.assign([skipped], {
                    index: from,
                    input: res.input,
                });
            }
            for (let i = 0; i < this.groups.length; ++i) {
                const group = this.groups[i];
                groups[group] = groups[group] || res[i + 1] || '';
            }
            return Object.assign(res, { groups });
        }
        generate(params) {
            return null;
        }
        get native() {
            return new RegExp(this.source, this.flags);
        }
        static repeat(source, min = 0, max = Number.POSITIVE_INFINITY) {
            const regexp = $mol_regexp.from(source);
            const upper = Number.isFinite(max) ? max : '';
            const str = `(?:${regexp.source}){${min},${upper}}?`;
            const regexp2 = new $mol_regexp(str, regexp.flags, regexp.groups);
            regexp2.generate = params => {
                const res = regexp.generate(params);
                if (res)
                    return res;
                if (min > 0)
                    return res;
                return '';
            };
            return regexp2;
        }
        static repeat_greedy(source, min = 0, max = Number.POSITIVE_INFINITY) {
            const regexp = $mol_regexp.from(source);
            const upper = Number.isFinite(max) ? max : '';
            const str = `(?:${regexp.source}){${min},${upper}}`;
            const regexp2 = new $mol_regexp(str, regexp.flags, regexp.groups);
            regexp2.generate = params => {
                const res = regexp.generate(params);
                if (res)
                    return res;
                if (min > 0)
                    return res;
                return '';
            };
            return regexp2;
        }
        static vary(sources) {
            const groups = [];
            const chunks = sources.map(source => {
                const regexp = $mol_regexp.from(source);
                groups.push(...regexp.groups);
                return regexp.source;
            });
            return new $mol_regexp(`(?:${chunks.join('|')})`, '', groups);
        }
        static optional(source) {
            return $mol_regexp.repeat_greedy(source, 0, 1);
        }
        static force_after(source) {
            const regexp = $mol_regexp.from(source);
            return new $mol_regexp(`(?=${regexp.source})`, regexp.flags, regexp.groups);
        }
        static forbid_after(source) {
            const regexp = $mol_regexp.from(source);
            return new $mol_regexp(`(?!${regexp.source})`, regexp.flags, regexp.groups);
        }
        static from(source, { ignoreCase, multiline } = {
            ignoreCase: false,
            multiline: false,
        }) {
            let flags = 'gsu';
            if (multiline)
                flags += 'm';
            if (ignoreCase)
                flags += 'i';
            if (typeof source === 'number') {
                const src = `\\u{${source.toString(16)}}`;
                const regexp = new $mol_regexp(src, flags);
                regexp.generate = () => src;
                return regexp;
            }
            if (typeof source === 'string') {
                const src = source.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
                const regexp = new $mol_regexp(src, flags);
                regexp.generate = () => source;
                return regexp;
            }
            else if (source instanceof $mol_regexp) {
                const regexp = new $mol_regexp(source.source, flags, source.groups);
                regexp.generate = params => source.generate(params);
                return regexp;
            }
            if (source instanceof RegExp) {
                const test = new RegExp('|' + source.source);
                const groups = Array.from({ length: test.exec('').length - 1 }, (_, i) => String(i + 1));
                const regexp = new $mol_regexp(source.source, source.flags, groups);
                regexp.generate = () => '';
                return regexp;
            }
            if (Array.isArray(source)) {
                const patterns = source.map(src => Array.isArray(src)
                    ? $mol_regexp.optional(src)
                    : $mol_regexp.from(src));
                const chunks = patterns.map(pattern => pattern.source);
                const groups = [];
                let index = 0;
                for (const pattern of patterns) {
                    for (let group of pattern.groups) {
                        if (Number(group) >= 0) {
                            groups.push(String(index++));
                        }
                        else {
                            groups.push(group);
                        }
                    }
                }
                const regexp = new $mol_regexp(chunks.join(''), flags, groups);
                regexp.generate = params => {
                    let res = '';
                    for (const pattern of patterns) {
                        let sub = pattern.generate(params);
                        if (sub === null)
                            return '';
                        res += sub;
                    }
                    return res;
                };
                return regexp;
            }
            else {
                const groups = [];
                const chunks = Object.keys(source).map(name => {
                    groups.push(name);
                    const regexp = $mol_regexp.from(source[name]);
                    groups.push(...regexp.groups);
                    return `(${regexp.source})`;
                });
                const regexp = new $mol_regexp(`(?:${chunks.join('|')})`, flags, groups);
                const validator = new RegExp('^' + regexp.source + '$', flags);
                regexp.generate = (params) => {
                    for (let option in source) {
                        if (option in params) {
                            if (typeof params[option] === 'boolean') {
                                if (!params[option])
                                    continue;
                            }
                            else {
                                const str = String(params[option]);
                                if (str.match(validator))
                                    return str;
                                $mol_fail(new Error(`Wrong param: ${option}=${str}`));
                            }
                        }
                        else {
                            if (typeof source[option] !== 'object')
                                continue;
                        }
                        const res = $mol_regexp.from(source[option]).generate(params);
                        if (res)
                            return res;
                    }
                    return null;
                };
                return regexp;
            }
        }
        static unicode_only(...category) {
            return new $mol_regexp(`\\p{${category.join('=')}}`);
        }
        static unicode_except(...category) {
            return new $mol_regexp(`\\P{${category.join('=')}}`);
        }
        static char_range(from, to) {
            return new $mol_regexp(`${$mol_regexp.from(from).source}-${$mol_regexp.from(to).source}`);
        }
        static char_only(...allowed) {
            const regexp = allowed.map(f => $mol_regexp.from(f).source).join('');
            return new $mol_regexp(`[${regexp}]`);
        }
        static char_except(...forbidden) {
            const regexp = forbidden.map(f => $mol_regexp.from(f).source).join('');
            return new $mol_regexp(`[^${regexp}]`);
        }
        static decimal_only = $mol_regexp.from(/\d/gsu);
        static decimal_except = $mol_regexp.from(/\D/gsu);
        static latin_only = $mol_regexp.from(/\w/gsu);
        static latin_except = $mol_regexp.from(/\W/gsu);
        static space_only = $mol_regexp.from(/\s/gsu);
        static space_except = $mol_regexp.from(/\S/gsu);
        static word_break_only = $mol_regexp.from(/\b/gsu);
        static word_break_except = $mol_regexp.from(/\B/gsu);
        static tab = $mol_regexp.from(/\t/gsu);
        static slash_back = $mol_regexp.from(/\\/gsu);
        static nul = $mol_regexp.from(/\0/gsu);
        static char_any = $mol_regexp.from(/./gsu);
        static begin = $mol_regexp.from(/^/gsu);
        static end = $mol_regexp.from(/$/gsu);
        static or = $mol_regexp.from(/|/gsu);
        static line_end = $mol_regexp.from({
            win_end: [['\r'], '\n'],
            mac_end: '\r',
        });
    }
    $.$mol_regexp = $mol_regexp;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_dimmer extends $.$mol_dimmer {
            parts() {
                const needle = this.needle();
                if (needle.length < 2)
                    return [this.haystack()];
                let chunks = [];
                let strings = this.strings();
                for (let index = 0; index < strings.length; index++) {
                    if (strings[index] === '')
                        continue;
                    chunks.push((index % 2) ? this.High(index) : this.Low(index));
                }
                return chunks;
            }
            strings() {
                const options = this.needle().split(/\s+/g).filter(Boolean);
                if (!options.length)
                    return [this.haystack()];
                const variants = { ...options };
                const regexp = $mol_regexp.from({ needle: variants }, { ignoreCase: true });
                return this.haystack().split(regexp);
            }
            string(index) {
                return this.strings()[index];
            }
            *view_find(check, path = []) {
                if (check(this, this.haystack())) {
                    yield [...path, this];
                }
            }
        }
        __decorate([
            $mol_mem
        ], $mol_dimmer.prototype, "strings", null);
        $$.$mol_dimmer = $mol_dimmer;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/dimmer/dimmer.view.css", "[mol_dimmer] {\n\tdisplay: block;\n\tmax-width: 100%;\n}\n\n[mol_dimmer_low] {\n\tdisplay: inline;\n\topacity: 0.8;\n}\n\n[mol_dimmer_high] {\n\tdisplay: inline;\n\tcolor: var(--mol_theme_focus);\n\ttext-shadow: 0 0;\n}\n");
})($ || ($ = {}));

;
	($.$mol_search) = class $mol_search extends ($.$mol_pop) {
		clear(next){
			if(next !== undefined) return next;
			return null;
		}
		Hotkey(){
			const obj = new this.$.$mol_hotkey();
			(obj.key) = () => ({"escape": (next) => (this.clear(next))});
			return obj;
		}
		nav_components(){
			return [];
		}
		nav_focused(next){
			if(next !== undefined) return next;
			return null;
		}
		Nav(){
			const obj = new this.$.$mol_nav();
			(obj.keys_y) = () => ((this.nav_components()));
			(obj.current_y) = (next) => ((this.nav_focused(next)));
			return obj;
		}
		suggests_showed(next){
			if(next !== undefined) return next;
			return false;
		}
		query(next){
			if(next !== undefined) return next;
			return "";
		}
		hint(){
			return (this.$.$mol_locale.text("$mol_search_hint"));
		}
		submit(next){
			if(next !== undefined) return next;
			return null;
		}
		enabled(){
			return true;
		}
		keyboard(){
			return "search";
		}
		enter(){
			return "search";
		}
		bring(){
			return (this.Query().bring());
		}
		Query(){
			const obj = new this.$.$mol_string();
			(obj.value) = (next) => ((this.query(next)));
			(obj.hint) = () => ((this.hint()));
			(obj.submit) = (next) => ((this.submit(next)));
			(obj.enabled) = () => ((this.enabled()));
			(obj.keyboard) = () => ((this.keyboard()));
			(obj.enter) = () => ((this.enter()));
			return obj;
		}
		Clear_icon(){
			const obj = new this.$.$mol_icon_close();
			return obj;
		}
		Clear(){
			const obj = new this.$.$mol_button_minor();
			(obj.hint) = () => ((this.$.$mol_locale.text("$mol_search_Clear_hint")));
			(obj.click) = (next) => ((this.clear(next)));
			(obj.sub) = () => ([(this.Clear_icon())]);
			return obj;
		}
		anchor_content(){
			return [(this.Query()), (this.Clear())];
		}
		menu_items(){
			return [];
		}
		Menu(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ((this.menu_items()));
			return obj;
		}
		Bubble_pane(){
			const obj = new this.$.$mol_scroll();
			(obj.sub) = () => ([(this.Menu())]);
			return obj;
		}
		suggest_select(id, next){
			if(next !== undefined) return next;
			return null;
		}
		suggest_label(id){
			return "";
		}
		Suggest_label(id){
			const obj = new this.$.$mol_dimmer();
			(obj.haystack) = () => ((this.suggest_label(id)));
			(obj.needle) = () => ((this.query()));
			return obj;
		}
		suggest_content(id){
			return [(this.Suggest_label(id))];
		}
		suggests(){
			return [];
		}
		plugins(){
			return [
				...(super.plugins()), 
				(this.Hotkey()), 
				(this.Nav())
			];
		}
		showed(next){
			return (this.suggests_showed(next));
		}
		align_hor(){
			return "right";
		}
		Anchor(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ((this.anchor_content()));
			return obj;
		}
		bubble_content(){
			return [(this.Bubble_pane())];
		}
		Suggest(id){
			const obj = new this.$.$mol_button_minor();
			(obj.click) = (next) => ((this.suggest_select(id, next)));
			(obj.sub) = () => ((this.suggest_content(id)));
			return obj;
		}
	};
	($mol_mem(($.$mol_search.prototype), "clear"));
	($mol_mem(($.$mol_search.prototype), "Hotkey"));
	($mol_mem(($.$mol_search.prototype), "nav_focused"));
	($mol_mem(($.$mol_search.prototype), "Nav"));
	($mol_mem(($.$mol_search.prototype), "suggests_showed"));
	($mol_mem(($.$mol_search.prototype), "query"));
	($mol_mem(($.$mol_search.prototype), "submit"));
	($mol_mem(($.$mol_search.prototype), "Query"));
	($mol_mem(($.$mol_search.prototype), "Clear_icon"));
	($mol_mem(($.$mol_search.prototype), "Clear"));
	($mol_mem(($.$mol_search.prototype), "Menu"));
	($mol_mem(($.$mol_search.prototype), "Bubble_pane"));
	($mol_mem_key(($.$mol_search.prototype), "suggest_select"));
	($mol_mem_key(($.$mol_search.prototype), "Suggest_label"));
	($mol_mem(($.$mol_search.prototype), "Anchor"));
	($mol_mem_key(($.$mol_search.prototype), "Suggest"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_search extends $.$mol_search {
            anchor_content() {
                return [
                    this.Query(),
                    ...this.query() ? [this.Clear()] : [],
                ];
            }
            suggests_showed(next = true) {
                this.query();
                if (!this.focused())
                    return false;
                return next;
            }
            suggest_selected(next) {
                if (next === undefined)
                    return;
                this.query(next);
                this.Query().focused(true);
            }
            nav_components() {
                return [
                    this.Query(),
                    ...this.menu_items(),
                ];
            }
            nav_focused(component) {
                if (!this.focused())
                    return null;
                if (component == null) {
                    for (let comp of this.nav_components()) {
                        if (comp && comp.focused())
                            return comp;
                    }
                    return null;
                }
                if (this.suggests_showed()) {
                    this.ensure_visible(component, "center");
                    component.focused(true);
                }
                return component;
            }
            suggest_label(key) {
                return key;
            }
            menu_items() {
                return this.suggests().map((suggest) => this.Suggest(suggest));
            }
            suggest_select(id, event) {
                this.query(id);
                this.Query().selection([id.length, id.length]);
                this.Query().focused(true);
            }
            clear(event) {
                this.query('');
            }
        }
        __decorate([
            $mol_mem
        ], $mol_search.prototype, "anchor_content", null);
        __decorate([
            $mol_mem
        ], $mol_search.prototype, "suggests_showed", null);
        __decorate([
            $mol_mem
        ], $mol_search.prototype, "nav_focused", null);
        __decorate([
            $mol_mem
        ], $mol_search.prototype, "menu_items", null);
        $$.$mol_search = $mol_search;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/search/search.view.css", "[mol_search] {\n\talign-self: flex-start;\n\tflex: auto;\n}\n\n[mol_search_anchor] {\n\tflex: 1 1 auto;\n}\n\n[mol_search_query] {\n\tflex-grow: 1;\n}\n\n[mol_search_menu] {\n\tmin-height: .75rem;\n\tdisplay: flex;\n}\n\n[mol_search_suggest] {\n\ttext-align: left;\n}\n\n[mol_search_suggest_label_high] {\n\tcolor: var(--mol_theme_shade);\n\ttext-shadow: none;\n}\n");
})($ || ($ = {}));

;
	($.$mol_link) = class $mol_link extends ($.$mol_view) {
		uri_toggle(){
			return "";
		}
		hint(){
			return "";
		}
		hint_safe(){
			return (this.hint());
		}
		target(){
			return "_self";
		}
		file_name(){
			return "";
		}
		current(){
			return false;
		}
		relation(){
			return "";
		}
		event_click(next){
			if(next !== undefined) return next;
			return null;
		}
		click(next){
			return (this.event_click(next));
		}
		uri(){
			return "";
		}
		dom_name(){
			return "a";
		}
		uri_off(){
			return "";
		}
		uri_native(){
			return null;
		}
		external(){
			return false;
		}
		attr(){
			return {
				...(super.attr()), 
				"href": (this.uri_toggle()), 
				"title": (this.hint_safe()), 
				"target": (this.target()), 
				"download": (this.file_name()), 
				"mol_link_current": (this.current()), 
				"rel": (this.relation())
			};
		}
		sub(){
			return [(this.title())];
		}
		arg(){
			return {};
		}
		event(){
			return {...(super.event()), "click": (next) => (this.click(next))};
		}
	};
	($mol_mem(($.$mol_link.prototype), "event_click"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    class $mol_state_arg extends $mol_object {
        prefix;
        static prolog = '';
        static separator = ' ';
        static href(next) {
            return next || process.argv.slice(2).join(' ');
        }
        static href_normal() {
            return this.link({});
        }
        static dict(next) {
            if (next !== void 0)
                this.href(this.make_link(next));
            var href = this.href();
            var chunks = href.split(' ');
            var params = {};
            chunks.forEach(chunk => {
                if (!chunk)
                    return;
                var vals = chunk.split('=').map(decodeURIComponent);
                params[vals.shift()] = vals.join('=');
            });
            return params;
        }
        static value(key, next) {
            if (next === void 0)
                return this.dict()[key] ?? null;
            this.href(this.link({ [key]: next }));
            return next;
        }
        static link(next) {
            const params = {};
            var prev = this.dict();
            for (var key in prev) {
                params[key] = prev[key];
            }
            for (var key in next) {
                params[key] = next[key];
            }
            return this.make_link(params);
        }
        static make_link(next) {
            const chunks = [];
            for (const key in next) {
                if (next[key] !== null) {
                    chunks.push([key, next[key]].map(encodeURIComponent).join('='));
                }
            }
            return chunks.join(' ');
        }
        static go(next) {
            this.href(this.link(next));
        }
        static commit() { }
        constructor(prefix = '') {
            super();
            this.prefix = prefix;
        }
        value(key, next) {
            return this.constructor.value(this.prefix + key, next);
        }
        sub(postfix) {
            return new this.constructor(this.prefix + postfix + '.');
        }
        link(next) {
            const prefix = this.prefix;
            const dict = {};
            for (var key in next) {
                dict[prefix + key] = next[key];
            }
            return this.constructor.link(dict);
        }
    }
    __decorate([
        $mol_mem
    ], $mol_state_arg, "href", null);
    __decorate([
        $mol_mem
    ], $mol_state_arg, "href_normal", null);
    __decorate([
        $mol_mem
    ], $mol_state_arg, "dict", null);
    __decorate([
        $mol_mem_key
    ], $mol_state_arg, "value", null);
    __decorate([
        $mol_action
    ], $mol_state_arg, "go", null);
    $.$mol_state_arg = $mol_state_arg;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_link extends $.$mol_link {
            uri_toggle() {
                return this.current() ? this.uri_off() : this.uri();
            }
            uri() {
                return new this.$.$mol_state_arg(this.state_key()).link(this.arg());
            }
            uri_off() {
                const arg2 = {};
                for (let i in this.arg())
                    arg2[i] = null;
                return new this.$.$mol_state_arg(this.state_key()).link(arg2);
            }
            uri_native() {
                const base = this.$.$mol_state_arg.href();
                return new URL(this.uri(), base);
            }
            current() {
                const base = this.$.$mol_state_arg.href_normal();
                const target = this.uri_native().toString();
                if (base === target)
                    return true;
                const args = this.arg();
                const keys = Object.keys(args).filter(key => args[key] != null);
                if (keys.length === 0)
                    return false;
                for (const key of keys) {
                    if (this.$.$mol_state_arg.value(key) != args[key])
                        return false;
                }
                return true;
            }
            file_name() {
                return null;
            }
            minimal_height() {
                return Math.max(super.minimal_height(), 24);
            }
            external() {
                return this.uri_native().origin !== $mol_dom_context.location.origin;
            }
            target() {
                return this.external() ? '_blank' : '_self';
            }
            hint_safe() {
                try {
                    return this.hint();
                }
                catch (error) {
                    $mol_fail_log(error);
                    return '';
                }
            }
        }
        __decorate([
            $mol_mem
        ], $mol_link.prototype, "uri_toggle", null);
        __decorate([
            $mol_mem
        ], $mol_link.prototype, "uri", null);
        __decorate([
            $mol_mem
        ], $mol_link.prototype, "uri_off", null);
        __decorate([
            $mol_mem
        ], $mol_link.prototype, "uri_native", null);
        __decorate([
            $mol_mem
        ], $mol_link.prototype, "current", null);
        $$.$mol_link = $mol_link;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const { rem } = $mol_style_unit;
    $mol_style_define($mol_link, {
        textDecoration: 'none',
        color: $mol_theme.control,
        stroke: 'currentcolor',
        cursor: 'pointer',
        padding: $mol_gap.text,
        boxSizing: 'border-box',
        position: 'relative',
        minWidth: rem(2.5),
        gap: $mol_gap.space,
        border: {
            radius: $mol_gap.round,
        },
        ':hover': {
            background: {
                color: $mol_theme.hover,
            },
        },
        ':focus-visible': {
            outline: 'none',
            background: {
                color: $mol_theme.hover,
            },
        },
        ':active': {
            color: $mol_theme.focus,
        },
        '@': {
            mol_link_current: {
                'true': {
                    color: $mol_theme.current,
                    textShadow: '0 0',
                }
            }
        },
    });
})($ || ($ = {}));

;
	($.$mol_page) = class $mol_page extends ($.$mol_view) {
		tabindex(){
			return -1;
		}
		Logo(){
			return null;
		}
		title_content(){
			return [(this.Logo()), (this.title())];
		}
		Title(){
			const obj = new this.$.$mol_view();
			(obj.dom_name) = () => ("h1");
			(obj.sub) = () => ((this.title_content()));
			return obj;
		}
		tools(){
			return [];
		}
		Tools(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ((this.tools()));
			return obj;
		}
		head(){
			return [(this.Title()), (this.Tools())];
		}
		Head(){
			const obj = new this.$.$mol_view();
			(obj.minimal_height) = () => (64);
			(obj.dom_name) = () => ("header");
			(obj.sub) = () => ((this.head()));
			return obj;
		}
		body_scroll_top(next){
			return (this.Body().scroll_top(next));
		}
		body(){
			return [];
		}
		Body_content(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ((this.body()));
			return obj;
		}
		body_content(){
			return [(this.Body_content())];
		}
		Body(){
			const obj = new this.$.$mol_scroll();
			(obj.sub) = () => ((this.body_content()));
			return obj;
		}
		foot(){
			return [];
		}
		Foot(){
			const obj = new this.$.$mol_view();
			(obj.dom_name) = () => ("footer");
			(obj.sub) = () => ((this.foot()));
			return obj;
		}
		dom_name(){
			return "article";
		}
		attr(){
			return {...(super.attr()), "tabIndex": (this.tabindex())};
		}
		sub(){
			return [
				(this.Head()), 
				(this.Body()), 
				(this.Foot())
			];
		}
	};
	($mol_mem(($.$mol_page.prototype), "Title"));
	($mol_mem(($.$mol_page.prototype), "Tools"));
	($mol_mem(($.$mol_page.prototype), "Head"));
	($mol_mem(($.$mol_page.prototype), "Body_content"));
	($mol_mem(($.$mol_page.prototype), "Body"));
	($mol_mem(($.$mol_page.prototype), "Foot"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        const { per, rem } = $mol_style_unit;
        const { hsla, blur } = $mol_style_func;
        $mol_style_define($mol_page, {
            display: 'flex',
            flex: {
                basis: 'auto',
                direction: 'column',
            },
            position: 'relative',
            alignSelf: 'stretch',
            maxWidth: per(100),
            maxHeight: per(100),
            boxSizing: 'border-box',
            color: $mol_theme.text,
            ':focus': {
                outline: 'none',
            },
            Head: {
                display: 'flex',
                flexWrap: 'wrap',
                justifyContent: 'flex-end',
                flex: 'none',
                position: 'relative',
                margin: 0,
                minHeight: rem(4),
                padding: $mol_gap.block,
                background: {
                    color: $mol_theme.card,
                },
                border: {
                    radius: $mol_gap.round,
                },
                box: {
                    shadow: [
                        [0, `-0.5rem`, `0.5rem`, `-0.5rem`, hsla(0, 0, 0, .25)],
                        [0, `0.5rem`, `0.5rem`, `-0.5rem`, hsla(0, 0, 0, .25)],
                    ],
                },
                zIndex: 2,
                '@media': {
                    'print': {
                        box: {
                            shadow: [[0, `1px`, 0, 0, hsla(0, 0, 0, .25)]],
                        },
                    },
                },
            },
            Title: {
                minHeight: rem(2),
                margin: 0,
                padding: $mol_gap.text,
                gap: $mol_gap.text,
                wordBreak: 'normal',
                textShadow: '0 0',
                font: {
                    size: 'inherit',
                    weight: 'normal',
                },
                flex: {
                    grow: 1,
                    shrink: 1,
                    basis: 'auto',
                },
            },
            Tools: {
                flex: {
                    basis: 'auto',
                    grow: 0,
                    shrink: 1,
                },
                display: 'flex',
                justifyContent: 'flex-end',
                alignItems: 'flex-start',
                flexWrap: 'wrap',
                '@media': {
                    'print': {
                        display: 'none',
                    },
                },
            },
            Body: {
                flex: {
                    grow: 1000,
                    shrink: 1,
                    basis: per(100),
                },
            },
            Body_content: {
                padding: $mol_gap.block,
                flex: {
                    direction: 'column',
                    shrink: 1,
                    grow: 1,
                },
                justify: {
                    self: 'stretch',
                },
            },
            Foot: {
                display: 'flex',
                justifyContent: 'space-between',
                flex: 'none',
                margin: 0,
                background: {
                    color: $mol_theme.card,
                },
                border: {
                    radius: $mol_gap.round,
                },
                box: {
                    shadow: [
                        [0, `-0.5rem`, `0.5rem`, `-0.5rem`, hsla(0, 0, 0, .25)],
                        [0, `0.5rem`, `0.5rem`, `-0.5rem`, hsla(0, 0, 0, .25)],
                    ],
                },
                zIndex: 1,
                padding: $mol_gap.block,
                ':empty': {
                    display: 'none',
                },
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_book2_catalog) = class $mol_book2_catalog extends ($.$mol_book2) {
		Menu_title(){
			return (this.Menu().Title());
		}
		menu_title(){
			return "";
		}
		Menu_tools(){
			return (this.Menu().Tools());
		}
		Menu_logo(){
			return null;
		}
		menu_head(){
			return [(this.Menu_title()), (this.Menu_tools())];
		}
		menu_filter(next){
			if(next !== undefined) return next;
			return "";
		}
		Menu_filter(){
			const obj = new this.$.$mol_search();
			(obj.query) = (next) => ((this.menu_filter(next)));
			return obj;
		}
		Menu_links_empty(){
			const obj = new this.$.$mol_view();
			return obj;
		}
		arg(id){
			return {};
		}
		menu_link_arg(id){
			return (this.arg(id));
		}
		spread_title(id){
			return "";
		}
		Menu_link_title(id){
			const obj = new this.$.$mol_dimmer();
			(obj.needle) = () => ((this.menu_filter()));
			(obj.haystack) = () => ((this.spread_title(id)));
			return obj;
		}
		menu_link_content(id){
			return [(this.Menu_link_title(id))];
		}
		Menu_link(id){
			const obj = new this.$.$mol_link();
			(obj.arg) = () => ((this.menu_link_arg(id)));
			(obj.sub) = () => ((this.menu_link_content(id)));
			return obj;
		}
		menu_links(){
			return [(this.Menu_link("0"))];
		}
		Menu_links(){
			const obj = new this.$.$mol_list();
			(obj.Empty) = () => ((this.Menu_links_empty()));
			(obj.rows) = () => ((this.menu_links()));
			return obj;
		}
		menu_body(){
			return [(this.Menu_filter()), (this.Menu_links())];
		}
		menu_foot(){
			return [];
		}
		Menu(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ((this.menu_title()));
			(obj.Logo) = () => ((this.Menu_logo()));
			(obj.tools) = () => ([...(this.menu_tools()), ...(this.addon_tools())]);
			(obj.head) = () => ((this.menu_head()));
			(obj.body) = () => ((this.menu_body()));
			(obj.foot) = () => ((this.menu_foot()));
			return obj;
		}
		spread_close_arg(){
			return {};
		}
		Spread_close_icon(){
			const obj = new this.$.$mol_icon_close();
			return obj;
		}
		param(){
			return "";
		}
		spread(next){
			if(next !== undefined) return next;
			return "";
		}
		spreads(){
			return {};
		}
		Spread(id){
			const obj = new this.$.$mol_view();
			return obj;
		}
		Spread_default(){
			return null;
		}
		spread_ids(){
			return [];
		}
		menu_filter_enabled(){
			return false;
		}
		spread_ids_filtered(){
			return [];
		}
		menu_tools(){
			return [];
		}
		addon_tools(){
			return [];
		}
		pages(){
			return [(this.Menu())];
		}
		Spread_close(){
			const obj = new this.$.$mol_link();
			(obj.arg) = () => ((this.spread_close_arg()));
			(obj.hint) = () => ((this.$.$mol_locale.text("$mol_book2_catalog_Spread_close_hint")));
			(obj.sub) = () => ([(this.Spread_close_icon())]);
			return obj;
		}
	};
	($mol_mem(($.$mol_book2_catalog.prototype), "menu_filter"));
	($mol_mem(($.$mol_book2_catalog.prototype), "Menu_filter"));
	($mol_mem(($.$mol_book2_catalog.prototype), "Menu_links_empty"));
	($mol_mem_key(($.$mol_book2_catalog.prototype), "Menu_link_title"));
	($mol_mem_key(($.$mol_book2_catalog.prototype), "Menu_link"));
	($mol_mem(($.$mol_book2_catalog.prototype), "Menu_links"));
	($mol_mem(($.$mol_book2_catalog.prototype), "Menu"));
	($mol_mem(($.$mol_book2_catalog.prototype), "Spread_close_icon"));
	($mol_mem(($.$mol_book2_catalog.prototype), "spread"));
	($mol_mem_key(($.$mol_book2_catalog.prototype), "Spread"));
	($mol_mem(($.$mol_book2_catalog.prototype), "Spread_close"));


;
"use strict";
var $;
(function ($) {
    function $mol_match_text(query, values) {
        const tags = query.toLowerCase().trim().split(/\s+/).filter(tag => tag);
        if (tags.length === 0)
            return () => true;
        return (variant) => {
            const vals = values(variant);
            return tags.every(tag => vals.some(val => val.toLowerCase().indexOf(tag) >= 0));
        };
    }
    $.$mol_match_text = $mol_match_text;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_book2_catalog extends $.$mol_book2_catalog {
            pages() {
                const spread = this.spread() === '' ? this.Spread_default() : this.Spread(this.spread());
                return [
                    this.Menu(),
                    ...spread
                        ? spread instanceof $mol_book2
                            ? spread.pages()
                            : [spread]
                        : [],
                ];
            }
            spread_ids() {
                return Object.keys(this.spreads());
            }
            menu_body() {
                return [
                    ...this.menu_filter_enabled() ? [this.Menu_filter()] : [],
                    this.Menu_links(),
                ];
            }
            menu_filter_enabled() {
                return this.spread_ids().length >= 10;
            }
            menu_links() {
                return this.spread_ids_filtered()
                    .map(spread => this.Menu_link(spread));
            }
            spread_ids_filtered() {
                return this.spread_ids()
                    .filter($mol_match_text(this.menu_filter(), spread => [this.spread_title(spread)]));
            }
            Spread(id) {
                return this.spreads()[id];
            }
            Spread_default() {
                return this.spreads()[''];
            }
            spread(next) {
                return this.$.$mol_state_arg.value(this.param(), next) ?? '';
            }
            arg(spread) {
                return { [this.param()]: spread || null };
            }
            spread_close_arg() {
                return { [this.param()]: null };
            }
            spread_title(spread) {
                const page = this.Spread(spread);
                return page instanceof $mol_book2
                    && page.menu_title()
                    || page.title()
                    || spread;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_book2_catalog.prototype, "pages", null);
        __decorate([
            $mol_mem
        ], $mol_book2_catalog.prototype, "spread_ids", null);
        __decorate([
            $mol_mem
        ], $mol_book2_catalog.prototype, "menu_body", null);
        __decorate([
            $mol_mem
        ], $mol_book2_catalog.prototype, "menu_links", null);
        __decorate([
            $mol_mem
        ], $mol_book2_catalog.prototype, "spread_ids_filtered", null);
        __decorate([
            $mol_mem
        ], $mol_book2_catalog.prototype, "spread", null);
        $$.$mol_book2_catalog = $mol_book2_catalog;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/book2/catalog/catalog.view.css", "[mol_book2_catalog_menu_filter] {\n\tflex-shrink: 0;\n\tflex-grow: 0;\n\talign-self: stretch;\n}\n\n");
})($ || ($ = {}));

;
	($.$mol_theme_auto) = class $mol_theme_auto extends ($.$mol_plugin) {
		theme(){
			return "";
		}
		attr(){
			return {"mol_theme": (this.theme())};
		}
	};


;
"use strict";
var $;
(function ($) {
    class $mol_media extends $mol_object2 {
        static match(query, next) {
            if (next !== undefined)
                return next;
            const res = this.$.$mol_dom_context.matchMedia?.(query) ?? {};
            res.onchange = () => this.match(query, res.matches);
            return res.matches;
        }
    }
    __decorate([
        $mol_mem_key
    ], $mol_media, "match", null);
    $.$mol_media = $mol_media;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function parse(theme) {
        if (theme === 'true')
            return true;
        if (theme === 'false')
            return false;
        return null;
    }
    function $mol_lights(next) {
        const arg = parse(this.$mol_state_arg.value('mol_lights'));
        const base = this.$mol_media.match('(prefers-color-scheme: light)');
        if (next === undefined) {
            return arg ?? this.$mol_state_local.value('$mol_lights') ?? base;
        }
        else {
            if (arg === null) {
                this.$mol_state_local.value('$mol_lights', next === base ? null : next);
            }
            else {
                this.$mol_state_arg.value('mol_lights', String(next));
            }
            return next;
        }
    }
    $.$mol_lights = $mol_lights;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_theme_auto extends $.$mol_theme_auto {
            theme() {
                return this.$.$mol_lights() ? '$mol_theme_light' : '$mol_theme_dark';
            }
        }
        $$.$mol_theme_auto = $mol_theme_auto;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_check) = class $mol_check extends ($.$mol_button_minor) {
		checked(next){
			if(next !== undefined) return next;
			return false;
		}
		aria_checked(){
			return "false";
		}
		aria_role(){
			return "checkbox";
		}
		Icon(){
			return null;
		}
		title(){
			return "";
		}
		Title(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.title())]);
			return obj;
		}
		label(){
			return [(this.Title())];
		}
		attr(){
			return {
				...(super.attr()), 
				"mol_check_checked": (this.checked()), 
				"aria-checked": (this.aria_checked()), 
				"role": (this.aria_role())
			};
		}
		sub(){
			return [(this.Icon()), (this.label())];
		}
	};
	($mol_mem(($.$mol_check.prototype), "checked"));
	($mol_mem(($.$mol_check.prototype), "Title"));


;
"use strict";
var $;
(function ($) {
    function $mol_maybe(value) {
        return (value == null) ? [] : [value];
    }
    $.$mol_maybe = $mol_maybe;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/check/check.css", "[mol_check] {\n\tflex: 0 0 auto;\n\tjustify-content: flex-start;\n\talign-content: center;\n\t/* align-items: flex-start; */\n\tborder: none;\n\tfont-weight: inherit;\n\tbox-shadow: none;\n\ttext-align: left;\n\tdisplay: inline-flex;\n\tflex-wrap: nowrap;\n}\n\n[mol_check_title] {\n\tflex-shrink: 1;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_check extends $.$mol_check {
            click(next) {
                if (next?.defaultPrevented)
                    return;
                this.checked(!this.checked());
                if (next)
                    next.preventDefault();
            }
            sub() {
                return [
                    ...$mol_maybe(this.Icon()),
                    ...this.label(),
                ];
            }
            label() {
                return this.title() ? super.label() : [];
            }
            aria_checked() {
                return String(this.checked());
            }
        }
        $$.$mol_check = $mol_check;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_pick) = class $mol_pick extends ($.$mol_pop) {
		keydown(next){
			if(next !== undefined) return next;
			return null;
		}
		trigger_enabled(){
			return true;
		}
		clicks(next){
			if(next !== undefined) return next;
			return null;
		}
		trigger_content(){
			return [(this.title())];
		}
		hint(){
			return "";
		}
		Trigger(){
			const obj = new this.$.$mol_check();
			(obj.minimal_width) = () => (40);
			(obj.minimal_height) = () => (40);
			(obj.enabled) = () => ((this.trigger_enabled()));
			(obj.checked) = (next) => ((this.showed(next)));
			(obj.clicks) = (next) => ((this.clicks(next)));
			(obj.sub) = () => ((this.trigger_content()));
			(obj.hint) = () => ((this.hint()));
			return obj;
		}
		event(){
			return {...(super.event()), "keydown": (next) => (this.keydown(next))};
		}
		Anchor(){
			return (this.Trigger());
		}
	};
	($mol_mem(($.$mol_pick.prototype), "keydown"));
	($mol_mem(($.$mol_pick.prototype), "clicks"));
	($mol_mem(($.$mol_pick.prototype), "Trigger"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_pick extends $.$mol_pick {
            keydown(event) {
                if (!this.trigger_enabled())
                    return;
                if (event.defaultPrevented)
                    return;
                if (event.keyCode === $mol_keyboard_code.escape) {
                    if (!this.showed())
                        return;
                    event.preventDefault();
                    this.showed(false);
                }
            }
        }
        $$.$mol_pick = $mol_pick;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/pick/pick.view.css", "[mol_pick_trigger] {\n\talign-items: center;\n\tflex-grow: 1;\n}\n");
})($ || ($ = {}));

;
	($.$mol_icon_dots_vertical) = class $mol_icon_dots_vertical extends ($.$mol_icon) {
		path(){
			return "M12,16A2,2 0 0,1 14,18A2,2 0 0,1 12,20A2,2 0 0,1 10,18A2,2 0 0,1 12,16M12,10A2,2 0 0,1 14,12A2,2 0 0,1 12,14A2,2 0 0,1 10,12A2,2 0 0,1 12,10M12,4A2,2 0 0,1 14,6A2,2 0 0,1 12,8A2,2 0 0,1 10,6A2,2 0 0,1 12,4Z";
		}
	};


;
"use strict";

;
	($.$mol_select) = class $mol_select extends ($.$mol_pick) {
		event_select(id, next){
			if(next !== undefined) return next;
			return null;
		}
		option_label(id){
			return "";
		}
		filter_pattern(next){
			if(next !== undefined) return next;
			return "";
		}
		Option_label(id){
			const obj = new this.$.$mol_dimmer();
			(obj.haystack) = () => ((this.option_label(id)));
			(obj.needle) = () => ((this.filter_pattern()));
			return obj;
		}
		option_content(id){
			return [(this.Option_label(id))];
		}
		no_options_message(){
			return (this.$.$mol_locale.text("$mol_select_no_options_message"));
		}
		nav_components(){
			return [];
		}
		option_focused(next){
			if(next !== undefined) return next;
			return null;
		}
		nav_cycle(next){
			if(next !== undefined) return next;
			return true;
		}
		Nav(){
			const obj = new this.$.$mol_nav();
			(obj.keys_y) = () => ((this.nav_components()));
			(obj.current_y) = (next) => ((this.option_focused(next)));
			(obj.cycle) = (next) => ((this.nav_cycle(next)));
			return obj;
		}
		menu_content(){
			return [];
		}
		Menu(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ((this.menu_content()));
			return obj;
		}
		Bubble_pane(){
			const obj = new this.$.$mol_scroll();
			(obj.sub) = () => ([(this.Menu())]);
			return obj;
		}
		filter_hint(){
			return (this.$.$mol_locale.text("$mol_select_filter_hint"));
		}
		submit(next){
			if(next !== undefined) return next;
			return null;
		}
		enabled(){
			return true;
		}
		dictionary(next){
			if(next !== undefined) return next;
			return {};
		}
		options(){
			return [];
		}
		value(next){
			if(next !== undefined) return next;
			return "";
		}
		option_label_default(){
			return "";
		}
		Option_row(id){
			const obj = new this.$.$mol_button_minor();
			(obj.event_click) = (next) => ((this.event_select(id, next)));
			(obj.sub) = () => ((this.option_content(id)));
			return obj;
		}
		No_options(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.no_options_message())]);
			return obj;
		}
		plugins(){
			return [...(super.plugins()), (this.Nav())];
		}
		hint(){
			return (this.$.$mol_locale.text("$mol_select_hint"));
		}
		bubble_content(){
			return [(this.Filter()), (this.Bubble_pane())];
		}
		Filter(){
			const obj = new this.$.$mol_search();
			(obj.query) = (next) => ((this.filter_pattern(next)));
			(obj.hint) = () => ((this.filter_hint()));
			(obj.submit) = (next) => ((this.submit(next)));
			(obj.enabled) = () => ((this.enabled()));
			return obj;
		}
		Trigger_icon(){
			const obj = new this.$.$mol_icon_dots_vertical();
			return obj;
		}
	};
	($mol_mem_key(($.$mol_select.prototype), "event_select"));
	($mol_mem(($.$mol_select.prototype), "filter_pattern"));
	($mol_mem_key(($.$mol_select.prototype), "Option_label"));
	($mol_mem(($.$mol_select.prototype), "option_focused"));
	($mol_mem(($.$mol_select.prototype), "nav_cycle"));
	($mol_mem(($.$mol_select.prototype), "Nav"));
	($mol_mem(($.$mol_select.prototype), "Menu"));
	($mol_mem(($.$mol_select.prototype), "Bubble_pane"));
	($mol_mem(($.$mol_select.prototype), "submit"));
	($mol_mem(($.$mol_select.prototype), "dictionary"));
	($mol_mem(($.$mol_select.prototype), "value"));
	($mol_mem_key(($.$mol_select.prototype), "Option_row"));
	($mol_mem(($.$mol_select.prototype), "No_options"));
	($mol_mem(($.$mol_select.prototype), "Filter"));
	($mol_mem(($.$mol_select.prototype), "Trigger_icon"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_select extends $.$mol_select {
            filter_pattern(next) {
                this.focused();
                return next || '';
            }
            open() {
                this.showed(true);
            }
            options() {
                return Object.keys(this.dictionary());
            }
            options_filtered() {
                let options = this.options();
                options = options.filter($mol_match_text(this.filter_pattern(), (id) => [this.option_label(id)]));
                const index = options.indexOf(this.value());
                if (index >= 0)
                    options = [...options.slice(0, index), ...options.slice(index + 1)];
                return options;
            }
            option_label(id) {
                const value = this.dictionary()[id];
                return (value == null ? id : value) || this.option_label_default();
            }
            option_rows() {
                return this.options_filtered().map((option) => this.Option_row(option));
            }
            option_focused(component) {
                if (component == null) {
                    for (let comp of this.nav_components()) {
                        if (comp && comp.focused())
                            return comp;
                    }
                    return null;
                }
                if (this.showed()) {
                    component.focused(true);
                }
                return component;
            }
            event_select(id, event) {
                this.value(id);
                this.showed(false);
                event?.preventDefault();
            }
            nav_components() {
                if (this.options().length > 1 && this.Filter()) {
                    return [this.Filter(), ...this.option_rows()];
                }
                else {
                    return this.option_rows();
                }
            }
            trigger_content() {
                return [
                    ...this.option_content(this.value()),
                    this.Trigger_icon(),
                ];
            }
            menu_content() {
                return [
                    ...this.option_rows(),
                    ...(this.options_filtered().length === 0) ? [this.No_options()] : []
                ];
            }
        }
        __decorate([
            $mol_mem
        ], $mol_select.prototype, "filter_pattern", null);
        __decorate([
            $mol_mem
        ], $mol_select.prototype, "options", null);
        __decorate([
            $mol_mem
        ], $mol_select.prototype, "options_filtered", null);
        __decorate([
            $mol_mem
        ], $mol_select.prototype, "option_focused", null);
        $$.$mol_select = $mol_select;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/select/select.view.css", "[mol_select] {\n\tdisplay: flex;\n\tword-break: normal;\n\talign-self: flex-start;\n}\n\n[mol_select_option_row] {\n\tmin-width: 100%;\n\tpadding: 0;\n\tjustify-content: flex-start;\n}\n\n[mol_select_bubble] {\n\tmin-width: 100%;\n}\n\n[mol_select_filter] {\n\tflex: 1 0 auto;\n\talign-self: stretch;\n}\n\n[mol_select_option_label] {\n\tpadding: var(--mol_gap_text);\n\ttext-align: left;\n\tmin-height: 1.5em;\n\tdisplay: block;\n\twhite-space: nowrap;\n}\n\n[mol_select_clear_option_content] {\n\tpadding: .5em 1rem .5rem 0;\n\ttext-align: left;\n\tbox-shadow: var(--mol_theme_line);\n\tflex: 1 0 auto;\n}\n\n[mol_select_no_options] {\n\tpadding: var(--mol_gap_text);\n\ttext-align: left;\n\tdisplay: block;\n\tcolor: var(--mol_theme_shade);\n}\n\n[mol_select_trigger] {\n\tpadding: 0;\n\tflex: 1 1 auto;\n\tdisplay: flex;\n}\n\n[mol_select_trigger] > * {\n\tmargin-right: -1rem;\n}\n\n[mol_select_trigger] > *:last-child {\n\tmargin-right: 0;\n}\n\n[mol_select_menu] {\n\tdisplay: flex;\n\tflex-direction: column;\n}\n\n");
})($ || ($ = {}));

;
	($.$mol_avatar) = class $mol_avatar extends ($.$mol_icon) {
		view_box(){
			return "0 0 24 24";
		}
		id(){
			return "";
		}
		path(){
			return "M 12 12 l 0 0 M 0 0 l 0 0 M 24 24 l 0 0 M 0 24 l 0 0 M 24 0 l 0 0";
		}
	};


;
"use strict";
var $;
(function ($) {
    function $mol_hash_string(str, seed = 0) {
        let h1 = 0xdeadbeef ^ seed;
        let h2 = 0x41c6ce57 ^ seed;
        for (let i = 0; i < str.length; i++) {
            const ch = str.charCodeAt(i);
            h1 = Math.imul(h1 ^ ch, 2654435761);
            h2 = Math.imul(h2 ^ ch, 1597334677);
        }
        h1 = Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^ Math.imul(h2 ^ (h2 >>> 13), 3266489909);
        h2 = Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^ Math.imul(h1 ^ (h1 >>> 13), 3266489909);
        return 4294967296 * (((1 << 16) - 1) & h2) + (h1 >>> 0);
    }
    $.$mol_hash_string = $mol_hash_string;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_avatar extends $.$mol_avatar {
            path() {
                const id = $mol_hash_string(this.id());
                const p = 2.1;
                const m = 2.7;
                let path = '';
                for (let x = 0; x < 4; ++x) {
                    for (let y = 0; y < 8; ++y) {
                        if ((id >> (x + y * 7)) & 1) {
                            const mxp = Math.ceil(m * x + p);
                            const myp = Math.ceil(m * y + p);
                            path += `M ${mxp} ${myp} l 0 0 ` + `M ${24 - mxp} ${myp} l 0 0 `;
                        }
                    }
                }
                return path;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_avatar.prototype, "path", null);
        $$.$mol_avatar = $mol_avatar;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/avatar/avatar.view.css", "[mol_avatar] {\n\tstroke-linecap: round;\n\tstroke-width: 3.5px;\n\tfill: none;\n\tstroke: currentColor;\n\t/* width: 1.5rem;\n\theight: 1.5rem;\n\tmargin: 0 -.25rem; */\n\t/* box-shadow: 0 0 0 1px var(--mol_theme_line); */\n}\n");
})($ || ($ = {}));

;
	($.$mol_icon_sync) = class $mol_icon_sync extends ($.$mol_icon) {
		path(){
			return "M12,18A6,6 0 0,1 6,12C6,11 6.25,10.03 6.7,9.2L5.24,7.74C4.46,8.97 4,10.43 4,12A8,8 0 0,0 12,20V23L16,19L12,15M12,4V1L8,5L12,9V6A6,6 0 0,1 18,12C18,13 17.75,13.97 17.3,14.8L18.76,16.26C19.54,15.03 20,13.57 20,12A8,8 0 0,0 12,4Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_sync_off) = class $mol_icon_sync_off extends ($.$mol_icon) {
		path(){
			return "M20,4H14V10L16.24,7.76C17.32,8.85 18,10.34 18,12C18,13 17.75,13.94 17.32,14.77L18.78,16.23C19.55,15 20,13.56 20,12C20,9.79 19.09,7.8 17.64,6.36L20,4M2.86,5.41L5.22,7.77C4.45,9 4,10.44 4,12C4,14.21 4.91,16.2 6.36,17.64L4,20H10V14L7.76,16.24C6.68,15.15 6,13.66 6,12C6,11 6.25,10.06 6.68,9.23L14.76,17.31C14.5,17.44 14.26,17.56 14,17.65V19.74C14.79,19.53 15.54,19.2 16.22,18.78L18.58,21.14L19.85,19.87L4.14,4.14L2.86,5.41M10,6.35V4.26C9.2,4.47 8.45,4.8 7.77,5.22L9.23,6.68C9.5,6.56 9.73,6.44 10,6.35Z";
		}
	};


;
"use strict";

;
	($.$hyoo_crus_status) = class $hyoo_crus_status extends ($.$mol_select) {
		master_id(id){
			return "";
		}
		Option_logo(id){
			const obj = new this.$.$mol_avatar();
			(obj.id) = () => ((this.master_id(id)));
			return obj;
		}
		master_link(){
			return "";
		}
		Well(){
			const obj = new this.$.$mol_avatar();
			(obj.id) = () => ((this.master_link()));
			return obj;
		}
		Fail(){
			const obj = new this.$.$mol_icon_sync_off();
			return obj;
		}
		link_content(){
			return [(this.Well()), (this.Fail())];
		}
		hint(){
			return "Sync status";
		}
		message(){
			return (this.hint());
		}
		Link(){
			const obj = new this.$.$mol_link();
			(obj.uri) = () => ((this.master_link()));
			(obj.sub) = () => ((this.link_content()));
			(obj.hint) = () => ((this.message()));
			return obj;
		}
		minimal_width(){
			return 40;
		}
		minimal_height(){
			return 40;
		}
		Filter(){
			return null;
		}
		option_content(id){
			return [(this.Option_logo(id)), (this.option_label(id))];
		}
		trigger_content(){
			return [(this.Link())];
		}
	};
	($mol_mem_key(($.$hyoo_crus_status.prototype), "Option_logo"));
	($mol_mem(($.$hyoo_crus_status.prototype), "Well"));
	($mol_mem(($.$hyoo_crus_status.prototype), "Fail"));
	($mol_mem(($.$hyoo_crus_status.prototype), "Link"));


;
"use strict";
var $;
(function ($) {
    class $mol_wire_set extends Set {
        pub = new $mol_wire_pub;
        has(value) {
            this.pub.promote();
            return super.has(value);
        }
        entries() {
            this.pub.promote();
            return super.entries();
        }
        keys() {
            this.pub.promote();
            return super.keys();
        }
        values() {
            this.pub.promote();
            return super.values();
        }
        forEach(task, self) {
            this.pub.promote();
            super.forEach(task, self);
        }
        [Symbol.iterator]() {
            this.pub.promote();
            return super[Symbol.iterator]();
        }
        get size() {
            this.pub.promote();
            return super.size;
        }
        add(value) {
            if (super.has(value))
                return this;
            super.add(value);
            this.pub.emit();
            return this;
        }
        delete(value) {
            const res = super.delete(value);
            if (res)
                this.pub.emit();
            return res;
        }
        clear() {
            if (!super.size)
                return;
            super.clear();
            this.pub.emit();
        }
        item(val, next) {
            if (next === undefined)
                return this.has(val);
            if (next)
                this.add(val);
            else
                this.delete(val);
            return next;
        }
    }
    $.$mol_wire_set = $mol_wire_set;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    function $mol_data_tagged(config) {
        return config;
    }
    $.$mol_data_tagged = $mol_data_tagged;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_base64_encode(src) {
        throw new Error('Not implemented');
    }
    $.$mol_base64_encode = $mol_base64_encode;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_base64_encode_node(str) {
        if (!str)
            return '';
        if (Buffer.isBuffer(str))
            return str.toString('base64');
        return Buffer.from(str).toString('base64');
    }
    $.$mol_base64_encode_node = $mol_base64_encode_node;
    $.$mol_base64_encode = $mol_base64_encode_node;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_base64_decode(base64) {
        throw new Error('Not implemented');
    }
    $.$mol_base64_decode = $mol_base64_decode;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_base64_decode_node(base64Str) {
        base64Str = base64Str.replace(/-/g, '+').replace(/_/g, '/');
        const buffer = Buffer.from(base64Str, 'base64');
        return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    }
    $.$mol_base64_decode_node = $mol_base64_decode_node;
    $.$mol_base64_decode = $mol_base64_decode_node;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_base64_ae_encode(buffer) {
        return $mol_base64_encode(buffer).replace(/\+/g, 'æ').replace(/\//g, 'Æ').replace(/=/g, '');
    }
    $.$mol_base64_ae_encode = $mol_base64_ae_encode;
    function $mol_base64_ae_decode(str) {
        return $mol_base64_decode(str.replace(/æ/g, '+').replace(/Æ/g, '/'));
    }
    $.$mol_base64_ae_decode = $mol_base64_ae_decode;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$hyoo_crus_ref = $mol_data_tagged({ $hyoo_crus_ref: (val) => {
            if (typeof val === 'string')
                val = Symbol.for(val.replace(/_+$/, ''));
            if (/^(([a-zæA-ZÆ0-9]{8})?_){0,3}([a-zæA-ZÆ0-9]{8})?$/.test(val.description))
                return val;
            $mol_fail(new Error(`Wrong ref (${val.description})`));
        } }).$hyoo_crus_ref;
    function $hyoo_crus_ref_check(val) {
        try {
            $.$hyoo_crus_ref(val);
            return val;
        }
        catch {
            return '';
        }
    }
    $.$hyoo_crus_ref_check = $hyoo_crus_ref_check;
    function $hyoo_crus_ref_lord(ref) {
        return $.$hyoo_crus_ref(ref.description.split('_').slice(0, 2).join('_'));
    }
    $.$hyoo_crus_ref_lord = $hyoo_crus_ref_lord;
    function $hyoo_crus_ref_land(ref) {
        return $.$hyoo_crus_ref(ref.description.split('_').slice(0, 3).join('_').replace(/_$/, ''));
    }
    $.$hyoo_crus_ref_land = $hyoo_crus_ref_land;
    function $hyoo_crus_ref_peer(ref) {
        return ref.description.split('_')[0] ?? '';
    }
    $.$hyoo_crus_ref_peer = $hyoo_crus_ref_peer;
    function $hyoo_crus_ref_area(ref) {
        return ref.description.split('_')[2] ?? '';
    }
    $.$hyoo_crus_ref_area = $hyoo_crus_ref_area;
    function $hyoo_crus_ref_head(ref) {
        return ref.description.split('_')[3] ?? '';
    }
    $.$hyoo_crus_ref_head = $hyoo_crus_ref_head;
    function $hyoo_crus_ref_encode(ref) {
        return $mol_base64_ae_decode((ref.description || '_')
            .split('_')
            .map(numb => numb || 'AAAAAAAA')
            .join(''));
    }
    $.$hyoo_crus_ref_encode = $hyoo_crus_ref_encode;
    function $hyoo_crus_ref_decode(bin) {
        return $.$hyoo_crus_ref([...$mol_base64_ae_encode(bin).match(/(.{8})/g) ?? []]
            .map(numb => numb === 'AAAAAAAA' ? '' : numb)
            .join('_').replace(/_+$/, ''));
    }
    $.$hyoo_crus_ref_decode = $hyoo_crus_ref_decode;
    function $hyoo_crus_ref_relate(base, ref) {
        base = $hyoo_crus_ref_land(base);
        if ($hyoo_crus_ref_land(ref) !== base)
            return ref;
        const head = $hyoo_crus_ref_head(ref);
        return $.$hyoo_crus_ref(head ? '___' + head : '');
    }
    $.$hyoo_crus_ref_relate = $hyoo_crus_ref_relate;
    function $hyoo_crus_ref_resolve(base, ref) {
        if (!ref.description)
            return $hyoo_crus_ref_land(base);
        if (!ref.description.startsWith('___'))
            return ref;
        const parts = base.description.split('_').slice(0, 3);
        while (parts.length < 3)
            parts.push('');
        parts.push(ref.description.slice(3));
        return $.$hyoo_crus_ref(parts.join('_'));
    }
    $.$hyoo_crus_ref_resolve = $hyoo_crus_ref_resolve;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    let $mol_rest_code;
    (function ($mol_rest_code) {
        $mol_rest_code[$mol_rest_code["Continue"] = 100] = "Continue";
        $mol_rest_code[$mol_rest_code["Switching_Protocols"] = 101] = "Switching_Protocols";
        $mol_rest_code[$mol_rest_code["Processing"] = 102] = "Processing";
        $mol_rest_code[$mol_rest_code["OK"] = 200] = "OK";
        $mol_rest_code[$mol_rest_code["Created"] = 201] = "Created";
        $mol_rest_code[$mol_rest_code["Accepted"] = 202] = "Accepted";
        $mol_rest_code[$mol_rest_code["Non_Authoritative_Information"] = 203] = "Non_Authoritative_Information";
        $mol_rest_code[$mol_rest_code["No_Content"] = 204] = "No_Content";
        $mol_rest_code[$mol_rest_code["Reset_Content"] = 205] = "Reset_Content";
        $mol_rest_code[$mol_rest_code["Partial_Content"] = 206] = "Partial_Content";
        $mol_rest_code[$mol_rest_code["Multi_Status"] = 207] = "Multi_Status";
        $mol_rest_code[$mol_rest_code["Already_Reported"] = 208] = "Already_Reported";
        $mol_rest_code[$mol_rest_code["IM_Used"] = 226] = "IM_Used";
        $mol_rest_code[$mol_rest_code["Multiple_Choices"] = 300] = "Multiple_Choices";
        $mol_rest_code[$mol_rest_code["Moved_Permanently"] = 301] = "Moved_Permanently";
        $mol_rest_code[$mol_rest_code["Found"] = 302] = "Found";
        $mol_rest_code[$mol_rest_code["See_Other"] = 303] = "See_Other";
        $mol_rest_code[$mol_rest_code["Not_Modified"] = 304] = "Not_Modified";
        $mol_rest_code[$mol_rest_code["Use_Proxy"] = 305] = "Use_Proxy";
        $mol_rest_code[$mol_rest_code["Temporary_Redirect"] = 307] = "Temporary_Redirect";
        $mol_rest_code[$mol_rest_code["Bad_Request"] = 400] = "Bad_Request";
        $mol_rest_code[$mol_rest_code["Unauthorized"] = 401] = "Unauthorized";
        $mol_rest_code[$mol_rest_code["Payment_Required"] = 402] = "Payment_Required";
        $mol_rest_code[$mol_rest_code["Forbidden"] = 403] = "Forbidden";
        $mol_rest_code[$mol_rest_code["Not_Found"] = 404] = "Not_Found";
        $mol_rest_code[$mol_rest_code["Method_Not_Allowed"] = 405] = "Method_Not_Allowed";
        $mol_rest_code[$mol_rest_code["Not_Acceptable"] = 406] = "Not_Acceptable";
        $mol_rest_code[$mol_rest_code["Proxy_Authentication_Required"] = 407] = "Proxy_Authentication_Required";
        $mol_rest_code[$mol_rest_code["Request_Timeout"] = 408] = "Request_Timeout";
        $mol_rest_code[$mol_rest_code["Conflict"] = 409] = "Conflict";
        $mol_rest_code[$mol_rest_code["Gone"] = 410] = "Gone";
        $mol_rest_code[$mol_rest_code["Length_Required"] = 411] = "Length_Required";
        $mol_rest_code[$mol_rest_code["Precondition_Failed"] = 412] = "Precondition_Failed";
        $mol_rest_code[$mol_rest_code["Request_Entity_Too_Large"] = 413] = "Request_Entity_Too_Large";
        $mol_rest_code[$mol_rest_code["Request_URI_Too_Long"] = 414] = "Request_URI_Too_Long";
        $mol_rest_code[$mol_rest_code["Unsupported_Media_Type"] = 415] = "Unsupported_Media_Type";
        $mol_rest_code[$mol_rest_code["Requested_Range_Not_Satisfiable"] = 416] = "Requested_Range_Not_Satisfiable";
        $mol_rest_code[$mol_rest_code["Expectation_Failed"] = 417] = "Expectation_Failed";
        $mol_rest_code[$mol_rest_code["Teapot"] = 418] = "Teapot";
        $mol_rest_code[$mol_rest_code["Unprocessable_Entity"] = 422] = "Unprocessable_Entity";
        $mol_rest_code[$mol_rest_code["Locked"] = 423] = "Locked";
        $mol_rest_code[$mol_rest_code["Failed_Dependency"] = 424] = "Failed_Dependency";
        $mol_rest_code[$mol_rest_code["Upgrade_Required"] = 426] = "Upgrade_Required";
        $mol_rest_code[$mol_rest_code["Precondition_Required"] = 428] = "Precondition_Required";
        $mol_rest_code[$mol_rest_code["Too_Many_Requests"] = 429] = "Too_Many_Requests";
        $mol_rest_code[$mol_rest_code["Request_Header_Fields_Too_Large"] = 431] = "Request_Header_Fields_Too_Large";
        $mol_rest_code[$mol_rest_code["Unavailable_For_Legal_Reasons"] = 451] = "Unavailable_For_Legal_Reasons";
        $mol_rest_code[$mol_rest_code["Internal_Server_Error"] = 500] = "Internal_Server_Error";
        $mol_rest_code[$mol_rest_code["Not_Implemented"] = 501] = "Not_Implemented";
        $mol_rest_code[$mol_rest_code["Bad_Gateway"] = 502] = "Bad_Gateway";
        $mol_rest_code[$mol_rest_code["Service_Unavailable"] = 503] = "Service_Unavailable";
        $mol_rest_code[$mol_rest_code["Gateway_Timeout"] = 504] = "Gateway_Timeout";
        $mol_rest_code[$mol_rest_code["HTTP_Version_Not_Supported"] = 505] = "HTTP_Version_Not_Supported";
        $mol_rest_code[$mol_rest_code["Insufficient_Storage"] = 507] = "Insufficient_Storage";
        $mol_rest_code[$mol_rest_code["Loop_Detected"] = 508] = "Loop_Detected";
        $mol_rest_code[$mol_rest_code["Not_Extended"] = 510] = "Not_Extended";
        $mol_rest_code[$mol_rest_code["Network_Authentication_Required"] = 511] = "Network_Authentication_Required";
        $mol_rest_code[$mol_rest_code["Network_Read_Timeout_Error"] = 598] = "Network_Read_Timeout_Error";
        $mol_rest_code[$mol_rest_code["Network_Connect_Timeout_Error"] = 599] = "Network_Connect_Timeout_Error";
    })($mol_rest_code = $.$mol_rest_code || ($.$mol_rest_code = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_dom_serialize(node) {
        const serializer = new $mol_dom_context.XMLSerializer;
        return serializer.serializeToString(node);
    }
    $.$mol_dom_serialize = $mol_dom_serialize;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_rest_port extends $mol_object {
        send_code(code) { }
        send_type(mime) { }
        send_data(data) {
            if (data === null)
                return this.send_nil();
            if (typeof data === 'string')
                return this.send_text(data);
            if (data instanceof Uint8Array)
                return this.send_bin(data);
            if (data instanceof $mol_dom_context.Element)
                return this.send_dom(data);
            return this.send_json(data);
        }
        send_nil() {
            this.send_code(204);
        }
        send_bin(data) {
            this.send_code(200);
            this.send_type('application/octet-stream');
        }
        send_text(data) {
            this.send_code(200);
            this.send_type('text/plain;charset=utf-8');
            this.send_bin($mol_charset_encode(data));
        }
        send_json(data) {
            this.send_code(200);
            this.send_type('application/json');
            this.send_text(JSON.stringify(data));
        }
        send_dom(data) {
            this.send_code(200);
            this.send_type('text/html;charset=utf-8');
            this.send_text($mol_dom_serialize(data));
        }
        static make(config) {
            return super.make(config);
        }
    }
    __decorate([
        $mol_action
    ], $mol_rest_port.prototype, "send_data", null);
    __decorate([
        $mol_action
    ], $mol_rest_port.prototype, "send_nil", null);
    __decorate([
        $mol_action
    ], $mol_rest_port.prototype, "send_bin", null);
    __decorate([
        $mol_action
    ], $mol_rest_port.prototype, "send_text", null);
    __decorate([
        $mol_action
    ], $mol_rest_port.prototype, "send_json", null);
    __decorate([
        $mol_action
    ], $mol_rest_port.prototype, "send_dom", null);
    __decorate([
        ($mol_action)
    ], $mol_rest_port, "make", null);
    $.$mol_rest_port = $mol_rest_port;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_rest_port_ws extends $mol_rest_port {
    }
    $.$mol_rest_port_ws = $mol_rest_port_ws;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_buffer extends DataView {
        static from(array) {
            if (typeof array === 'number')
                array = new Uint8Array(array);
            if (typeof array === 'string')
                array = $mol_base64_ae_decode(array);
            return new this(array.buffer, array.byteOffset, array.byteLength);
        }
        static toString() {
            return $$.$mol_func_name(this);
        }
        getUint48(offset, LE = false) {
            if (offset % 4) {
                return this.getUint16(offset, LE) + this.getUint32(offset + 2, LE) * 2 ** 16;
            }
            else {
                return this.getUint32(offset, LE) + this.getUint16(offset + 4, LE) * 2 ** 32;
            }
        }
        setUint48(offset, value, LE = false) {
            if (offset % 4) {
                this.setUint16(offset, value & ((1 << 16) - 1), LE);
                this.setUint32(offset + 2, (value / 2 ** 16) | 0, LE);
            }
            else {
                this.setUint32(offset, value | 0, LE);
                this.setUint16(offset + 4, (value / 2 ** 32) | 0, LE);
            }
        }
        int8(offset, next) {
            if (next === undefined)
                return this.getInt8(offset);
            if (next >= -(2 ** 7) && next < 2 ** 7)
                return this.setInt8(offset, next), next;
            $mol_fail(new Error(`Wrong int8 value ${next}`));
        }
        uint8(offset, next) {
            if (next === undefined)
                return this.getUint8(offset);
            if (next >= 0 && next < 2 ** 8)
                return this.setUint8(offset, next), next;
            $mol_fail(new Error(`Wrong uint8 value ${next}`));
        }
        int16(offset, next) {
            if (next === undefined)
                return this.getInt16(offset, true);
            if (next >= -(2 ** 15) && next < 2 ** 15)
                return this.setInt16(offset, next, true), next;
            $mol_fail(new Error(`Wrong int16 value ${next}`));
        }
        uint16(offset, next) {
            if (next === undefined)
                return this.getUint16(offset, true);
            if (next >= 0 && next < 2 ** 16)
                return this.setUint16(offset, next, true), next;
            $mol_fail(new Error(`Wrong uint16 value ${next}`));
        }
        int32(offset, next) {
            if (next === undefined)
                return this.getInt32(offset, true);
            if (next >= -(2 ** 31) && next < 2 ** 31)
                return this.setInt32(offset, next, true), next;
            $mol_fail(new Error(`Wrong int32 value ${next}`));
        }
        uint32(offset, next) {
            if (next === undefined)
                return this.getUint32(offset, true);
            if (next >= 0 && next < 2 ** 32)
                return this.setUint32(offset, next, true), next;
            $mol_fail(new Error(`Wrong uint32 value ${next}`));
        }
        uint48(offset, next) {
            if (next === undefined)
                return this.getUint48(offset, true);
            if (next >= 0 && next < 2 ** 48)
                return this.setUint48(offset, next, true), next;
            $mol_fail(new Error(`Wrong uint48 value ${next}`));
        }
        int64(offset, next) {
            if (next === undefined)
                return this.getBigInt64(offset, true);
            if (next >= -(2 ** 63) && next < 2 ** 63)
                return this.setBigInt64(offset, next, true), next;
            $mol_fail(new Error(`Wrong int64 value ${next}`));
        }
        uint64(offset, next) {
            if (next === undefined)
                return this.getBigUint64(offset, true);
            if (next >= 0 && next < 2 ** 64)
                return this.setBigUint64(offset, next, true), next;
            $mol_fail(new Error(`Wrong uint64 value ${next}`));
        }
        float32(offset, next) {
            if (next !== undefined)
                this.setFloat32(offset, next, true);
            return this.getFloat32(offset, true);
        }
        float64(offset, next) {
            if (next !== undefined)
                this.setFloat64(offset, next, true);
            return this.getFloat64(offset, true);
        }
        asArray() {
            return new Uint8Array(this.buffer, this.byteOffset, this.byteLength);
        }
        toString() {
            return $mol_base64_ae_encode(this.asArray());
        }
    }
    $.$mol_buffer = $mol_buffer;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    let $mol_websocket_frame_op;
    (function ($mol_websocket_frame_op) {
        $mol_websocket_frame_op[$mol_websocket_frame_op["con"] = 0] = "con";
        $mol_websocket_frame_op[$mol_websocket_frame_op["txt"] = 1] = "txt";
        $mol_websocket_frame_op[$mol_websocket_frame_op["bin"] = 2] = "bin";
        $mol_websocket_frame_op[$mol_websocket_frame_op["stop"] = 8] = "stop";
        $mol_websocket_frame_op[$mol_websocket_frame_op["ping"] = 9] = "ping";
        $mol_websocket_frame_op[$mol_websocket_frame_op["pong"] = 10] = "pong";
    })($mol_websocket_frame_op = $.$mol_websocket_frame_op || ($.$mol_websocket_frame_op = {}));
    class $mol_websocket_frame extends $mol_buffer {
        kind(next) {
            if (next) {
                this.setUint8(0, Number(next.fin) << 7 | $mol_websocket_frame_op[next.op]);
                return next;
            }
            else {
                const state = this.getUint8(0);
                const fin = state >> 7;
                const op = $mol_websocket_frame_op[state & 0b1111];
                if (op === undefined)
                    $mol_fail(new Error(`Wrong op (${state.toString(2)})`));
                return { op, fin };
            }
        }
        data(next) {
            if (next === undefined) {
                const state = this.getUint8(1);
                const mask = state >> 7;
                let size = state & 0b0111_1111;
                if (size === 126)
                    size = this.getUint16(2);
                else if (size === 127)
                    size = this.getUint32(6);
                return { size, mask };
            }
            else {
                if (next.size >= 2 ** 16) {
                    this.setUint8(1, 127 | Number(next.mask) << 7);
                    this.setUint32(6, next.size);
                }
                else if (next.size >= 126) {
                    this.setUint8(1, 126 | Number(next.mask) << 7);
                    this.setUint16(2, next.size);
                }
                else {
                    this.setUint8(1, next.size | Number(next.mask) << 7);
                }
                return next;
            }
        }
        size() {
            const short = this.getUint8(1) & 0b0111_1111;
            const mask = this.getUint8(1) >> 7;
            return (short === 127 ? 10 : short === 126 ? 4 : 2) + (mask ? 4 : 0);
        }
        mask() {
            return new Uint8Array(this.buffer, this.byteOffset + this.size() - 4, 4);
        }
        toString() {
            const { op, fin } = this.kind();
            const { size, mask } = this.data();
            return `${op}${fin ? '!' : '+'}${size}${mask ? '@' : '#'}`;
        }
        static make(op, size = 0, mask = false, fin = true) {
            const head = (size >= 2 ** 16 ? 10 : size >= 126 ? 4 : 2) + (mask ? 4 : 0);
            const frame = $mol_websocket_frame.from(head);
            frame.kind({ op, fin });
            frame.data({ size, mask });
            return frame;
        }
    }
    $.$mol_websocket_frame = $mol_websocket_frame;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_rest_port_ws_std extends $mol_rest_port_ws {
        socket;
        send_nil() {
            if (this.socket.readyState !== this.socket.OPEN)
                return;
            this.socket.send('');
        }
        send_bin(data) {
            if (this.socket.readyState !== this.socket.OPEN)
                return;
            this.socket.send(data);
        }
        send_text(data) {
            if (this.socket.readyState !== this.socket.OPEN)
                return;
            const bin = $mol_charset_encode(data);
            this.socket.send(bin);
        }
    }
    __decorate([
        $mol_action
    ], $mol_rest_port_ws_std.prototype, "send_nil", null);
    __decorate([
        $mol_action
    ], $mol_rest_port_ws_std.prototype, "send_bin", null);
    __decorate([
        $mol_action
    ], $mol_rest_port_ws_std.prototype, "send_text", null);
    $.$mol_rest_port_ws_std = $mol_rest_port_ws_std;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_rest_port_ws_node extends $mol_rest_port_ws {
        socket;
        send_nil() {
            if (this.socket.writableEnded)
                return;
            this.socket.write($mol_websocket_frame.make('pong', 0).asArray());
        }
        send_bin(data) {
            if (this.socket.writableEnded)
                return;
            this.socket.write($mol_websocket_frame.make('bin', data.byteLength).asArray());
            this.socket.write(data);
        }
        send_text(data) {
            if (this.socket.writableEnded)
                return;
            const bin = $mol_charset_encode(data);
            this.socket.write($mol_websocket_frame.make('txt', bin.byteLength).asArray());
            this.socket.write(bin);
        }
    }
    __decorate([
        $mol_action
    ], $mol_rest_port_ws_node.prototype, "send_nil", null);
    __decorate([
        $mol_action
    ], $mol_rest_port_ws_node.prototype, "send_bin", null);
    __decorate([
        $mol_action
    ], $mol_rest_port_ws_node.prototype, "send_text", null);
    $.$mol_rest_port_ws_node = $mol_rest_port_ws_node;
    $.$mol_rest_port_ws = $mol_rest_port_ws_node;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_guard_defined(value) {
        return value !== null && value !== undefined;
    }
    $.$mol_guard_defined = $mol_guard_defined;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_time_base {
        static patterns = {};
        static formatter(pattern) {
            if (this.patterns[pattern])
                return this.patterns[pattern];
            var tokens = Object.keys(this.patterns)
                .sort()
                .reverse()
                .map((token) => token.replace(/([-+*.\[\]()\^])/g, '\\$1'));
            var lexer = RegExp('(.*?)(' + tokens.join('|') + '|$)', 'g');
            var funcs = [];
            pattern.replace(lexer, (str, text, token) => {
                if (text)
                    funcs.push(() => text);
                if (token)
                    funcs.push(this.patterns[token]);
                return str;
            });
            return this.patterns[pattern] = (arg) => {
                return funcs.reduce((res, func) => res + func(arg), '');
            };
        }
        toString(pattern) {
            const Base = this.constructor;
            const formatter = Base.formatter(pattern);
            return formatter(this);
        }
    }
    $.$mol_time_base = $mol_time_base;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_time_duration extends $mol_time_base {
        constructor(config = 0) {
            super();
            if (typeof config === 'number') {
                if (!Number.isFinite(config))
                    throw new RangeError(`Wrong ms count`);
                this.second = config / 1000;
                return;
            }
            if (typeof config === 'string') {
                if (config === 'Z') {
                    this.hour = 0;
                    this.minute = 0;
                    return;
                }
                duration: {
                    const parser = /^P(?:([+-]?\d+(?:\.\d+)?)Y)?(?:([+-]?\d+(?:\.\d+)?)M)?(?:([+-]?\d+(?:\.\d+)?)D)?(?:T(?:([+-]?\d+(?:\.\d+)?)h)?(?:([+-]?\d+(?:\.\d+)?)m)?(?:([+-]?\d+(?:\.\d+)?)s)?)?$/i;
                    const found = parser.exec(config);
                    if (!found)
                        break duration;
                    if (found[1])
                        this.year = Number(found[1]);
                    if (found[2])
                        this.month = Number(found[2]);
                    if (found[3])
                        this.day = Number(found[3]);
                    if (found[4])
                        this.hour = Number(found[4]);
                    if (found[5])
                        this.minute = Number(found[5]);
                    if (found[6])
                        this.second = Number(found[6]);
                    return;
                }
                offset: {
                    var parser = /^[+-](\d\d)(?::?(\d\d))?$/i;
                    var found = parser.exec(config);
                    if (!found)
                        break offset;
                    if (found[1])
                        this.hour = Number(found[1]);
                    if (found[2])
                        this.minute = Number(found[2]);
                    return;
                }
                throw new Error(`Can not parse time duration (${config})`);
            }
            this.year = config.year || 0;
            this.month = config.month || 0;
            this.day = config.day || 0;
            this.hour = config.hour || 0;
            this.minute = config.minute || 0;
            this.second = config.second || 0;
        }
        year = 0;
        month = 0;
        day = 0;
        hour = 0;
        minute = 0;
        second = 0;
        get normal() {
            let second = this.second ?? 0;
            let minute = this.minute ?? 0;
            let hour = this.hour ?? 0;
            let day = this.day ?? 0;
            minute += Math.floor(second / 60);
            second = second % 60;
            hour += Math.floor(minute / 60);
            minute = minute % 60;
            day += Math.floor(hour / 24);
            hour = hour % 24;
            return new $mol_time_duration({
                year: this.year,
                month: this.month,
                day: day,
                hour: hour,
                minute: minute,
                second: second,
            });
        }
        summ(config) {
            const duration = new $mol_time_duration(config);
            return new $mol_time_duration({
                year: this.year + duration.year,
                month: this.month + duration.month,
                day: this.day + duration.day,
                hour: this.hour + duration.hour,
                minute: this.minute + duration.minute,
                second: this.second + duration.second,
            });
        }
        mult(numb) {
            return new $mol_time_duration({
                year: this.year && this.year * numb,
                month: this.month && this.month * numb,
                day: this.day && this.day * numb,
                hour: this.hour && this.hour * numb,
                minute: this.minute && this.minute * numb,
                second: this.second && this.second * numb,
            });
        }
        count(config) {
            const duration = new $mol_time_duration(config);
            return this.valueOf() / duration.valueOf();
        }
        valueOf() {
            var day = this.year * 365 + this.month * 30.4 + this.day;
            var second = ((day * 24 + this.hour) * 60 + this.minute) * 60 + this.second;
            return second * 1000;
        }
        toJSON() { return this.toString(); }
        toString(pattern = 'P#Y#M#DT#h#m#s') {
            return super.toString(pattern);
        }
        [Symbol.toPrimitive](mode) {
            return mode === 'number' ? this.valueOf() : this.toString();
        }
        static patterns = {
            '#Y': (duration) => {
                if (!duration.year)
                    return '';
                return duration.year + 'Y';
            },
            '#M': (duration) => {
                if (!duration.month)
                    return '';
                return duration.month + 'M';
            },
            '#D': (duration) => {
                if (!duration.day)
                    return '';
                return duration.day + 'D';
            },
            '#h': (duration) => {
                if (!duration.hour)
                    return '';
                return duration.hour + 'H';
            },
            '#m': (duration) => {
                if (!duration.minute)
                    return '';
                return duration.minute + 'M';
            },
            '#s': (duration) => {
                if (!duration.second)
                    return '';
                return duration.second + 'S';
            },
            'hh': (moment) => {
                if (moment.hour == null)
                    return '';
                return String(100 + moment.hour).slice(1);
            },
            'h': (moment) => {
                if (moment.hour == null)
                    return '';
                return String(moment.hour);
            },
            ':mm': (moment) => {
                if (moment.minute == null)
                    return '';
                return ':' + $mol_time_moment.patterns['mm'](moment);
            },
            'mm': (moment) => {
                if (moment.minute == null)
                    return '';
                return String(100 + moment.minute).slice(1);
            },
            'm': (moment) => {
                if (moment.minute == null)
                    return '';
                return String(moment.minute);
            },
            ':ss': (moment) => {
                if (moment.second == null)
                    return '';
                return ':' + $mol_time_moment.patterns['ss'](moment);
            },
            'ss': (moment) => {
                if (moment.second == null)
                    return '';
                return String(100 + moment.second | 0).slice(1);
            },
            's': (moment) => {
                if (moment.second == null)
                    return '';
                return String(moment.second | 0);
            },
            '.sss': (moment) => {
                if (moment.second == null)
                    return '';
                return '.' + $mol_time_moment.patterns['sss'](moment);
            },
            'sss': (moment) => {
                if (moment.second == null)
                    return '';
                const millisecond = (moment.second - Math.trunc(moment.second)).toFixed(3);
                return millisecond.slice(2);
            },
        };
    }
    $.$mol_time_duration = $mol_time_duration;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    let $mol_time_moment_weekdays;
    (function ($mol_time_moment_weekdays) {
        $mol_time_moment_weekdays[$mol_time_moment_weekdays["monday"] = 0] = "monday";
        $mol_time_moment_weekdays[$mol_time_moment_weekdays["tuesday"] = 1] = "tuesday";
        $mol_time_moment_weekdays[$mol_time_moment_weekdays["wednesday"] = 2] = "wednesday";
        $mol_time_moment_weekdays[$mol_time_moment_weekdays["thursday"] = 3] = "thursday";
        $mol_time_moment_weekdays[$mol_time_moment_weekdays["friday"] = 4] = "friday";
        $mol_time_moment_weekdays[$mol_time_moment_weekdays["saturday"] = 5] = "saturday";
        $mol_time_moment_weekdays[$mol_time_moment_weekdays["sunday"] = 6] = "sunday";
    })($mol_time_moment_weekdays = $.$mol_time_moment_weekdays || ($.$mol_time_moment_weekdays = {}));
    function numb(str, max) {
        const numb = Number(str);
        if (numb < max)
            return numb;
        $mol_fail(new Error(`Wrong time component ${str}`));
    }
    class $mol_time_moment extends $mol_time_base {
        constructor(config = new Date) {
            super();
            if (typeof config === 'number') {
                config = new Date(config);
                if (Number.isNaN(config.valueOf()))
                    throw new RangeError(`Wrong ms count`);
            }
            if (typeof config === 'string') {
                const parsed = /^(?:(\d\d?\d?\d?)(?:-?(\d\d?)(?:-?(\d\d?))?)?)?(?:[T ](?:(\d\d?)(?::?(\d\d?)(?::?(\d\d?(?:\.\d+)?))?)?)?(Z|[\+\-]\d\d?(?::?(?:\d\d?)?)?)?)?$/.exec(config);
                if (!parsed)
                    throw new Error(`Can not parse time moment (${config})`);
                if (parsed[1])
                    this.year = numb(parsed[1], 9999);
                if (parsed[2])
                    this.month = numb(parsed[2], 13) - 1;
                if (parsed[3])
                    this.day = numb(parsed[3], 32) - 1;
                if (parsed[4])
                    this.hour = numb(parsed[4], 60);
                if (parsed[5])
                    this.minute = numb(parsed[5], 60);
                if (parsed[6])
                    this.second = numb(parsed[6], 60);
                if (parsed[7])
                    this.offset = new $mol_time_duration(parsed[7]);
                return;
            }
            if (config instanceof Date) {
                this.year = config.getFullYear();
                this.month = config.getMonth();
                this.day = config.getDate() - 1;
                this.hour = config.getHours();
                this.minute = config.getMinutes();
                this.second = config.getSeconds() + config.getMilliseconds() / 1000;
                const offset = -config.getTimezoneOffset();
                this.offset = new $mol_time_duration({
                    hour: (offset < 0) ? Math.ceil(offset / 60) : Math.floor(offset / 60),
                    minute: offset % 60
                });
                return;
            }
            this.year = config.year;
            this.month = config.month;
            this.day = config.day;
            this.hour = config.hour;
            this.minute = config.minute;
            this.second = config.second;
            this.offset = config.offset == null ? config.offset : new $mol_time_duration(config.offset);
        }
        year;
        month;
        day;
        hour;
        minute;
        second;
        offset;
        get weekday() {
            return (this.native.getDay() + 6) % 7;
        }
        _native;
        get native() {
            if (this._native)
                return this._native;
            const second = Math.floor(this.second ?? 0);
            const native = new Date(this.year ?? 0, this.month ?? 0, (this.day ?? 0) + 1, this.hour ?? 0, this.minute ?? 0, second, Math.floor(((this.second ?? 0) - second) * 1000));
            const offset = -native.getTimezoneOffset();
            shift: if (this.offset) {
                const target = this.offset.count('PT1m');
                if (target === offset)
                    break shift;
                native.setMinutes(native.getMinutes() + offset - target);
            }
            return this._native = native;
        }
        _normal;
        get normal() {
            if (this._normal)
                return this._normal;
            const moment = new $mol_time_moment(this.native).toOffset(this.offset);
            return this._normal = new $mol_time_moment({
                year: this.year === undefined ? undefined : moment.year,
                month: this.month === undefined ? undefined : moment.month,
                day: this.day === undefined ? undefined : moment.day,
                hour: this.hour === undefined ? undefined : moment.hour,
                minute: this.minute === undefined ? undefined : moment.minute,
                second: this.second === undefined ? undefined : moment.second,
                offset: this.offset === undefined ? undefined : moment.offset,
            });
        }
        merge(config) {
            const moment = new $mol_time_moment(config);
            return new $mol_time_moment({
                year: moment.year === undefined ? this.year : moment.year,
                month: moment.month === undefined ? this.month : moment.month,
                day: moment.day === undefined ? this.day : moment.day,
                hour: moment.hour === undefined ? this.hour : moment.hour,
                minute: moment.minute === undefined ? this.minute : moment.minute,
                second: moment.second === undefined ? this.second : moment.second,
                offset: moment.offset === undefined ? this.offset : moment.offset,
            });
        }
        shift(config) {
            const duration = new $mol_time_duration(config);
            const moment = new $mol_time_moment().merge({
                year: this.year ?? 0,
                month: this.month ?? 0,
                day: this.day ?? 0,
                hour: this.hour ?? 0,
                minute: this.minute ?? 0,
                second: this.second ?? 0,
                offset: this.offset ?? 0
            });
            const second = moment.second + (duration.second ?? 0);
            const native = new Date(moment.year + (duration.year ?? 0), moment.month + (duration.month ?? 0), moment.day + 1 + (duration.day ?? 0), moment.hour + (duration.hour ?? 0), moment.minute + (duration.minute ?? 0), Math.floor(second), (second - Math.floor(second)) * 1000);
            if (isNaN(native.valueOf()))
                throw new Error('Wrong time');
            return new $mol_time_moment({
                year: this.year === undefined ? undefined : native.getFullYear(),
                month: this.month === undefined ? undefined : native.getMonth(),
                day: this.day === undefined ? undefined : native.getDate() - 1,
                hour: this.hour === undefined ? undefined : native.getHours(),
                minute: this.minute === undefined ? undefined : native.getMinutes(),
                second: this.second === undefined ? undefined : native.getSeconds() + native.getMilliseconds() / 1000,
                offset: this.offset,
            });
        }
        mask(config) {
            const mask = new $mol_time_moment(config);
            return new $mol_time_moment({
                year: mask.year === undefined ? undefined : this.year,
                month: mask.month === undefined ? undefined : this.month,
                day: mask.day === undefined ? undefined : this.day,
                hour: mask.hour === undefined ? undefined : this.hour,
                minute: mask.minute === undefined ? undefined : this.minute,
                second: mask.second === undefined ? undefined : this.second,
                offset: mask.offset === undefined ? undefined : this.offset,
            });
        }
        toOffset(config = new $mol_time_moment().offset) {
            const duration = new $mol_time_duration(config);
            const offset = this.offset || new $mol_time_moment().offset;
            let with_time = new $mol_time_moment('0001-01-01T00:00:00').merge(this);
            const moment = with_time.shift(duration.summ(offset.mult(-1)));
            return moment.merge({ offset: duration });
        }
        valueOf() { return this.native.getTime(); }
        toJSON() { return this.toString(); }
        toString(pattern = 'YYYY-MM-DDThh:mm:ss.sssZ') {
            return super.toString(pattern);
        }
        [Symbol.toPrimitive](mode) {
            return mode === 'number' ? this.valueOf() : this.toString();
        }
        [$mol_dev_format_head]() {
            return $mol_dev_format_span({}, $mol_dev_format_native(this), ' ', $mol_dev_format_accent(this.toString('YYYY-MM-DD hh:mm:ss.sss Z')));
        }
        static patterns = {
            'YYYY': (moment) => {
                if (moment.year == null)
                    return '';
                return String(moment.year);
            },
            'AD': (moment) => {
                if (moment.year == null)
                    return '';
                return String(Math.floor(moment.year / 100) + 1);
            },
            'YY': (moment) => {
                if (moment.year == null)
                    return '';
                return String(moment.year % 100);
            },
            'Month': (pattern => (moment) => {
                if (moment.month == null)
                    return '';
                return pattern.format(moment.native);
            })(new Intl.DateTimeFormat(undefined, { month: 'long' })),
            'DD Month': (pattern => (moment) => {
                if (moment.month == null) {
                    if (moment.day == null) {
                        return '';
                    }
                    else {
                        return $mol_time_moment.patterns['DD'](moment);
                    }
                }
                else {
                    if (moment.day == null) {
                        return $mol_time_moment.patterns['Month'](moment);
                    }
                    else {
                        return pattern.format(moment.native);
                    }
                }
            })(new Intl.DateTimeFormat(undefined, { day: '2-digit', month: 'long' })),
            'D Month': (pattern => (moment) => {
                if (moment.month == null) {
                    if (moment.day == null) {
                        return '';
                    }
                    else {
                        return $mol_time_moment.patterns['D'](moment);
                    }
                }
                else {
                    if (moment.day == null) {
                        return $mol_time_moment.patterns['Month'](moment);
                    }
                    else {
                        return pattern.format(moment.native);
                    }
                }
            })(new Intl.DateTimeFormat(undefined, { day: 'numeric', month: 'long' })),
            'Mon': (pattern => (moment) => {
                if (moment.month == null)
                    return '';
                return pattern.format(moment.native);
            })(new Intl.DateTimeFormat(undefined, { month: 'short' })),
            'DD Mon': (pattern => (moment) => {
                if (moment.month == null) {
                    if (moment.day == null) {
                        return '';
                    }
                    else {
                        return $mol_time_moment.patterns['DD'](moment);
                    }
                }
                else {
                    if (moment.day == null) {
                        return $mol_time_moment.patterns['Mon'](moment);
                    }
                    else {
                        return pattern.format(moment.native);
                    }
                }
            })(new Intl.DateTimeFormat(undefined, { day: '2-digit', month: 'short' })),
            'D Mon': (pattern => (moment) => {
                if (moment.month == null) {
                    if (moment.day == null) {
                        return '';
                    }
                    else {
                        return $mol_time_moment.patterns['D'](moment);
                    }
                }
                else {
                    if (moment.day == null) {
                        return $mol_time_moment.patterns['Mon'](moment);
                    }
                    else {
                        return pattern.format(moment.native);
                    }
                }
            })(new Intl.DateTimeFormat(undefined, { day: 'numeric', month: 'short' })),
            '-MM': (moment) => {
                if (moment.month == null)
                    return '';
                return '-' + $mol_time_moment.patterns['MM'](moment);
            },
            'MM': (moment) => {
                if (moment.month == null)
                    return '';
                return String(100 + moment.month + 1).slice(1);
            },
            'M': (moment) => {
                if (moment.month == null)
                    return '';
                return String(moment.month + 1);
            },
            'WeekDay': (pattern => (moment) => {
                if (moment.day == null)
                    return '';
                if (moment.month == null)
                    return '';
                if (moment.year == null)
                    return '';
                return pattern.format(moment.native);
            })(new Intl.DateTimeFormat(undefined, { weekday: 'long' })),
            'WD': (pattern => (moment) => {
                if (moment.day == null)
                    return '';
                if (moment.month == null)
                    return '';
                if (moment.year == null)
                    return '';
                return pattern.format(moment.native);
            })(new Intl.DateTimeFormat(undefined, { weekday: 'short' })),
            '-DD': (moment) => {
                if (moment.day == null)
                    return '';
                return '-' + $mol_time_moment.patterns['DD'](moment);
            },
            'DD': (moment) => {
                if (moment.day == null)
                    return '';
                return String(100 + moment.day + 1).slice(1);
            },
            'D': (moment) => {
                if (moment.day == null)
                    return '';
                return String(moment.day + 1);
            },
            'Thh': (moment) => {
                if (moment.hour == null)
                    return '';
                return 'T' + $mol_time_moment.patterns['hh'](moment);
            },
            'hh': (moment) => {
                if (moment.hour == null)
                    return '';
                return String(100 + moment.hour).slice(1);
            },
            'h': (moment) => {
                if (moment.hour == null)
                    return '';
                return String(moment.hour);
            },
            ':mm': (moment) => {
                if (moment.minute == null)
                    return '';
                return ':' + $mol_time_moment.patterns['mm'](moment);
            },
            'mm': (moment) => {
                if (moment.minute == null)
                    return '';
                return String(100 + moment.minute).slice(1);
            },
            'm': (moment) => {
                if (moment.minute == null)
                    return '';
                return String(moment.minute);
            },
            ':ss': (moment) => {
                if (moment.second == null)
                    return '';
                return ':' + $mol_time_moment.patterns['ss'](moment);
            },
            'ss': (moment) => {
                if (moment.second == null)
                    return '';
                return String(100 + moment.second | 0).slice(1);
            },
            's': (moment) => {
                if (moment.second == null)
                    return '';
                return String(moment.second | 0);
            },
            '.sss': (moment) => {
                if (moment.second == null)
                    return '';
                if (moment.second === (moment.second | 0))
                    return '';
                return '.' + $mol_time_moment.patterns['sss'](moment);
            },
            'sss': (moment) => {
                if (moment.second == null)
                    return '';
                const millisecond = (moment.second - Math.trunc(moment.second)).toFixed(3);
                return millisecond.slice(2);
            },
            'Z': (moment) => {
                const offset = moment.offset;
                if (!offset)
                    return '';
                let hour = offset.hour;
                let sign = '+';
                if (hour < 0) {
                    sign = '-';
                    hour = -hour;
                }
                return sign + String(100 + hour).slice(1) + ':' + String(100 + offset.minute).slice(1);
            }
        };
    }
    $.$mol_time_moment = $mol_time_moment;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $hyoo_crus_time_moment(time) {
        const stamp = Math.floor(time / 65536) * 1000;
        return new $mol_time_moment(stamp);
    }
    $.$hyoo_crus_time_moment = $hyoo_crus_time_moment;
    function $hyoo_crus_time_tick(time) {
        return time % 65536;
    }
    $.$hyoo_crus_time_tick = $hyoo_crus_time_tick;
    function $hyoo_crus_time_dump(time) {
        return $hyoo_crus_time_moment(time).toString('YYYY-MM-DD hh:mm:ss')
            + ' @' + $hyoo_crus_time_tick(time);
    }
    $.$hyoo_crus_time_dump = $hyoo_crus_time_dump;
    function $hyoo_crus_time_now() {
        return now || Math.floor(Date.now() / 1000) * 65536;
    }
    $.$hyoo_crus_time_now = $hyoo_crus_time_now;
    let now = 0;
    function $hyoo_crus_time_freeze(task) {
        if (now)
            return task();
        now = $hyoo_crus_time_now();
        try {
            return task();
        }
        finally {
            now = 0;
        }
    }
    $.$hyoo_crus_time_freeze = $hyoo_crus_time_freeze;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_crus_face_map extends Map {
        last_time = 0;
        total = 0;
        constructor(entries) {
            super();
            if (entries)
                this.sync(entries);
        }
        sync(right) {
            if (right instanceof $hyoo_crus_face_map)
                this.total = right.total;
            for (const [peer, time] of right)
                this.time_max(peer, time);
        }
        time_max(peer, time) {
            if (this.last_time < time)
                this.last_time = time;
            let prev = this.get(peer) ?? 0;
            if (prev < time)
                this.set(peer, time);
        }
        tick() {
            return this.last_time = Math.max(this.last_time + 1, $hyoo_crus_time_now());
        }
        last_moment() {
            return $hyoo_crus_time_moment(this.last_time);
        }
        [$mol_dev_format_head]() {
            return $mol_dev_format_span({}, $mol_dev_format_native(this), $mol_dev_format_shade(' ', $hyoo_crus_time_dump(this.last_time)), $mol_dev_format_shade(' #', this.total));
        }
    }
    __decorate([
        $mol_action
    ], $hyoo_crus_face_map.prototype, "tick", null);
    $.$hyoo_crus_face_map = $hyoo_crus_face_map;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    let $hyoo_crus_part;
    (function ($hyoo_crus_part) {
        $hyoo_crus_part[$hyoo_crus_part["land"] = 3] = "land";
        $hyoo_crus_part[$hyoo_crus_part["face"] = 11] = "face";
        $hyoo_crus_part[$hyoo_crus_part["pass"] = 255] = "pass";
        $hyoo_crus_part[$hyoo_crus_part["gift"] = 247] = "gift";
        $hyoo_crus_part[$hyoo_crus_part["sand"] = 8] = "sand";
        $hyoo_crus_part[$hyoo_crus_part["rock"] = 5] = "rock";
        $hyoo_crus_part[$hyoo_crus_part["root"] = 1] = "root";
        $hyoo_crus_part[$hyoo_crus_part["buck"] = 9] = "buck";
    })($hyoo_crus_part = $.$hyoo_crus_part || ($.$hyoo_crus_part = {}));
})($ || ($ = {}));

;
"use strict";

;
"use strict";

;
"use strict";
var $;
(function ($) {
    function $mol_data_setup(value, config) {
        return Object.assign(value, {
            config,
            Value: null
        });
    }
    $.$mol_data_setup = $mol_data_setup;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_func_is_class(func) {
        return Object.getOwnPropertyDescriptor(func, 'prototype')?.writable === false;
    }
    $.$mol_func_is_class = $mol_func_is_class;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    function $mol_data_pipe(...funcs) {
        return $mol_data_setup(function (input) {
            let value = input;
            for (const func of funcs)
                value = $mol_func_is_class(func) ? new func(value) : func.call(this, value);
            return value;
        }, { funcs });
    }
    $.$mol_data_pipe = $mol_data_pipe;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_data_error extends $mol_error_mix {
    }
    $.$mol_data_error = $mol_data_error;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_data_number = (val) => {
        if (typeof val === 'number')
            return val;
        return $mol_fail(new $mol_data_error(`${val} is not a number`));
    };
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_data_integer(val) {
        const val2 = $mol_data_number(val);
        if (Math.floor(val2) === val2)
            return val2;
        return $mol_fail(new $mol_data_error(`${val} is not an integer`));
    }
    $.$mol_data_integer = $mol_data_integer;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$hyoo_crus_rank = $mol_data_tagged({
        $hyoo_crus_rank: $mol_data_pipe($mol_data_integer, (rank) => {
            if (rank >= $.$hyoo_crus_rank_deny && rank <= $.$hyoo_crus_rank_rule)
                return rank;
            $mol_fail(new $mol_data_error(`${rank} is out of Ran range`));
        }),
    }).$hyoo_crus_rank;
    function $hyoo_crus_rank_make(tier, fame) {
        return ($hyoo_crus_rank_tier[tier] | $hyoo_crus_rank_rate[fame]);
    }
    $.$hyoo_crus_rank_make = $hyoo_crus_rank_make;
    let $hyoo_crus_rank_tier;
    (function ($hyoo_crus_rank_tier) {
        $hyoo_crus_rank_tier[$hyoo_crus_rank_tier["deny"] = 0] = "deny";
        $hyoo_crus_rank_tier[$hyoo_crus_rank_tier["read"] = 16] = "read";
        $hyoo_crus_rank_tier[$hyoo_crus_rank_tier["join"] = 48] = "join";
        $hyoo_crus_rank_tier[$hyoo_crus_rank_tier["post"] = 112] = "post";
        $hyoo_crus_rank_tier[$hyoo_crus_rank_tier["rule"] = 240] = "rule";
    })($hyoo_crus_rank_tier = $.$hyoo_crus_rank_tier || ($.$hyoo_crus_rank_tier = {}));
    let $hyoo_crus_rank_rate;
    (function ($hyoo_crus_rank_rate) {
        $hyoo_crus_rank_rate[$hyoo_crus_rank_rate["late"] = 0] = "late";
        $hyoo_crus_rank_rate[$hyoo_crus_rank_rate["long"] = 3] = "long";
        $hyoo_crus_rank_rate[$hyoo_crus_rank_rate["slow"] = 7] = "slow";
        $hyoo_crus_rank_rate[$hyoo_crus_rank_rate["fast"] = 11] = "fast";
        $hyoo_crus_rank_rate[$hyoo_crus_rank_rate["just"] = 15] = "just";
    })($hyoo_crus_rank_rate = $.$hyoo_crus_rank_rate || ($.$hyoo_crus_rank_rate = {}));
    $.$hyoo_crus_rank_deny = $hyoo_crus_rank_make('deny', 'late');
    $.$hyoo_crus_rank_read = $hyoo_crus_rank_make('read', 'late');
    $.$hyoo_crus_rank_rule = $hyoo_crus_rank_make('rule', 'just');
    function $hyoo_crus_rank_join(rate) {
        return $hyoo_crus_rank_make('join', rate);
    }
    $.$hyoo_crus_rank_join = $hyoo_crus_rank_join;
    function $hyoo_crus_rank_post(rate) {
        return $hyoo_crus_rank_make('post', rate);
    }
    $.$hyoo_crus_rank_post = $hyoo_crus_rank_post;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_base64_url_encode(buffer) {
        return $mol_base64_encode(buffer).replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
    }
    $.$mol_base64_url_encode = $mol_base64_url_encode;
    function $mol_base64_url_decode(str) {
        return $mol_base64_decode(str.replace(/-/g, '+').replace(/_/g, '/'));
    }
    $.$mol_base64_url_decode = $mol_base64_url_decode;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_crypto_native = $node.crypto.webcrypto;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const ecdsa = {
        name: 'ECDSA',
        hash: 'SHA-1',
        namedCurve: "P-256",
    };
    const ecdh = { name: "ECDH", namedCurve: "P-256" };
    const jwk = { crv: 'P-256', ext: true, kty: 'EC' };
    class $mol_crypto_key extends $mol_buffer {
        static from(serial) {
            if (typeof serial === 'string') {
                serial = new Uint8Array([
                    ...$mol_base64_url_decode(serial.slice(0, 43)),
                    ...$mol_base64_url_decode(serial.slice(43, 86)),
                    ...$mol_base64_url_decode(serial.slice(86, 129)),
                ]);
            }
            return super.from(serial);
        }
        toString() {
            const arr = this.asArray();
            return $mol_base64_url_encode(arr.subarray(0, 32))
                + $mol_base64_url_encode(arr.subarray(32, 64))
                + $mol_base64_url_encode(arr.subarray(64));
        }
    }
    __decorate([
        $mol_memo.method
    ], $mol_crypto_key.prototype, "toString", null);
    $.$mol_crypto_key = $mol_crypto_key;
    class $mol_crypto_key_public extends $mol_crypto_key {
        static size_str = 86;
        static size_bin = 64;
        async native() {
            const str = this.toString();
            return $mol_crypto_native.subtle.importKey('jwk', {
                crv: "P-256",
                ext: true,
                key_ops: ['verify'],
                kty: "EC",
                x: str.slice(0, 43),
                y: str.slice(43, 86),
            }, ecdsa, Boolean('extractable'), ['verify']);
        }
        async native_derive() {
            const serial = this.toString();
            return await $mol_crypto_native.subtle.importKey('jwk', {
                ...jwk,
                key_ops: [],
                x: serial.slice(0, 43),
                y: serial.slice(43, 86),
            }, ecdh, true, []);
        }
        async verify(data, sign) {
            return await $mol_crypto_native.subtle.verify(ecdsa, await this.native(), sign, data);
        }
    }
    __decorate([
        $mol_memo.method
    ], $mol_crypto_key_public.prototype, "native", null);
    __decorate([
        $mol_memo.method
    ], $mol_crypto_key_public.prototype, "native_derive", null);
    $.$mol_crypto_key_public = $mol_crypto_key_public;
    class $mol_crypto_key_private extends $mol_crypto_key {
        static size_str = 129;
        static size_bin = 96;
        static size_sign = 64;
        static async generate() {
            const pair = await $mol_crypto_native.subtle.generateKey(ecdsa, Boolean('extractable'), ['sign', 'verify']);
            const { x, y, d } = await $mol_crypto_native.subtle.exportKey('jwk', pair.privateKey);
            return this.from(x + y + d);
        }
        async native() {
            const str = this.toString();
            return await $mol_crypto_native.subtle.importKey('jwk', {
                crv: "P-256",
                ext: true,
                key_ops: ['sign'],
                kty: "EC",
                x: str.slice(0, 43),
                y: str.slice(43, 86),
                d: str.slice(86, 129),
            }, ecdsa, Boolean('extractable'), ['sign']);
        }
        async native_derive() {
            const serial = this.toString();
            return $mol_crypto_native.subtle.importKey('jwk', {
                ...jwk,
                key_ops: ['deriveKey', 'deriveBits'],
                x: serial.slice(0, 43),
                y: serial.slice(43, 86),
                d: serial.slice(86, 129),
            }, ecdh, Boolean('extractable'), ['deriveKey', 'deriveBits']);
        }
        public() {
            return new $mol_crypto_key_public(this.buffer, this.byteOffset, this.byteOffset + 64);
        }
        async sign(data) {
            return new Uint8Array(await $mol_crypto_native.subtle.sign(ecdsa, await this.native(), data));
        }
    }
    __decorate([
        $mol_memo.method
    ], $mol_crypto_key_private.prototype, "native", null);
    __decorate([
        $mol_memo.method
    ], $mol_crypto_key_private.prototype, "native_derive", null);
    __decorate([
        $mol_memo.method
    ], $mol_crypto_key_private.prototype, "public", null);
    $.$mol_crypto_key_private = $mol_crypto_key_private;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_crypto_salt() {
        return $mol_crypto_native.getRandomValues(new Uint8Array(16));
    }
    $.$mol_crypto_salt = $mol_crypto_salt;
    $.$mol_crypto_salt_once = new Uint8Array([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6]);
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_crypto_sacred extends $mol_buffer {
        static size = 16;
        static make() {
            return this.from($mol_crypto_salt());
        }
        static from(serial) {
            if (typeof serial === 'string') {
                serial = new Uint8Array([
                    ...$mol_base64_url_decode(serial),
                ]);
            }
            if (!(serial instanceof Uint8Array)) {
                serial = new Uint8Array(serial.buffer, serial.byteOffset, serial.byteLength);
            }
            ;
            serial[0] = 0;
            const sacred = super.from(serial);
            return sacred;
        }
        static async from_native(native) {
            const buf = await $mol_crypto_native.subtle.exportKey('raw', native);
            const sacred = this.from(new Uint8Array(buf));
            sacred._native = native;
            return sacred;
        }
        constructor(buffer, byteOffset, byteLength) {
            super(buffer, byteOffset, byteLength);
            if (this.getUint8(0) !== 0)
                $mol_fail(new Error('Buffer should starts with 0 byte'));
        }
        toString() {
            return $mol_base64_url_encode(this.asArray());
        }
        _native;
        async native() {
            return this._native ?? (this._native = await $mol_crypto_native.subtle.importKey('raw', this, {
                name: 'AES-CBC',
                length: 128,
            }, true, ['encrypt', 'decrypt']));
        }
        async encrypt(open, salt) {
            return new Uint8Array(await $mol_crypto_native.subtle.encrypt({
                name: 'AES-CBC',
                length: 128,
                tagLength: 32,
                iv: salt,
            }, await this.native(), open));
        }
        async decrypt(closed, salt) {
            return new Uint8Array(await $mol_crypto_native.subtle.decrypt({
                name: 'AES-CBC',
                length: 128,
                tagLength: 32,
                iv: salt,
            }, await this.native(), closed));
        }
        async close(sacred, salt) {
            const buf = new Uint8Array(this.buffer, this.byteOffset + 1, this.byteLength - 1);
            return sacred.encrypt(buf, salt);
        }
    }
    __decorate([
        $mol_memo.method
    ], $mol_crypto_sacred.prototype, "toString", null);
    $.$mol_crypto_sacred = $mol_crypto_sacred;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const algorithm = {
        name: 'AES-CBC',
        length: 128,
        tagLength: 32,
    };
    class $mol_crypto_secret extends Object {
        native;
        static size = 16;
        constructor(native) {
            super();
            this.native = native;
        }
        static async generate() {
            return new this(await $mol_crypto_native.subtle.generateKey(algorithm, true, ['encrypt', 'decrypt']));
        }
        static async from(serial) {
            return new this(await $mol_crypto_native.subtle.importKey('raw', serial, algorithm, true, ['encrypt', 'decrypt']));
        }
        static async pass(pass, salt) {
            return new this(await $mol_crypto_native.subtle.deriveKey({
                name: "PBKDF2",
                salt,
                iterations: 10_000,
                hash: "SHA-256",
            }, await $mol_crypto_native.subtle.importKey("raw", $mol_charset_encode(pass), "PBKDF2", false, ["deriveKey"]), algorithm, true, ['encrypt', 'decrypt']));
        }
        static async derive(private_serial, public_serial) {
            const ecdh = { name: "ECDH", namedCurve: "P-256" };
            const jwk = { crv: 'P-256', ext: true, kty: 'EC' };
            const private_key = await $mol_crypto_native.subtle.importKey('jwk', {
                ...jwk,
                key_ops: ['deriveKey'],
                x: private_serial.slice(0, 43),
                y: private_serial.slice(43, 86),
                d: private_serial.slice(86, 129),
            }, ecdh, true, ['deriveKey']);
            const public_key = await $mol_crypto_native.subtle.importKey('jwk', {
                ...jwk,
                key_ops: [],
                x: public_serial.slice(0, 43),
                y: public_serial.slice(43, 86),
            }, ecdh, true, []);
            const secret = await $mol_crypto_native.subtle.deriveKey({
                name: "ECDH",
                public: public_key,
            }, private_key, algorithm, true, ["encrypt", "decrypt"]);
            return new this(secret);
        }
        async serial() {
            return new Uint8Array(await $mol_crypto_native.subtle.exportKey('raw', this.native));
        }
        async encrypt(open, salt) {
            return new Uint8Array(await $mol_crypto_native.subtle.encrypt({
                ...algorithm,
                iv: salt,
            }, this.native, open));
        }
        async decrypt(closed, salt) {
            return new Uint8Array(await $mol_crypto_native.subtle.decrypt({
                ...algorithm,
                iv: salt,
            }, this.native, closed));
        }
    }
    $.$mol_crypto_secret = $mol_crypto_secret;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_crus_auth extends $mol_crypto_key_private {
        static current(next) {
            $mol_wire_solid();
            if (next === undefined) {
                const key = String($mol_state_local.value('$hyoo_crus_auth') ?? '');
                if (key)
                    return $hyoo_crus_auth.from(key);
            }
            if (!next)
                next = this.grab();
            $mol_state_local.value('$hyoo_crus_auth', next.toString());
            return next;
        }
        static embryos = [];
        static grab() {
            if (this.embryos.length)
                return this.from(this.embryos.pop());
            return $mol_wire_sync(this).generate();
        }
        static async generate() {
            for (let i = 0; i < 4096; ++i) {
                const auth = await super.generate();
                if (auth.uint8(0) !== $hyoo_crus_unit_kind.pass)
                    continue;
                return this.from(auth);
            }
            $mol_fail(new Error(`Too long key generation`));
        }
        lord() {
            return $hyoo_crus_ref_decode(new Uint8Array(this.buffer, 2, 12));
        }
        peer() {
            return $mol_base64_ae_encode(new Uint8Array(this.buffer, 2, 6));
        }
        secret_mutual(pub) {
            return $mol_wire_sync($mol_crypto_secret).derive(this.toString(), pub.toString());
        }
    }
    __decorate([
        $mol_memo.method
    ], $hyoo_crus_auth.prototype, "lord", null);
    __decorate([
        $mol_memo.method
    ], $hyoo_crus_auth.prototype, "peer", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_crus_auth.prototype, "secret_mutual", null);
    __decorate([
        $mol_mem
    ], $hyoo_crus_auth, "current", null);
    __decorate([
        $mol_action
    ], $hyoo_crus_auth, "grab", null);
    $.$hyoo_crus_auth = $hyoo_crus_auth;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_wire_dict extends Map {
        pub = new $mol_wire_pub;
        has(key) {
            this.pub.promote();
            return super.has(key);
        }
        get(key) {
            this.pub.promote();
            return super.get(key);
        }
        entries() {
            this.pub.promote();
            return super.entries();
        }
        keys() {
            this.pub.promote();
            return super.keys();
        }
        values() {
            this.pub.promote();
            return super.values();
        }
        forEach(task, self) {
            this.pub.promote();
            super.forEach(task, self);
        }
        [Symbol.iterator]() {
            this.pub.promote();
            return super[Symbol.iterator]();
        }
        get size() {
            this.pub.promote();
            return super.size;
        }
        set(key, value) {
            if (super.get(key) === value)
                return this;
            super.set(key, value);
            this.pub?.emit();
            return this;
        }
        delete(key) {
            const res = super.delete(key);
            if (res)
                this.pub.emit();
            return res;
        }
        clear() {
            if (!super.size)
                return;
            super.clear();
            this.pub.emit();
        }
        item(key, next) {
            if (next === undefined)
                return this.get(key) ?? null;
            if (next === null)
                this.delete(key);
            else
                this.set(key, next);
            return next;
        }
    }
    $.$mol_wire_dict = $mol_wire_dict;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_crus_node extends $mol_object {
        static tag = 'vals';
        land() {
            return null;
        }
        head() {
            return '';
        }
        land_ref() {
            return this.land()?.ref() ?? this.$.$hyoo_crus_auth.current().lord();
        }
        ref() {
            return $hyoo_crus_ref_resolve(this.land_ref(), $hyoo_crus_ref('___' + this.head()));
        }
        toJSON() {
            return this.ref().description;
        }
        cast(Node) {
            return this.land().Node(Node).Item(this.head());
        }
        nodes(Node) {
            const land = this.land();
            const map = {
                term: () => land.Node(Node || $hyoo_crus_atom_vary),
                solo: () => land.Node(Node || $hyoo_crus_atom_vary),
                vals: () => land.Node(Node || $hyoo_crus_list_vary),
                keys: () => land.Node(Node || $hyoo_crus_dict),
            };
            return this.units().map(unit => map[unit.tag()]().Item(unit.self()));
        }
        units() {
            return this.units_of('');
        }
        units_of(peer) {
            return this.land().sand_ordered({ head: this.head(), peer }).filter(unit => unit.tip() !== 'nil');
        }
        filled() {
            return this.units().length > 0;
        }
        can_change() {
            return this.land().lord_rank(this.land().auth().lord()) >= $hyoo_crus_rank_tier.join;
        }
        last_change() {
            const land = this.land();
            let last = 0;
            const visit = (sand) => {
                if (sand.time() > last)
                    last = sand.time();
                if (sand.tag() === 'term')
                    return;
                land.Node($hyoo_crus_node).Item(sand.self()).units().forEach(visit);
            };
            this.units().forEach(visit);
            return last ? $hyoo_crus_time_moment(last) : null;
        }
        author_peers() {
            const land = this.land();
            const peers = new Set();
            const visit = (sand) => {
                peers.add(sand.peer());
                if (sand.tag() === 'term')
                    return;
                land.Node($hyoo_crus_node).Item(sand.self()).units_of(null).forEach(visit);
            };
            this.units_of(null).forEach(visit);
            return [...peers];
        }
        author_lords() {
            const land = this.land();
            return this.author_peers()
                .map(peer => land.pass.get(peer)?.lord())
                .filter($mol_guard_defined);
        }
        ;
        [$mol_dev_format_head]() {
            return $mol_dev_format_span({}, $mol_dev_format_native(this), ' ', this.head());
        }
    }
    __decorate([
        $mol_memo.method
    ], $hyoo_crus_node.prototype, "ref", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_crus_node.prototype, "cast", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_crus_node.prototype, "nodes", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_crus_node.prototype, "units_of", null);
    __decorate([
        $mol_mem
    ], $hyoo_crus_node.prototype, "last_change", null);
    __decorate([
        $mol_mem
    ], $hyoo_crus_node.prototype, "author_peers", null);
    __decorate([
        $mol_mem
    ], $hyoo_crus_node.prototype, "author_lords", null);
    $.$hyoo_crus_node = $hyoo_crus_node;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_crus_fund extends $mol_object {
        item_make;
        constructor(item_make) {
            super();
            this.item_make = item_make;
        }
        Item(head) {
            return this.item_make(head);
        }
    }
    __decorate([
        $mol_mem_key
    ], $hyoo_crus_fund.prototype, "Item", null);
    $.$hyoo_crus_fund = $hyoo_crus_fund;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_graph {
        nodes = new Set();
        edges_out = new Map();
        edges_in = new Map();
        link(from, to, edge) {
            this.link_out(from, to, edge);
            this.link_in(to, from, edge);
        }
        unlink(from, to) {
            this.edges_in.get(to)?.delete(from);
            this.edges_out.get(from)?.delete(to);
        }
        link_out(from, to, edge) {
            let pair = this.edges_out.get(from);
            if (!pair) {
                pair = new Map();
                this.edges_out.set(from, pair);
                this.nodes.add(from);
            }
            pair.set(to, edge);
            this.nodes.add(to);
        }
        link_in(to, from, edge) {
            let pair = this.edges_in.get(to);
            if (!pair) {
                pair = new Map();
                this.edges_in.set(to, pair);
                this.nodes.add(to);
            }
            pair.set(from, edge);
            this.nodes.add(to);
        }
        edge(from, to) {
            return this.edge_out(from, to) ?? this.edge_in(to, from);
        }
        edge_out(from, to) {
            return this.edges_out.get(from)?.get(to) ?? null;
        }
        edge_in(to, from) {
            return this.edges_in.get(to)?.get(from) ?? null;
        }
        acyclic(get_weight) {
            const checked = [];
            for (const start of this.nodes) {
                const path = [];
                const visit = (from) => {
                    if (checked.includes(from))
                        return Number.MAX_SAFE_INTEGER;
                    const index = path.lastIndexOf(from);
                    if (index > -1) {
                        const cycle = path.slice(index);
                        return cycle.reduce((weight, node, index) => Math.min(weight, get_weight(this.edge_out(node, cycle[(index + 1) % cycle.length]))), Number.MAX_SAFE_INTEGER);
                    }
                    path.push(from);
                    dive: try {
                        const deps = this.edges_out.get(from);
                        if (!deps)
                            break dive;
                        for (const [to, edge] of deps) {
                            if (to === from) {
                                this.unlink(from, to);
                                continue;
                            }
                            const weight_out = get_weight(edge);
                            const min = visit(to);
                            if (weight_out > min)
                                return min;
                            if (weight_out === min) {
                                this.unlink(from, to);
                                if (path.length > 1) {
                                    const enter = path[path.length - 2];
                                    this.link(enter, to, edge);
                                }
                            }
                        }
                    }
                    finally {
                        path.pop();
                    }
                    checked.push(from);
                    return Number.MAX_SAFE_INTEGER;
                };
                visit(start);
            }
        }
        get sorted() {
            const sorted = new Set();
            const visit = (node) => {
                if (sorted.has(node))
                    return;
                const deps = this.edges_out.get(node);
                if (deps) {
                    for (const [dep] of deps)
                        visit(dep);
                }
                sorted.add(node);
            };
            for (const node of this.nodes) {
                visit(node);
            }
            return sorted;
        }
        get roots() {
            const roots = [];
            for (const node of this.nodes) {
                if (this.edges_in.get(node)?.size)
                    continue;
                roots.push(node);
            }
            return roots;
        }
        nodes_depth(select) {
            const stat = new Map();
            const visit = (node, depth = 0) => {
                if (stat.has(node))
                    stat.set(node, select(depth, stat.get(node)));
                else
                    stat.set(node, depth);
                for (const kid of this.edges_out.get(node)?.keys() ?? [])
                    visit(kid, depth + 1);
            };
            for (const root of this.roots)
                visit(root);
            return stat;
        }
        depth_nodes(select) {
            const groups = [];
            for (const [node, depth] of this.nodes_depth(select).entries()) {
                if (groups[depth])
                    groups[depth].push(node);
                else
                    groups[depth] = [node];
            }
            return groups;
        }
    }
    $.$mol_graph = $mol_graph;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_time_interval extends $mol_time_base {
        constructor(config) {
            super();
            if (typeof config === 'string') {
                var chunks = config.split('/');
                if (chunks[0]) {
                    if (chunks[0][0].toUpperCase() === 'P') {
                        this._duration = new $mol_time_duration(chunks[0]);
                    }
                    else {
                        this._start = new $mol_time_moment(chunks[0]);
                    }
                }
                else {
                    this._start = new $mol_time_moment();
                }
                if (chunks[1]) {
                    if (chunks[1][0].toUpperCase() === 'P') {
                        this._duration = new $mol_time_duration(chunks[1]);
                    }
                    else {
                        this._end = new $mol_time_moment(chunks[1]);
                    }
                }
                else {
                    this._end = new $mol_time_moment();
                }
                return;
            }
            if (config.start !== undefined)
                this._start = new $mol_time_moment(config.start);
            if (config.end !== undefined)
                this._end = new $mol_time_moment(config.end);
            if (config.duration !== undefined)
                this._duration = new $mol_time_duration(config.duration);
        }
        _start;
        get start() {
            if (this._start)
                return this._start;
            return this._start = this._end.shift(this._duration.mult(-1));
        }
        _end;
        get end() {
            if (this._end)
                return this._end;
            return this._end = this._start.shift(this._duration);
        }
        _duration;
        get duration() {
            if (this._duration)
                return this._duration;
            return this._duration = new $mol_time_duration(this._end.valueOf() - this._start.valueOf());
        }
        toJSON() { return this.toString(); }
        toString() {
            return (this._start || this._duration || '').toString() + '/' + (this._end || this._duration || '').toString();
        }
        [Symbol.toPrimitive](mode) {
            return this.toString();
        }
    }
    $.$mol_time_interval = $mol_time_interval;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_dom_parse(text, type = 'application/xhtml+xml') {
        const parser = new $mol_dom_context.DOMParser();
        const doc = parser.parseFromString(text, type);
        const error = doc.getElementsByTagName('parsererror');
        if (error.length)
            throw new Error(error[0].textContent);
        return doc;
    }
    $.$mol_dom_parse = $mol_dom_parse;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$hyoo_crus_vary_mapping = {
        nil: null,
        bin: Uint8Array,
        bool: Boolean,
        int: BigInt,
        real: Number,
        ints: BigInt64Array,
        reals: Float64Array,
        ref: Symbol,
        str: String,
        time: $mol_time_moment,
        dur: $mol_time_duration,
        range: $mol_time_interval,
        json: Object,
        jsan: Array,
        dom: $mol_dom_context.Element,
        tree: $mol_tree2,
    };
    let $hyoo_crus_vary_tip;
    (function ($hyoo_crus_vary_tip) {
        $hyoo_crus_vary_tip[$hyoo_crus_vary_tip["nil"] = 1] = "nil";
        $hyoo_crus_vary_tip[$hyoo_crus_vary_tip["bin"] = 2] = "bin";
        $hyoo_crus_vary_tip[$hyoo_crus_vary_tip["bool"] = 3] = "bool";
        $hyoo_crus_vary_tip[$hyoo_crus_vary_tip["int"] = 4] = "int";
        $hyoo_crus_vary_tip[$hyoo_crus_vary_tip["real"] = 5] = "real";
        $hyoo_crus_vary_tip[$hyoo_crus_vary_tip["ints"] = 6] = "ints";
        $hyoo_crus_vary_tip[$hyoo_crus_vary_tip["reals"] = 7] = "reals";
        $hyoo_crus_vary_tip[$hyoo_crus_vary_tip["ref"] = 8] = "ref";
        $hyoo_crus_vary_tip[$hyoo_crus_vary_tip["str"] = 16] = "str";
        $hyoo_crus_vary_tip[$hyoo_crus_vary_tip["time"] = 17] = "time";
        $hyoo_crus_vary_tip[$hyoo_crus_vary_tip["dur"] = 18] = "dur";
        $hyoo_crus_vary_tip[$hyoo_crus_vary_tip["range"] = 19] = "range";
        $hyoo_crus_vary_tip[$hyoo_crus_vary_tip["json"] = 20] = "json";
        $hyoo_crus_vary_tip[$hyoo_crus_vary_tip["jsan"] = 21] = "jsan";
        $hyoo_crus_vary_tip[$hyoo_crus_vary_tip["dom"] = 22] = "dom";
        $hyoo_crus_vary_tip[$hyoo_crus_vary_tip["tree"] = 23] = "tree";
    })($hyoo_crus_vary_tip = $.$hyoo_crus_vary_tip || ($.$hyoo_crus_vary_tip = {}));
    function $hyoo_crus_vary_switch(vary, ways) {
        if (vary === null)
            return ways.nil(vary);
        switch (typeof vary) {
            case "boolean": return ways.bool(vary);
            case "bigint": return ways.int(vary);
            case "number": return ways.real(vary);
            case "string": return ways.str(vary);
            case 'symbol': return ways.ref(vary);
        }
        switch (Reflect.getPrototypeOf(vary)) {
            case Object.prototype: return ways.json(vary);
            case Array.prototype: return ways.jsan(vary);
            case Uint8Array.prototype: return ways.bin(vary);
            case BigInt64Array.prototype: return ways.ints(vary);
            case Float64Array.prototype: return ways.reals(vary);
            case $mol_time_moment.prototype: return ways.time(vary);
            case $mol_time_duration.prototype: return ways.dur(vary);
            case $mol_time_interval.prototype: return ways.range(vary);
            case $mol_tree2.prototype: return ways.tree(vary);
        }
        if (vary instanceof $mol_dom_context.Element)
            return ways.dom(vary);
        return $mol_fail(new TypeError(`Unsupported vary type`));
    }
    $.$hyoo_crus_vary_switch = $hyoo_crus_vary_switch;
    function $hyoo_crus_vary_encode(vary) {
        return $hyoo_crus_vary_switch(vary, {
            nil: vary => ({ tip: 'nil', bin: new Uint8Array([]) }),
            bin: vary => ({ tip: 'bin', bin: vary }),
            bool: vary => ({ tip: 'bool', bin: new Uint8Array([Number(vary)]) }),
            int: vary => ({ tip: 'int', bin: new Uint8Array(new BigInt64Array([vary]).buffer) }),
            ints: vary => ({ tip: 'ints', bin: new Uint8Array(vary.buffer, vary.byteLength, vary.byteLength) }),
            real: vary => ({ tip: 'real', bin: new Uint8Array(new Float64Array([vary]).buffer) }),
            reals: vary => ({ tip: 'reals', bin: new Uint8Array(vary.buffer, vary.byteLength, vary.byteLength) }),
            ref: vary => ({ tip: 'ref', bin: $hyoo_crus_ref_encode(vary) }),
            str: vary => ({ tip: 'str', bin: $mol_charset_encode(vary) }),
            time: vary => ({ tip: 'time', bin: $mol_charset_encode(String(vary)) }),
            dur: vary => ({ tip: 'dur', bin: $mol_charset_encode(String(vary)) }),
            range: vary => ({ tip: 'range', bin: $mol_charset_encode(String(vary)) }),
            json: vary => ({ tip: 'json', bin: $mol_charset_encode(JSON.stringify(vary)) }),
            jsan: vary => ({ tip: 'jsan', bin: $mol_charset_encode(JSON.stringify(vary)) }),
            dom: vary => ({ tip: 'dom', bin: $mol_charset_encode($mol_dom_serialize(vary)) }),
            tree: vary => ({ tip: 'tree', bin: $mol_charset_encode(String(vary)) }),
        });
    }
    $.$hyoo_crus_vary_encode = $hyoo_crus_vary_encode;
    function $hyoo_crus_vary_decode({ tip, bin }) {
        switch (tip) {
            case 'nil': return null;
            case 'bin': return bin;
            case 'bool': return Boolean(bin[0]);
            case 'int': return new BigInt64Array(bin.buffer, bin.byteOffset, bin.byteLength / 8)[0];
            case 'ints': return new BigInt64Array(bin.buffer, bin.byteOffset, bin.byteLength / 8);
            case 'real': return new Float64Array(bin.buffer, bin.byteOffset, bin.byteLength / 8)[0];
            case 'reals': return new Float64Array(bin.buffer, bin.byteOffset, bin.byteLength / 8);
            case 'ref': return $hyoo_crus_ref_decode(bin);
            case 'str': return $mol_charset_decode(bin);
            case 'time': return new $mol_time_moment($mol_charset_decode(bin));
            case 'dur': return new $mol_time_duration($mol_charset_decode(bin));
            case 'range': return new $mol_time_interval($mol_charset_decode(bin));
            case 'json': return JSON.parse($mol_charset_decode(bin));
            case 'jsan': return JSON.parse($mol_charset_decode(bin));
            case 'dom': return $mol_dom_parse($mol_charset_decode(bin)).documentElement;
            case 'tree': return $$.$mol_tree2_from_string($mol_charset_decode(bin));
        }
    }
    $.$hyoo_crus_vary_decode = $hyoo_crus_vary_decode;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    $.$mol_jsx_prefix = '';
    $.$mol_jsx_crumbs = '';
    $.$mol_jsx_booked = null;
    $.$mol_jsx_document = {
        getElementById: () => null,
        createElementNS: (space, name) => $mol_dom_context.document.createElementNS(space, name),
        createDocumentFragment: () => $mol_dom_context.document.createDocumentFragment(),
    };
    $.$mol_jsx_frag = '';
    function $mol_jsx(Elem, props, ...childNodes) {
        const id = props && props.id || '';
        const guid = id ? $.$mol_jsx_prefix ? $.$mol_jsx_prefix + '/' + id : id : $.$mol_jsx_prefix;
        const crumbs_self = id ? $.$mol_jsx_crumbs.replace(/(\S+)/g, `$1_${id.replace(/\/.*/i, '')}`) : $.$mol_jsx_crumbs;
        if (Elem && $.$mol_jsx_booked) {
            if ($.$mol_jsx_booked.has(id)) {
                $mol_fail(new Error(`JSX already has tag with id ${JSON.stringify(guid)}`));
            }
            else {
                $.$mol_jsx_booked.add(id);
            }
        }
        let node = guid ? $.$mol_jsx_document.getElementById(guid) : null;
        if ($.$mol_jsx_prefix) {
            const prefix_ext = $.$mol_jsx_prefix;
            const booked_ext = $.$mol_jsx_booked;
            const crumbs_ext = $.$mol_jsx_crumbs;
            for (const field in props) {
                const func = props[field];
                if (typeof func !== 'function')
                    continue;
                const wrapper = function (...args) {
                    const prefix = $.$mol_jsx_prefix;
                    const booked = $.$mol_jsx_booked;
                    const crumbs = $.$mol_jsx_crumbs;
                    try {
                        $.$mol_jsx_prefix = prefix_ext;
                        $.$mol_jsx_booked = booked_ext;
                        $.$mol_jsx_crumbs = crumbs_ext;
                        return func.call(this, ...args);
                    }
                    finally {
                        $.$mol_jsx_prefix = prefix;
                        $.$mol_jsx_booked = booked;
                        $.$mol_jsx_crumbs = crumbs;
                    }
                };
                $mol_func_name_from(wrapper, func);
                props[field] = wrapper;
            }
        }
        if (typeof Elem !== 'string') {
            if ('prototype' in Elem) {
                const view = node && node[String(Elem)] || new Elem;
                Object.assign(view, props);
                view[Symbol.toStringTag] = guid;
                view.childNodes = childNodes;
                if (!view.ownerDocument)
                    view.ownerDocument = $.$mol_jsx_document;
                view.className = (crumbs_self ? crumbs_self + ' ' : '') + (Elem['name'] || Elem);
                node = view.valueOf();
                node[String(Elem)] = view;
                return node;
            }
            else {
                const prefix = $.$mol_jsx_prefix;
                const booked = $.$mol_jsx_booked;
                const crumbs = $.$mol_jsx_crumbs;
                try {
                    $.$mol_jsx_prefix = guid;
                    $.$mol_jsx_booked = new Set;
                    $.$mol_jsx_crumbs = (crumbs_self ? crumbs_self + ' ' : '') + (Elem['name'] || Elem);
                    return Elem(props, ...childNodes);
                }
                finally {
                    $.$mol_jsx_prefix = prefix;
                    $.$mol_jsx_booked = booked;
                    $.$mol_jsx_crumbs = crumbs;
                }
            }
        }
        if (!node) {
            node = Elem
                ? $.$mol_jsx_document.createElementNS(props?.xmlns ?? 'http://www.w3.org/1999/xhtml', Elem)
                : $.$mol_jsx_document.createDocumentFragment();
        }
        $mol_dom_render_children(node, [].concat(...childNodes));
        if (!Elem)
            return node;
        if (guid)
            node.id = guid;
        for (const key in props) {
            if (key === 'id')
                continue;
            if (typeof props[key] === 'string') {
                if (typeof node[key] === 'string')
                    node[key] = props[key];
                node.setAttribute(key, props[key]);
            }
            else if (props[key] &&
                typeof props[key] === 'object' &&
                Reflect.getPrototypeOf(props[key]) === Reflect.getPrototypeOf({})) {
                if (typeof node[key] === 'object') {
                    Object.assign(node[key], props[key]);
                    continue;
                }
            }
            else {
                node[key] = props[key];
            }
        }
        if ($.$mol_jsx_crumbs)
            node.className = (props?.['class'] ? props['class'] + ' ' : '') + crumbs_self;
        return node;
    }
    $.$mol_jsx = $mol_jsx;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_tree2_bin_to_bytes(tree) {
        return Uint8Array.from(tree.kids, kid => parseInt(kid.value, 16));
    }
    $.$mol_tree2_bin_to_bytes = $mol_tree2_bin_to_bytes;
    function $mol_tree2_bin_from_bytes(bytes, span = $mol_span.unknown) {
        return $mol_tree2.list(Array.from(bytes, code => {
            return $mol_tree2.data(code.toString(16).padStart(2, '0'), [], span);
        }), span);
    }
    $.$mol_tree2_bin_from_bytes = $mol_tree2_bin_from_bytes;
    function $mol_tree2_bin_from_string(str, span = $mol_span.unknown) {
        return $mol_tree2_bin_from_bytes([...new TextEncoder().encode(str)], span);
    }
    $.$mol_tree2_bin_from_string = $mol_tree2_bin_from_string;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_tree2_xml_from_dom(dom) {
        switch (dom.nodeType) {
            case dom.DOCUMENT_NODE: {
                let kids = [];
                for (const kid of dom.childNodes) {
                    kids.push($mol_tree2_xml_from_dom(kid));
                }
                return $mol_tree2.list(kids);
            }
            case dom.PROCESSING_INSTRUCTION_NODE: {
                return $mol_tree2.struct('?', [
                    $mol_tree2.struct(dom.nodeName, dom.nodeValue.split(' ').map(chunk => {
                        const [, name, value] = /^(.*?)(?:="(.*?)")?$/.exec(chunk);
                        const kids = value ? [$mol_tree2.data(value)] : [];
                        return $mol_tree2.struct(name, kids);
                    }))
                ]);
            }
            case dom.DOCUMENT_TYPE_NODE: {
                const dom2 = dom;
                return $mol_tree2.struct('!', [
                    $mol_tree2.struct('DOCTYPE', [
                        $mol_tree2.struct(dom2.name)
                    ])
                ]);
            }
            case dom.ELEMENT_NODE: {
                let kids = [];
                for (const attr of dom.attributes) {
                    kids.push($mol_tree2.struct('@', [
                        $mol_tree2.struct(attr.nodeName, [
                            $mol_tree2.data(attr.nodeValue)
                        ])
                    ]));
                }
                for (const kid of dom.childNodes) {
                    const k = $mol_tree2_xml_from_dom(kid);
                    if (k.type || k.value)
                        kids.push(k);
                }
                return $mol_tree2.struct(dom.nodeName, kids);
            }
            case dom.COMMENT_NODE: {
                return $mol_tree2.struct('--', [
                    $mol_tree2.data(dom.nodeValue)
                ]);
            }
            case dom.TEXT_NODE: {
                if (!dom.nodeValue.trim())
                    return $mol_tree2.list([]);
                return $mol_tree2.data(dom.nodeValue.replace(/\s+/g, ' '));
            }
        }
        return $mol_fail(new Error(`Unsupported node ${dom.nodeName}`));
    }
    $.$mol_tree2_xml_from_dom = $mol_tree2_xml_from_dom;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $hyoo_crus_vary_cast_bin(vary) {
        return vary === null || vary === '' ? null : $hyoo_crus_vary_encode(vary).bin;
    }
    $.$hyoo_crus_vary_cast_bin = $hyoo_crus_vary_cast_bin;
    function $hyoo_crus_vary_cast_bool(vary) {
        return $hyoo_crus_vary_switch(vary, {
            nil: vary => null,
            bin: vary => Boolean(vary.length),
            bool: vary => vary,
            int: vary => Boolean(vary),
            real: vary => Boolean(vary),
            ints: vary => Boolean(vary.length),
            reals: vary => Boolean(vary.length),
            ref: vary => Boolean(vary.description),
            str: vary => Boolean(vary),
            time: vary => Boolean(vary.valueOf()),
            dur: vary => Boolean(vary.valueOf()),
            range: vary => Boolean(vary.duration.valueOf()),
            json: vary => Boolean(Reflect.ownKeys(vary).length),
            jsan: vary => Boolean(vary.length),
            dom: vary => Boolean(vary.attributes.length + vary.childNodes.length),
            tree: vary => Boolean(vary.value || vary.kids.length),
        });
    }
    $.$hyoo_crus_vary_cast_bool = $hyoo_crus_vary_cast_bool;
    function $hyoo_crus_vary_cast_int(vary) {
        return $hyoo_crus_vary_switch(vary, {
            nil: vary => null,
            bin: vary => BigInt(vary.length),
            bool: vary => BigInt(vary),
            int: vary => vary,
            real: vary => Number.isFinite(vary) ? BigInt(Math.trunc(vary)) : null,
            ints: vary => BigInt(vary.length),
            reals: vary => BigInt(vary.length),
            ref: vary => null,
            str: vary => {
                try {
                    return vary ? BigInt(vary) : null;
                }
                catch {
                    return null;
                }
            },
            time: vary => BigInt(vary.valueOf()),
            dur: vary => BigInt(vary.valueOf()),
            range: vary => BigInt(vary.duration.valueOf()),
            json: vary => BigInt(Reflect.ownKeys(vary).length),
            jsan: vary => BigInt(vary.length),
            dom: vary => BigInt(vary.attributes.length + vary.childNodes.length),
            tree: vary => {
                try {
                    return BigInt(vary.value);
                }
                catch {
                    return BigInt(vary.kids.length);
                }
            },
        });
    }
    $.$hyoo_crus_vary_cast_int = $hyoo_crus_vary_cast_int;
    function $hyoo_crus_vary_cast_real(vary) {
        return $hyoo_crus_vary_switch(vary, {
            nil: vary => null,
            bin: vary => vary.length,
            bool: vary => Number(vary),
            int: vary => Number(vary),
            real: vary => vary,
            ints: vary => vary.length,
            reals: vary => vary.length,
            ref: vary => null,
            str: vary => vary ? Number(vary) : null,
            time: vary => vary.valueOf(),
            dur: vary => vary.valueOf(),
            range: vary => vary.duration.valueOf(),
            json: vary => Reflect.ownKeys(vary).length,
            jsan: vary => vary.length,
            dom: vary => Number(vary.attributes.length + vary.childNodes.length),
            tree: vary => Number(vary.value || vary.kids.length),
        });
    }
    $.$hyoo_crus_vary_cast_real = $hyoo_crus_vary_cast_real;
    function $hyoo_crus_vary_cast_ints(vary) {
        return $hyoo_crus_vary_switch(vary, {
            nil: vary => null,
            bin: vary => new BigInt64Array([...vary].map(BigInt)),
            bool: vary => vary ? new BigInt64Array([1n]) : null,
            int: vary => new BigInt64Array([vary]),
            real: vary => Number.isFinite(vary) ? new BigInt64Array([BigInt(vary)]) : null,
            ints: vary => vary,
            reals: vary => new BigInt64Array([...vary].map(BigInt)),
            ref: vary => null,
            str: vary => {
                if (!vary)
                    return null;
                return new BigInt64Array(vary.split(',').map(v => BigInt(v) || 0n));
            },
            time: vary => new BigInt64Array([BigInt(vary.valueOf())]),
            dur: vary => new BigInt64Array([BigInt(vary.valueOf())]),
            range: vary => null,
            json: vary => null,
            jsan: vary => null,
            dom: vary => null,
            tree: vary => null,
        });
    }
    $.$hyoo_crus_vary_cast_ints = $hyoo_crus_vary_cast_ints;
    function $hyoo_crus_vary_cast_reals(vary) {
        return $hyoo_crus_vary_switch(vary, {
            nil: vary => null,
            bin: vary => new Float64Array([...vary]),
            bool: vary => vary ? new Float64Array([1]) : null,
            int: vary => new Float64Array([Number(vary)]),
            real: vary => (vary && Number.isFinite(vary)) ? new Float64Array([vary]) : null,
            ints: vary => new Float64Array([...vary].map(Number)),
            reals: vary => vary,
            ref: vary => null,
            str: vary => {
                if (!vary)
                    return null;
                return new Float64Array(vary.split(',').map(v => Number(v) || 0));
            },
            time: vary => new Float64Array([vary.valueOf()]),
            dur: vary => new Float64Array([vary.valueOf()]),
            range: vary => null,
            json: vary => null,
            jsan: vary => null,
            dom: vary => null,
            tree: vary => null,
        });
    }
    $.$hyoo_crus_vary_cast_reals = $hyoo_crus_vary_cast_reals;
    function $hyoo_crus_vary_cast_ref(vary) {
        return $hyoo_crus_vary_switch(vary, {
            nil: vary => null,
            bin: vary => (!vary.length || vary.length % 6) ? null : $hyoo_crus_ref_decode(vary),
            bool: vary => null,
            int: vary => null,
            real: vary => null,
            ints: vary => null,
            reals: vary => null,
            ref: vary => vary,
            str: vary => {
                try {
                    return $hyoo_crus_ref(vary);
                }
                catch {
                    return null;
                }
            },
            time: vary => null,
            dur: vary => null,
            range: vary => null,
            json: vary => null,
            jsan: vary => null,
            dom: vary => null,
            tree: vary => {
                try {
                    return $hyoo_crus_ref(vary.type);
                }
                catch {
                    return null;
                }
            },
        });
    }
    $.$hyoo_crus_vary_cast_ref = $hyoo_crus_vary_cast_ref;
    function $hyoo_crus_vary_cast_str(vary) {
        return $hyoo_crus_vary_switch(vary, {
            nil: vary => null,
            bin: vary => [...vary].map(n => n.toString(16).padStart(2, '0')).join(''),
            bool: vary => String(vary),
            int: vary => String(vary),
            real: vary => String(vary),
            ints: vary => vary.join(','),
            reals: vary => vary.join(','),
            ref: vary => vary.description,
            str: vary => vary,
            time: vary => String(vary),
            dur: vary => String(vary),
            range: vary => String(vary),
            json: vary => JSON.stringify(vary),
            jsan: vary => JSON.stringify(vary),
            dom: vary => $mol_dom_serialize(vary),
            tree: vary => String(vary),
        });
    }
    $.$hyoo_crus_vary_cast_str = $hyoo_crus_vary_cast_str;
    function $hyoo_crus_vary_cast_time(vary) {
        return $hyoo_crus_vary_switch(vary, {
            nil: vary => null,
            bin: vary => null,
            bool: vary => null,
            int: vary => new $mol_time_moment(Number(vary & 0xffffffffffffn)),
            real: vary => {
                try {
                    return new $mol_time_moment(vary);
                }
                catch {
                    return null;
                }
            },
            ints: vary => null,
            reals: vary => null,
            ref: vary => null,
            str: vary => {
                try {
                    return vary ? new $mol_time_moment(vary) : null;
                }
                catch {
                    return null;
                }
            },
            time: vary => vary,
            dur: vary => null,
            range: vary => null,
            json: vary => {
                try {
                    return new $mol_time_moment(vary);
                }
                catch {
                    return null;
                }
            },
            jsan: vary => null,
            dom: vary => null,
            tree: vary => null,
        });
    }
    $.$hyoo_crus_vary_cast_time = $hyoo_crus_vary_cast_time;
    function $hyoo_crus_vary_cast_dur(vary) {
        return $hyoo_crus_vary_switch(vary, {
            nil: vary => null,
            bin: vary => null,
            bool: vary => null,
            int: vary => new $mol_time_duration(Number(vary & 0xffffffffffffn)),
            real: vary => {
                try {
                    return new $mol_time_duration(vary);
                }
                catch {
                    return null;
                }
            },
            ints: vary => null,
            reals: vary => null,
            ref: vary => null,
            str: vary => {
                try {
                    return new $mol_time_duration(vary);
                }
                catch {
                    return null;
                }
            },
            time: vary => null,
            dur: vary => vary,
            range: vary => null,
            json: vary => new $mol_time_duration(vary),
            jsan: vary => null,
            dom: vary => null,
            tree: vary => null,
        });
    }
    $.$hyoo_crus_vary_cast_dur = $hyoo_crus_vary_cast_dur;
    function $hyoo_crus_vary_cast_range(vary) {
        return $hyoo_crus_vary_switch(vary, {
            nil: vary => null,
            bin: vary => null,
            bool: vary => null,
            int: vary => null,
            real: vary => null,
            ints: vary => null,
            reals: vary => null,
            ref: vary => null,
            str: vary => {
                try {
                    return vary ? new $mol_time_interval(vary) : null;
                }
                catch {
                    return null;
                }
            },
            time: vary => new $mol_time_interval({ start: vary, duration: 0 }),
            dur: vary => null,
            range: vary => vary,
            json: vary => {
                try {
                    return new $mol_time_interval(vary);
                }
                catch {
                    return null;
                }
            },
            jsan: vary => null,
            dom: vary => null,
            tree: vary => null,
        });
    }
    $.$hyoo_crus_vary_cast_range = $hyoo_crus_vary_cast_range;
    function $hyoo_crus_vary_cast_json(vary) {
        return $hyoo_crus_vary_switch(vary, {
            nil: vary => null,
            bin: vary => null,
            bool: vary => null,
            int: vary => null,
            real: vary => null,
            ints: vary => null,
            reals: vary => null,
            ref: vary => null,
            str: vary => {
                if (!vary)
                    return null;
                try {
                    const res = JSON.parse(vary);
                    if (typeof res === 'object')
                        return res;
                    return null;
                }
                catch {
                    return null;
                }
            },
            time: vary => ({ ...vary }),
            dur: vary => ({ ...vary }),
            range: vary => ({ ...vary }),
            json: vary => vary,
            jsan: vary => Object(vary[0]),
            dom: vary => null,
            tree: vary => null,
        });
    }
    $.$hyoo_crus_vary_cast_json = $hyoo_crus_vary_cast_json;
    function $hyoo_crus_vary_cast_jsan(vary) {
        return $hyoo_crus_vary_switch(vary, {
            nil: vary => null,
            bin: vary => [...vary],
            bool: vary => [vary],
            int: vary => [vary.toString()],
            real: vary => Number.isFinite(vary) ? [vary] : null,
            ints: vary => [...vary].map(v => Number(v)),
            reals: vary => [...vary],
            ref: vary => [vary.description],
            str: vary => {
                if (!vary)
                    return null;
                try {
                    return [].concat(JSON.parse(vary));
                }
                catch {
                    return [vary];
                }
            },
            time: vary => [vary.toJSON()],
            dur: vary => [vary.toJSON()],
            range: vary => [vary.toJSON()],
            json: vary => [vary],
            jsan: vary => vary,
            dom: vary => [$mol_dom_serialize(vary)],
            tree: vary => [vary.toString()],
        });
    }
    $.$hyoo_crus_vary_cast_jsan = $hyoo_crus_vary_cast_jsan;
    function $hyoo_crus_vary_cast_dom(vary) {
        return $hyoo_crus_vary_switch(vary, {
            nil: vary => null,
            bin: vary => $mol_jsx("body", null, vary && $mol_base64_ae_encode(vary)),
            bool: vary => $mol_jsx("body", null, vary),
            int: vary => $mol_jsx("body", null, vary),
            real: vary => $mol_jsx("body", null, vary),
            ints: vary => $mol_jsx("body", null, vary.join(',')),
            reals: vary => $mol_jsx("body", null, vary.join(',')),
            ref: vary => $mol_jsx("body", null, vary.description),
            str: vary => {
                if (!vary)
                    return null;
                try {
                    return vary ? $mol_dom_parse(vary, 'application/xhtml+xml').documentElement : null;
                }
                catch {
                    return $mol_jsx("body", null, vary);
                }
            },
            time: vary => $mol_jsx("body", null, vary),
            dur: vary => $mol_jsx("body", null, vary),
            range: vary => $mol_jsx("body", null, vary),
            json: vary => $mol_jsx("body", null, JSON.stringify(vary)),
            jsan: vary => $mol_jsx("body", null, JSON.stringify(vary)),
            dom: vary => vary,
            tree: vary => $mol_jsx("body", null, vary),
        });
    }
    $.$hyoo_crus_vary_cast_dom = $hyoo_crus_vary_cast_dom;
    function $hyoo_crus_vary_cast_tree(vary) {
        return $hyoo_crus_vary_switch(vary, {
            nil: vary => null,
            bin: vary => $mol_tree2_bin_from_bytes(vary),
            bool: vary => $mol_tree2.struct(vary.toString()),
            int: vary => $mol_tree2.struct(vary.toString()),
            real: vary => $mol_tree2.struct(vary.toString()),
            ints: vary => $mol_tree2.list([...vary].map(v => $mol_tree2.struct(v.toString()))),
            reals: vary => $mol_tree2.list([...vary].map(v => $mol_tree2.struct(v.toString()))),
            ref: vary => $mol_tree2.struct(vary.description),
            str: vary => {
                if (!vary)
                    return null;
                try {
                    return $$.$mol_tree2_from_string(vary);
                }
                catch {
                    return $$.$mol_tree2.data(vary);
                }
            },
            time: vary => $mol_tree2.struct(vary.toString()),
            dur: vary => $mol_tree2.struct(vary.toString()),
            range: vary => $mol_tree2.struct(vary.toString()),
            json: vary => $$.$mol_tree2_from_json(vary),
            jsan: vary => $$.$mol_tree2_from_json(vary),
            dom: vary => $$.$mol_tree2_xml_from_dom(vary),
            tree: vary => vary,
        });
    }
    $.$hyoo_crus_vary_cast_tree = $hyoo_crus_vary_cast_tree;
    $.$hyoo_crus_vary_cast_funcs = {
        nil: () => null,
        bin: $hyoo_crus_vary_cast_bin,
        bool: $hyoo_crus_vary_cast_bool,
        int: $hyoo_crus_vary_cast_int,
        real: $hyoo_crus_vary_cast_real,
        ints: $hyoo_crus_vary_cast_ints,
        reals: $hyoo_crus_vary_cast_reals,
        ref: $hyoo_crus_vary_cast_ref,
        str: $hyoo_crus_vary_cast_str,
        time: $hyoo_crus_vary_cast_time,
        dur: $hyoo_crus_vary_cast_dur,
        range: $hyoo_crus_vary_cast_range,
        json: $hyoo_crus_vary_cast_json,
        jsan: $hyoo_crus_vary_cast_jsan,
        dom: $hyoo_crus_vary_cast_dom,
        tree: $hyoo_crus_vary_cast_tree,
    };
    function $hyoo_crus_vary_cast(tip, vary) {
        return $.$hyoo_crus_vary_cast_funcs[tip](vary);
    }
    $.$hyoo_crus_vary_cast = $hyoo_crus_vary_cast;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    let sponge = new Uint32Array(80);
    function $mol_crypto_hash(input) {
        const data = input instanceof Uint8Array
            ? input
            : new Uint8Array(input.buffer, input.byteOffset, input.byteLength);
        const bits = data.byteLength << 3;
        const kbits = bits >> 5;
        const kword = 0x80 << (24 - bits & 0b11111);
        const bytes = 16 + (bits + 64 >>> 9 << 4);
        const klens = bytes - 1;
        const words = new Int32Array(data.buffer, data.byteOffset, data.byteLength >> 2);
        let tail = 0;
        for (let i = words.length * 4; i < data.length; ++i) {
            tail |= data[i] << (i << 3 & 0b11000);
        }
        const hash = new Int32Array([1732584193, -271733879, -1732584194, 271733878, -1009589776]);
        for (let i = 0; i < bytes; i += 16) {
            let h0 = hash[0];
            let h1 = hash[1];
            let h2 = hash[2];
            let h3 = hash[3];
            let h4 = hash[4];
            for (let j = 0; j < 16; ++j) {
                const k = i + j;
                if (k === klens) {
                    sponge[j] = bits;
                }
                else {
                    let word = k === words.length ? tail :
                        k > words.length ? 0 :
                            words[k];
                    word = word << 24 | word << 8 & 0xFF0000 | word >>> 8 & 0xFF00 | word >>> 24 & 0xFF;
                    if (k === kbits)
                        word |= kword;
                    sponge[j] = word;
                }
                const next = ((h1 & h2 | ~h1 & h3) + 1518500249 + h4 + (sponge[j] >>> 0) + ((h0 << 5) | (h0 >>> 27))) | 0;
                h4 = h3;
                h3 = h2;
                h2 = (h1 << 30) | (h1 >>> 2);
                h1 = h0;
                h0 = next;
            }
            for (let j = 16; j < 20; ++j) {
                const shuffle = sponge[j - 3] ^ sponge[j - 8] ^ sponge[j - 14] ^ sponge[j - 16];
                sponge[j] = shuffle << 1 | shuffle >>> 31;
                const next = ((h1 & h2 | ~h1 & h3) + 1518500249 + h4 + (sponge[j] >>> 0) + ((h0 << 5) | (h0 >>> 27))) | 0;
                h4 = h3;
                h3 = h2;
                h2 = (h1 << 30) | (h1 >>> 2);
                h1 = h0;
                h0 = next;
            }
            for (let j = 20; j < 40; ++j) {
                const shuffle = sponge[j - 3] ^ sponge[j - 8] ^ sponge[j - 14] ^ sponge[j - 16];
                sponge[j] = shuffle << 1 | shuffle >>> 31;
                const next = ((h1 ^ h2 ^ h3) + 1859775393 + h4 + (sponge[j] >>> 0) + ((h0 << 5) | (h0 >>> 27))) | 0;
                h4 = h3;
                h3 = h2;
                h2 = (h1 << 30) | (h1 >>> 2);
                h1 = h0;
                h0 = next;
            }
            for (let j = 40; j < 60; ++j) {
                const shuffle = sponge[j - 3] ^ sponge[j - 8] ^ sponge[j - 14] ^ sponge[j - 16];
                sponge[j] = shuffle << 1 | shuffle >>> 31;
                const next = ((h1 & h2 | h1 & h3 | h2 & h3) - 1894007588 + h4 + (sponge[j] >>> 0) + ((h0 << 5) | (h0 >>> 27))) | 0;
                h4 = h3;
                h3 = h2;
                h2 = (h1 << 30) | (h1 >>> 2);
                h1 = h0;
                h0 = next;
            }
            for (let j = 60; j < 80; ++j) {
                const shuffle = sponge[j - 3] ^ sponge[j - 8] ^ sponge[j - 14] ^ sponge[j - 16];
                sponge[j] = shuffle << 1 | shuffle >>> 31;
                const next = ((h1 ^ h2 ^ h3) - 899497514 + h4 + (sponge[j] >>> 0) + ((h0 << 5) | (h0 >>> 27))) | 0;
                h4 = h3;
                h3 = h2;
                h2 = (h1 << 30) | (h1 >>> 2);
                h1 = h0;
                h0 = next;
            }
            hash[0] += h0;
            hash[1] += h1;
            hash[2] += h2;
            hash[3] += h3;
            hash[4] += h4;
        }
        for (let i = 0; i < 20; ++i) {
            const word = hash[i];
            hash[i] = word << 24 | word << 8 & 0xFF0000 | word >>> 8 & 0xFF00 | word >>> 24 & 0xFF;
        }
        return new Uint8Array(hash.buffer);
    }
    $.$mol_crypto_hash = $mol_crypto_hash;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_bus extends $mol_object {
        name;
        handle;
        channel;
        constructor(name, handle) {
            super();
            this.name = name;
            this.handle = handle;
            const channel = new BroadcastChannel(name);
            channel.onmessage = (event) => this.handle(event.data);
            this.channel = channel;
        }
        destructor() {
            this.channel.close();
        }
        send(data) {
            this.channel.postMessage(data);
        }
    }
    $.$mol_bus = $mol_bus;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $hyoo_crus_log() {
        return this.$mol_state_arg.value('hyoo_crus_log') !== null;
    }
    $.$hyoo_crus_log = $hyoo_crus_log;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_wire_race(...tasks) {
        const results = tasks.map(task => {
            try {
                return task();
            }
            catch (error) {
                return error;
            }
        });
        const promises = results.filter(res => $mol_promise_like(res));
        if (promises.length)
            $mol_fail(Promise.race(promises));
        const error = results.find(res => res instanceof Error);
        if (error)
            $mol_fail(error);
        return results;
    }
    $.$mol_wire_race = $mol_wire_race;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    let $hyoo_crus_land_root;
    (function ($hyoo_crus_land_root) {
        $hyoo_crus_land_root["data"] = "";
        $hyoo_crus_land_root["tine"] = "AQAAAAAA";
    })($hyoo_crus_land_root = $.$hyoo_crus_land_root || ($.$hyoo_crus_land_root = {}));
    class $hyoo_crus_land extends $mol_object {
        ref() {
            return this.auth().lord();
        }
        auth() {
            return this.$.$hyoo_crus_auth.current();
        }
        faces = new $hyoo_crus_face_map;
        pass = new $mol_wire_dict();
        gift = new $mol_wire_dict();
        sand = new $mol_wire_dict();
        self_all = new $mol_wire_dict();
        self_make(idea = Math.floor(Math.random() * 2 ** 48)) {
            const auth = this.auth();
            const rank = this.lord_rank(auth.lord());
            if (rank < $hyoo_crus_rank_tier.post)
                $mol_fail(new Error(`Rank too low (${rank})`));
            for (let i = 0; i < 4096; ++i) {
                idea = (idea + 1) % 2 ** 48;
                if (!idea)
                    continue;
                const idea_str = $mol_base64_ae_encode(new Uint8Array(new BigUint64Array([BigInt(idea)]).buffer, 0, 6));
                if (this.self_all.has(idea_str))
                    continue;
                this.self_all.set(idea_str, null);
                return idea_str;
            }
            $mol_fail(new Error(`Too long self generation`));
        }
        home() {
            return this.Data($hyoo_crus_home);
        }
        area_make(idea = Math.floor(Math.random() * 2 ** 48)) {
            this.loading();
            const id = $mol_base64_ae_encode(new Uint8Array(new BigUint64Array([BigInt(idea)]).buffer, 0, 6));
            const ref = $hyoo_crus_ref($hyoo_crus_ref_lord(this.ref()).description + '_' + id);
            const area = this.$.$hyoo_crus_glob.Land(ref);
            const units = this.unit_sort([...this.pass.values(), ...this.gift.values()]).map(unit => {
                const clone = $hyoo_crus_unit.from(unit).narrow();
                clone._land = area;
                $hyoo_crus_unit_trusted.add(clone);
                return clone;
            });
            const errors = area.apply_unit(units, 'skip_check').filter(Boolean);
            for (const error of errors)
                this.$.$mol_log3_warn({
                    place: `${this}.area_make()`,
                    message: error,
                    hint: 'Send it to developer',
                });
            area.bus();
            area.sync_mine();
            area.sync_yard();
            return area;
        }
        Data(Node) {
            return this.Node(Node).Item($hyoo_crus_land_root.data);
        }
        Tine() {
            return this.Node($hyoo_crus_list_ref).Item($hyoo_crus_land_root.tine);
        }
        Node(Node) {
            return new $hyoo_crus_fund((head) => {
                if (head === 'AAAAAAAA')
                    return this.Node(Node).Item($hyoo_crus_land_root.data);
                return Node.make({
                    land: () => this.sync(),
                    head: $mol_const(head),
                });
            });
        }
        total() {
            let total = this.pass.size + this.gift.size;
            for (const peers of this.sand.values()) {
                for (const units of peers.values()) {
                    total += units.size;
                }
            }
            return total;
        }
        joined_list() {
            return [...this.pass.values()].map(unit => unit.lord());
        }
        key() {
            const pass = this.pass.get($hyoo_crus_ref_peer(this.ref()));
            if (!pass)
                return null;
            return $hyoo_crus_auth.from(pass.auth());
        }
        lord_rank(lord, next) {
            if (lord === $hyoo_crus_ref_lord(this.ref()))
                return $hyoo_crus_rank_rule;
            const prev = this.gift.get(lord)?.rank()
                ?? this.gift.get($hyoo_crus_ref(''))?.rank()
                ?? (this.encrypted() ? $hyoo_crus_rank_deny : $hyoo_crus_rank_read);
            if (next === undefined)
                return prev;
            if (next === prev)
                return prev;
            this.give(lord, next);
            return next;
        }
        peer_rank(peer) {
            const auth = this.pass.get(peer);
            if (auth)
                return this.lord_rank(auth.lord());
            return this.encrypted() ? $hyoo_crus_rank_deny : $hyoo_crus_rank_read;
        }
        unit_sort(units) {
            const dict = new Map();
            for (const unit of units)
                dict.set(unit.key(), unit);
            const lord = $hyoo_crus_ref_lord(this.ref());
            const graph = new $mol_graph();
            for (const unit of units) {
                unit.choose({
                    pass: pass => {
                        if (pass.lord() === lord)
                            return;
                        graph.link(pass.key(), 'gift:');
                    },
                    gift: gift => {
                        graph.link('pass:' + $hyoo_crus_ref_peer(gift.dest()), gift.key());
                        graph.link(gift.key(), 'pass:' + gift.peer());
                    },
                    sand: sand => {
                        graph.link(sand.key(), 'pass:' + sand.peer());
                    },
                });
            }
            graph.acyclic(() => 1);
            return [...graph.sorted].map(key => dict.get(key)).filter(Boolean);
        }
        delta_unit(face = new $hyoo_crus_face_map) {
            this.loading();
            const delta = [];
            const passed = new Set();
            const auth = (peer) => {
                if (passed.has(peer))
                    return;
                if (face.get(peer))
                    return;
                const pass = this.pass.get(peer);
                if (!pass)
                    $mol_fail(new Error(`No pass for Peer (${peer})`));
                delta.push(pass);
                passed.add(peer);
            };
            for (const [lord, unit] of this.gift) {
                const time = face.get(unit.peer()) ?? 0;
                if (time >= unit.time())
                    continue;
                auth(unit.peer());
                delta.push(unit);
            }
            for (const kids of this.sand.values()) {
                for (const peers of kids.values()) {
                    for (const unit of peers.values()) {
                        const time = face.get(unit.peer()) ?? 0;
                        if (time >= unit.time())
                            continue;
                        auth(unit.peer());
                        delta.push(unit);
                    }
                }
            }
            for (const [peer, unit] of this.pass) {
                if (passed.has(peer))
                    continue;
                if (face.has(unit.peer()))
                    continue;
                delta.push(unit);
                passed.add(peer);
            }
            if (delta.length || this.faces.total <= this.faces.total)
                return delta;
            this.$.$mol_log3_warn({
                place: this,
                message: 'Unit Absent',
                hint: 'Relax, Delta contains all Units to restore',
                face,
            });
            return this.delta_unit();
        }
        delta_pack(face = new $hyoo_crus_face_map) {
            const parts = this.delta_parts(face);
            if (!parts)
                return null;
            const pack = $hyoo_crus_pack.make(parts);
            return pack;
        }
        delta_parts(face = new $hyoo_crus_face_map) {
            const units = this.delta_unit(face);
            if (!units.length)
                return null;
            const rocks = [];
            for (let unit of units) {
                if (unit.kind() !== 'sand')
                    continue;
                const sand = unit.narrow();
                if (sand.size() <= 32)
                    continue;
                const rock = this.$.$hyoo_crus_mine.rock(sand.hash()) ?? null;
                rocks.push([sand.hash(), rock]);
            }
            return {
                lands: {
                    [this.ref()]: {
                        faces: new $hyoo_crus_face_map,
                        units,
                    },
                },
                rocks,
            };
        }
        faces_pack() {
            const pack = $hyoo_crus_pack.make({
                lands: {
                    [this.ref()]: { faces: this.faces, units: [] },
                },
                rocks: [],
            });
            return pack;
        }
        apply_unit(delta, skip_check) {
            if (!delta.length)
                return [];
            if (!skip_check)
                this.loading();
            const doubt = delta.filter(unit => !$hyoo_crus_unit_trusted.has(unit));
            if (doubt.length) {
                const errors = $mol_wire_sync(this).units_verify(doubt);
                if (errors.some(v => v))
                    return errors;
            }
            const errors = this.apply_unit_trust(delta, skip_check);
            for (const unit of doubt)
                $hyoo_crus_unit_trusted.add(unit);
            return errors;
        }
        async units_verify(units) {
            const passes = units.filter(unit => unit.kind() === 'pass');
            const auth = new Map(passes.map((unit) => [
                unit.peer(),
                $mol_crypto_key_public.from(unit.auth()),
            ]));
            const mixin = $hyoo_crus_ref_encode(this.ref());
            const mixin_lord = $hyoo_crus_ref_encode($hyoo_crus_ref_lord(this.ref()));
            return await Promise.all(units.map(async (unit) => {
                let key_public = this.key_public(unit.peer());
                if (!key_public)
                    key_public = auth.get(unit.peer()) ?? null;
                if (!key_public)
                    return `No public key for peer (${unit.peer()})`;
                const sign = unit.sign();
                let sens = unit.sens().slice();
                for (let i = 0; i < mixin.length; ++i)
                    sens[i + 2] ^= mixin[i];
                if (await key_public.verify(sens, sign))
                    return '';
                sens = unit.sens().slice();
                for (let i = 0; i < mixin_lord.length; ++i)
                    sens[i + 2] ^= mixin_lord[i];
                if (await key_public.verify(sens, sign))
                    return '';
                return `Wrong unit sign`;
            }));
        }
        apply_unit_trust(delta, skip_check) {
            return delta.map(unit => {
                let need_recheck = false;
                const res = unit.choose({
                    pass: next => {
                        const lord = next.lord();
                        const peer = next.peer();
                        if (!skip_check && this.lord_rank(lord) < next.rank_min())
                            return 'Need reg rank to join';
                        const exists = this.pass.get(peer);
                        if (exists)
                            return '';
                        this.pass.set(peer, next);
                        this.faces.time_max(peer, 0);
                        this.faces.total++;
                    },
                    gift: next => {
                        const peer = next.peer();
                        const dest = next.dest();
                        if (!skip_check && this.peer_rank(peer) < next.rank_min())
                            return 'Need law rank to change rank';
                        const prev = this.gift.get(dest);
                        if (prev && $hyoo_crus_gift.compare(prev, next) <= 0)
                            return '';
                        this.gift.set(dest, next);
                        this.faces.time_max(peer, next.time());
                        if (!prev)
                            this.faces.total++;
                        if ((prev?.rank() ?? $hyoo_crus_rank_deny) > next.rank())
                            need_recheck = true;
                    },
                    sand: next => {
                        const head = next.head();
                        const peer = next.peer();
                        const self = next.self();
                        if (!skip_check && this.peer_rank(peer) < next.rank_min())
                            return 'Need mod rank to post data';
                        let peers = this.sand.get(head);
                        if (!peers)
                            this.sand.set(head, peers = new $mol_wire_dict);
                        let units = peers.get(peer);
                        if (!units)
                            peers.set(peer, units = new $mol_wire_dict);
                        const prev = units.get(self);
                        if (prev && $hyoo_crus_sand.compare(prev, next) <= 0)
                            return '';
                        units.set(self, next);
                        this.self_all.set(self, next);
                        this.faces.time_max(peer, next.time());
                        if (!prev)
                            this.faces.total++;
                    },
                });
                if (need_recheck)
                    this.recheck();
                return res ?? '';
            });
        }
        apply_land(land) {
            return this.apply_unit(land.delta_unit());
        }
        recheck() {
            for (const [peer, pass] of this.pass) {
                if (this.lord_rank(pass.lord()) >= pass.rank_min())
                    continue;
                this.pass.delete(peer);
                this.faces.total--;
            }
            for (const [lord, gift] of this.gift) {
                if (this.peer_rank(gift.peer()) >= gift.rank_min())
                    continue;
                this.gift.delete(lord);
                this.faces.total--;
            }
            for (const [head, peers] of this.sand) {
                for (const [peer, sands] of peers) {
                    const rank = this.peer_rank(peer);
                    for (const [self, sand] of sands) {
                        if (rank >= sand.rank_min())
                            continue;
                        sands.delete(self);
                        this.faces.total--;
                    }
                }
            }
        }
        fork(preset = { '': $hyoo_crus_rank_read }) {
            const land = this.$.$hyoo_crus_glob.land_grab(preset);
            land.Tine().items_vary([this.ref()]);
            return land;
        }
        sand_ordered({ head, peer }) {
            this.sync();
            const queue = peer
                ? [...this.sand.get(head)?.get(peer)?.values() ?? []]
                : [...this.sand.get(head)?.values() ?? []].flatMap(units => [...units.values()]);
            const slices = new Map;
            for (const sand of queue)
                slices.set(sand, 0);
            merge: if (head !== $hyoo_crus_land_root.tine) {
                const tines = (this.Tine()?.items_vary().slice().reverse() ?? [])
                    .map($hyoo_crus_vary_cast_ref)
                    .filter($mol_guard_defined);
                if (!tines.length)
                    break merge;
                const exists = new Set(queue.map(sand => sand.self()));
                const glob = this.$.$hyoo_crus_glob;
                let slice = 0;
                for (const ref of tines) {
                    ++slice;
                    const land = glob.Land(ref);
                    for (const sand of land.sand_ordered({ head, peer })) {
                        if (exists.has(sand.self()))
                            continue;
                        queue.push(sand);
                        exists.add(sand.self());
                        slices.set(sand, slice);
                    }
                }
            }
            if (queue.length < 2)
                return queue;
            const compare = (left, right) => {
                return (slices.get(left) - slices.get(right)) || $hyoo_crus_sand.compare(left, right);
            };
            queue.sort(compare);
            let entry = {
                sand: null,
                next: '',
                prev: '',
            };
            const key = peer === null ? (sand) => sand.key() : (sand) => sand.self();
            const by_key = new Map([['', entry]]);
            const by_self = new Map([['', entry]]);
            while (queue.length) {
                const last = queue.pop();
                by_key.get(entry.prev).next = key(last);
                const item = { sand: last, next: '', prev: entry.prev };
                by_key.set(key(last), item);
                const exists = by_self.get(last.self());
                if (!exists || compare(exists.sand, last) < 0) {
                    by_self.set(last.self(), item);
                }
                entry.prev = key(last);
                for (let cursor = queue.length - 1; cursor >= 0; --cursor) {
                    const kid = queue[cursor];
                    let lead = by_self.get(kid.lead());
                    if (!lead)
                        continue;
                    while (lead.next && (compare(by_key.get(lead.next).sand, kid) < 0))
                        lead = by_key.get(lead.next);
                    const exists1 = by_key.get(key(kid));
                    if (exists1) {
                        if ((lead.sand ? key(lead.sand) : '') === exists1.prev) {
                            exists1.sand = kid;
                            if (cursor === queue.length - 1)
                                queue.pop();
                            continue;
                        }
                        by_key.get(exists1.prev).next = exists1.next;
                        by_key.get(exists1.next).prev = exists1.prev;
                    }
                    const follower = by_key.get(lead.next);
                    follower.prev = key(kid);
                    const item = { sand: kid, next: lead.next, prev: lead.sand ? key(lead.sand) : '' };
                    by_key.set(key(kid), item);
                    const exists2 = by_self.get(kid.self());
                    if (!exists2 || compare(exists2.sand, kid) < 0) {
                        by_self.set(kid.self(), item);
                    }
                    lead.next = key(kid);
                    if (cursor === queue.length - 1)
                        queue.pop();
                    cursor = queue.length;
                }
            }
            const res = [];
            while (entry.next) {
                entry = by_key.get(entry.next);
                res.push(entry.sand);
            }
            return res;
        }
        join() {
            const auth = this.auth();
            const prev = this.pass.get(auth.peer());
            if (prev)
                return prev;
            const next = new $hyoo_crus_pass;
            $hyoo_crus_unit_trusted.add(next);
            next.auth(auth.public().asArray());
            next._land = this;
            const error = this.apply_unit([next])[0];
            if (error)
                $mol_fail(new Error(error));
            this.broadcast();
            return next;
        }
        give(dest, rank) {
            this.join();
            const auth = this.auth();
            const unit = new $hyoo_crus_gift;
            $hyoo_crus_unit_trusted.add(unit);
            unit.rank(rank);
            unit.time(this.faces.tick());
            unit.peer(auth.peer());
            unit.dest(dest ? dest instanceof $hyoo_crus_auth ? dest.lord() : dest : $hyoo_crus_ref(''));
            unit._land = this;
            if (rank >= $hyoo_crus_rank_read) {
                const secret_land = this.secret();
                if (secret_land) {
                    if (!dest)
                        $mol_fail(new Error(`Encrypted land can't be shared to everyone`));
                    const prev = this.gift.get(dest instanceof $hyoo_crus_auth ? dest.lord() : dest);
                    if (prev && prev.rank() >= $hyoo_crus_rank_read) {
                        unit.bill().set(prev.bill());
                    }
                    else {
                        if (typeof dest === 'symbol') {
                            $mol_fail(new Error(`No pub key for lord (${dest.description})`));
                        }
                        const secret_mutual = this.secret_mutual(dest.toString());
                        if (secret_mutual) {
                            const secret_bin = $mol_wire_sync(secret_land).serial();
                            const bill = $mol_wire_sync(secret_mutual).encrypt(secret_bin, unit.salt());
                            unit.bill().set(bill);
                        }
                    }
                }
            }
            const error = this.apply_unit([unit])[0];
            if (error)
                $mol_fail(new Error(error));
            this.broadcast();
            return unit;
        }
        post(lead, head, self, vary, tag = 'term') {
            if (typeof vary === 'symbol')
                vary = $hyoo_crus_ref_relate(this.ref(), vary);
            this.join();
            const auth = this.auth();
            const unit = new $hyoo_crus_sand;
            $hyoo_crus_unit_trusted.add(unit);
            unit.time(this.faces.tick());
            unit.peer(auth.peer());
            unit.lead(lead);
            unit.head(head);
            unit._vary = vary;
            unit._land = this;
            let { tip, bin } = $hyoo_crus_vary_encode(vary);
            unit._open = bin;
            if (vary !== null && this.encrypted()) {
                unit.hash($mol_crypto_hash(bin), tip, tag);
            }
            else {
                if (bin.byteLength > 32)
                    unit.hash(this.$.$hyoo_crus_mine.hash(bin), tip, tag);
                else
                    unit.data(bin, tip, tag);
            }
            unit.self(self || this.self_make(unit.idea()));
            const error = this.apply_unit([unit])[0];
            if (error)
                $mol_fail(new Error(error));
            this.broadcast();
            return unit;
        }
        sand_move(sand, head, seat, peer = '') {
            if (sand.tip() === 'nil')
                $mol_fail(new RangeError(`Can't move wiped sand`));
            const units = this.sand_ordered({ head, peer }).filter(unit => unit.tip() !== 'nil');
            if (seat > units.length)
                $mol_fail(new RangeError(`Seat (${seat}) out of units length (${units.length})`));
            const lead = seat ? units[seat - 1].self() : '';
            const vary = this.sand_decode(sand);
            if (sand.head() === head) {
                const seat_prev = units.indexOf(sand);
                if (seat === seat_prev)
                    return;
                if (seat === seat_prev + 1)
                    return;
                const prev = seat_prev ? units[seat_prev - 1].self() : '';
                const next = units[seat_prev + 1];
                if (next)
                    this.post(prev, head, next.self(), this.sand_decode(next), next.tag());
            }
            else {
                this.sand_wipe(sand);
            }
            return this.post(lead, head, sand.self(), vary, sand.tag());
        }
        sand_wipe(sand, peer = '') {
            const head = sand.head();
            const units = this.sand_ordered({ head, peer }).filter(unit => unit.tip() !== 'nil');
            const seat = units.indexOf(sand);
            if (seat < 0)
                return sand;
            return this.post(seat ? units[seat - 1].self() : '', head, sand.self(), null, 'term');
        }
        broadcast() {
            this.$.$hyoo_crus_glob.yard().lands_news.add(this.ref());
        }
        sync() {
            this.loading();
            this.bus();
            this.sync_mine();
            this.sync_yard();
            return this;
        }
        destructor() {
            this.$.$hyoo_crus_glob.yard().forget_land(this);
        }
        sync_mine() {
            return new $mol_wire_atom('', () => this.saving()).fresh();
        }
        sync_yard() {
            return new $mol_wire_atom('', () => this.$.$hyoo_crus_glob.yard().sync_land(this.ref())).fresh();
        }
        bus() {
            return new this.$.$mol_bus(`$hyoo_crus_land:${this.ref().description}`, $mol_wire_async(bins => {
                this.apply_unit(bins.map(bin => {
                    const unit = new $hyoo_crus_unit(bin).narrow();
                    $hyoo_crus_unit_trusted.add(unit);
                    this.$.$hyoo_crus_mine.units_persisted.add(unit);
                    return unit;
                }));
            }));
        }
        loading() {
            let units = this.unit_sort(this.$.$hyoo_crus_mine.units(this.ref()) ?? []);
            if (this.$.$hyoo_crus_log())
                $mol_wire_sync(this.$).$mol_log3_rise({
                    place: this,
                    message: 'Load Unit',
                    units: units.length,
                });
            const errors = this.apply_unit(units, 'skip_check').filter(Boolean);
            if (errors.length)
                this.$.$mol_log3_fail({
                    place: this,
                    message: errors.join('\n'),
                });
        }
        saving() {
            const mine = this.$.$hyoo_crus_mine;
            if (!mine)
                return;
            this.loading();
            const encoding = [];
            const signing = [];
            const persisting = [];
            for (const pass of this.pass.values()) {
                if (!pass.signed())
                    signing.push(pass);
                if (!mine.units_persisted.has(pass))
                    persisting.push(pass);
            }
            for (const gift of this.gift.values()) {
                if (!gift.signed())
                    signing.push(gift);
                if (!mine.units_persisted.has(gift))
                    persisting.push(gift);
            }
            for (const kids of this.sand.values()) {
                for (const units of kids.values()) {
                    for (const sand of units.values()) {
                        if (!sand.signed()) {
                            encoding.push(sand);
                            signing.push(sand);
                        }
                        if (!mine.units_persisted.has(sand))
                            persisting.push(sand);
                    }
                }
            }
            $mol_wire_race(...encoding.map(unit => () => this.sand_encode(unit)));
            $mol_wire_race(...signing.map(unit => () => this.unit_sign(unit)));
            if (persisting.length) {
                this.bus().send(persisting.map(unit => unit.buffer));
                mine.units(this.ref(), persisting);
                if (this.$.$hyoo_crus_log())
                    $mol_wire_sync(this.$).$mol_log3_done({
                        place: this,
                        message: 'Saved Units',
                        units: persisting.length,
                    });
            }
        }
        unit_sign(unit) {
            if (unit.signed())
                return;
            const key = $mol_wire_sync(unit._land.auth());
            const mixin = $hyoo_crus_ref_encode(unit._land.ref());
            const sens = unit.sens().slice();
            for (let i = 0; i < mixin.length; ++i)
                sens[i + 2] ^= mixin[i];
            while (true) {
                const sign = key.sign(sens);
                unit.sign(sign.slice(0, 2));
                const rank = unit instanceof $hyoo_crus_pass
                    ? this.lord_rank(unit.lord())
                    : this.peer_rank(unit.peer());
                if (rank >= unit.rank_min()) {
                    unit.sign(sign);
                    return;
                }
                else {
                    unit.sign(new Uint8Array([0, 0]));
                }
            }
        }
        sand_encode(sand) {
            if (sand._open === null)
                return sand;
            if (sand.tip() === 'nil')
                return sand;
            let bin = sand._open;
            const secret = sand._land.secret();
            if (secret)
                bin = $mol_wire_sync(secret).encrypt(bin, sand.salt());
            if (bin.byteLength > 32)
                sand.hash(this.$.$hyoo_crus_mine.rock_save(bin), sand.tip(), sand.tag());
            else
                sand.data(bin, sand.tip(), sand.tag());
            return sand;
        }
        sand_decode(sand) {
            try {
                let vary = this.sand_decode_raw(sand);
                if (typeof vary === 'symbol')
                    vary = $hyoo_crus_ref_resolve(this.ref(), vary);
                return vary;
            }
            catch (error) {
                if (error instanceof Promise)
                    return $mol_fail_hidden(error);
                this.$.$mol_fail_log(error);
                return null;
            }
        }
        sand_decode_raw(sand) {
            if (this.sand.get(sand.head())?.get(sand.peer())?.get(sand.self()) !== sand) {
                for (const id of this.Tine().items_vary() ?? []) {
                    const vary = this.$.$hyoo_crus_glob.Land($hyoo_crus_vary_cast_ref(id)).sand_decode_raw(sand);
                    if (vary !== undefined)
                        return vary;
                }
                return undefined;
            }
            const secret = this.secret();
            if (sand._vary !== undefined)
                return sand._vary;
            if (sand._open !== null)
                return sand._vary = $hyoo_crus_vary_decode({ tip: sand.tip(), bin: sand._open });
            let bin = sand.size() > 32 ? this.$.$hyoo_crus_mine.rock(sand.hash()) : sand.data();
            if (secret && bin && sand.tip() !== 'nil') {
                try {
                    bin = $mol_wire_sync(secret).decrypt(bin, sand.salt());
                }
                catch (error) {
                    if ($mol_fail_catch(error)) {
                        if (error.message)
                            $mol_fail_hidden(error);
                        else
                            $mol_fail_hidden(new Error(`Can't decrypt`, { cause: error }));
                    }
                }
            }
            sand._open = bin;
            return sand._vary = (bin ? $hyoo_crus_vary_decode({ tip: sand.tip(), bin }) : null);
        }
        key_public(peer) {
            const key = this.pass.get(peer)?.auth();
            return key ? $mol_crypto_key_public.from(key) : null;
        }
        secret_mutual(key_public) {
            return $mol_wire_sync($mol_crypto_secret).derive(this.auth().toString(), key_public);
        }
        encryptable() {
            return !this.sand.size;
        }
        encrypted(next) {
            const gift = this.gift.get(this.ref());
            const prev = gift?.bill().some(b => b) ?? false;
            if (next === undefined)
                return prev;
            if (prev === next)
                return prev;
            if (!this.encryptable())
                $mol_fail(new Error(`Non empty Land never encrypted`));
            this.join();
            const auth = this.auth();
            const secret = $mol_wire_sync($mol_crypto_secret).generate();
            const secret_land = $mol_wire_sync(secret).serial();
            const secret_mutual = auth.secret_mutual(auth.public().toString());
            const unit = new $hyoo_crus_gift;
            $hyoo_crus_unit_trusted.add(unit);
            unit.rank($hyoo_crus_rank_rule);
            unit.time(this.faces.tick());
            unit.peer(auth.peer());
            unit.dest(auth.lord());
            unit._land = this;
            const secret_closed = $mol_wire_sync(secret_mutual).encrypt(secret_land, unit.salt());
            unit.bill().set(secret_closed);
            const error = this.apply_unit([unit])[0];
            if (error)
                $mol_fail(new Error(error));
            return next;
        }
        secret() {
            if (!this.encrypted())
                return null;
            const auth = this.auth();
            const gift = this.gift.get(auth.lord());
            if (!gift)
                return $mol_fail(new Error(`Access denied`));
            const bill = gift.bill();
            if (!bill.some(b => b))
                return $mol_fail(new Error(`No key to decrypt`));
            const secret_mutual = auth.secret_mutual(this.key_public(gift.peer()).toString());
            if (!secret_mutual)
                return $mol_fail(new Error(`Can't decrypt secret`));
            const secret_land = $mol_wire_sync(secret_mutual).decrypt(bill, gift.salt());
            return $mol_wire_sync($mol_crypto_secret).from(secret_land);
        }
        dump() {
            this.saving();
            const units = [];
            const rocks = [];
            for (const pass of this.pass.values())
                units.push(pass);
            for (const gift of this.gift.values())
                units.push(gift);
            for (const heads of this.sand.values()) {
                for (const sands of heads.values()) {
                    for (const sand of sands.values()) {
                        units.push(sand);
                        if (sand.size() <= 32)
                            continue;
                        const rock = this.$.$hyoo_crus_mine.rock(sand.hash());
                        if (!rock)
                            continue;
                        rocks.push([sand.hash(), rock]);
                    }
                }
            }
            return {
                land: this.ref(),
                units, rocks,
            };
        }
        ;
        [$mol_dev_format_head]() {
            return $mol_dev_format_span({}, $mol_dev_format_native(this), ' ', $mol_dev_format_auto(this.faces.total));
        }
    }
    __decorate([
        $mol_action
    ], $hyoo_crus_land.prototype, "self_make", null);
    __decorate([
        $mol_action
    ], $hyoo_crus_land.prototype, "area_make", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_crus_land.prototype, "Data", null);
    __decorate([
        $mol_mem
    ], $hyoo_crus_land.prototype, "Tine", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_crus_land.prototype, "Node", null);
    __decorate([
        $mol_mem
    ], $hyoo_crus_land.prototype, "total", null);
    __decorate([
        $mol_mem
    ], $hyoo_crus_land.prototype, "joined_list", null);
    __decorate([
        $mol_mem
    ], $hyoo_crus_land.prototype, "key", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_crus_land.prototype, "lord_rank", null);
    __decorate([
        $mol_action
    ], $hyoo_crus_land.prototype, "faces_pack", null);
    __decorate([
        $mol_action
    ], $hyoo_crus_land.prototype, "apply_unit", null);
    __decorate([
        $mol_action
    ], $hyoo_crus_land.prototype, "apply_unit_trust", null);
    __decorate([
        $mol_action
    ], $hyoo_crus_land.prototype, "fork", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_crus_land.prototype, "sand_ordered", null);
    __decorate([
        $mol_action
    ], $hyoo_crus_land.prototype, "join", null);
    __decorate([
        $mol_action
    ], $hyoo_crus_land.prototype, "give", null);
    __decorate([
        $mol_action
    ], $hyoo_crus_land.prototype, "post", null);
    __decorate([
        $mol_action
    ], $hyoo_crus_land.prototype, "sand_move", null);
    __decorate([
        $mol_action
    ], $hyoo_crus_land.prototype, "sand_wipe", null);
    __decorate([
        $mol_mem
    ], $hyoo_crus_land.prototype, "sync", null);
    __decorate([
        $mol_mem
    ], $hyoo_crus_land.prototype, "sync_mine", null);
    __decorate([
        $mol_mem
    ], $hyoo_crus_land.prototype, "sync_yard", null);
    __decorate([
        $mol_mem
    ], $hyoo_crus_land.prototype, "bus", null);
    __decorate([
        $mol_mem
    ], $hyoo_crus_land.prototype, "loading", null);
    __decorate([
        $mol_mem
    ], $hyoo_crus_land.prototype, "saving", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_crus_land.prototype, "unit_sign", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_crus_land.prototype, "sand_encode", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_crus_land.prototype, "sand_decode", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_crus_land.prototype, "sand_decode_raw", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_crus_land.prototype, "key_public", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_crus_land.prototype, "secret_mutual", null);
    __decorate([
        $mol_mem
    ], $hyoo_crus_land.prototype, "encryptable", null);
    __decorate([
        $mol_mem
    ], $hyoo_crus_land.prototype, "encrypted", null);
    __decorate([
        $mol_mem
    ], $hyoo_crus_land.prototype, "secret", null);
    $.$hyoo_crus_land = $hyoo_crus_land;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    let $hyoo_crus_unit_kind;
    (function ($hyoo_crus_unit_kind) {
        $hyoo_crus_unit_kind[$hyoo_crus_unit_kind["pass"] = $hyoo_crus_part.pass] = "pass";
        $hyoo_crus_unit_kind[$hyoo_crus_unit_kind["gift"] = $hyoo_crus_part.gift] = "gift";
        $hyoo_crus_unit_kind[$hyoo_crus_unit_kind["sand"] = $hyoo_crus_part.sand] = "sand";
    })($hyoo_crus_unit_kind = $.$hyoo_crus_unit_kind || ($.$hyoo_crus_unit_kind = {}));
    $.$hyoo_crus_unit_trusted = new WeakSet();
    class $hyoo_crus_unit extends $mol_buffer {
        static size = 128;
        constructor(buffer = new ArrayBuffer($hyoo_crus_unit.size), byteOffset = 0, byteLength = buffer.byteLength) {
            super(buffer, byteOffset, byteLength);
        }
        kind() {
            const val = this.uint8(0);
            if (!val)
                $mol_fail(new Error(`Empty unit`));
            if ((val & 1) === 0)
                return 'sand';
            const kind = $hyoo_crus_unit_kind[val];
            if (kind)
                return kind;
            $mol_fail(new Error(`Unknown unit kind (${val})`));
        }
        choose(ways) {
            const way = this.kind();
            const Unit = {
                pass: $hyoo_crus_pass,
                gift: $hyoo_crus_gift,
                sand: $hyoo_crus_sand,
            }[way];
            if (this instanceof Unit)
                return ways[way](this);
            const unit = new Unit(this.buffer, this.byteOffset, this.byteLength);
            return ways[way](unit);
        }
        narrow() {
            return this.choose({
                sand: unit => unit,
                pass: unit => unit,
                gift: unit => unit,
            });
        }
        key() {
            return this.narrow().key();
        }
        id6(offset, next) {
            if (next === undefined) {
                const str = $mol_base64_ae_encode(new Uint8Array(this.buffer, this.byteOffset + offset, 6));
                return str === 'AAAAAAAA' ? '' : str;
            }
            else {
                this.asArray().set($mol_base64_ae_decode(next || 'AAAAAAAA'), this.byteOffset + offset);
                return next;
            }
        }
        id12(offset, next) {
            if (next === undefined) {
                return $hyoo_crus_ref_decode(new Uint8Array(this.buffer, this.byteOffset + offset, 12));
            }
            else {
                this.asArray().set($hyoo_crus_ref_encode(next), this.byteOffset + offset);
                return next;
            }
        }
        _peer;
        peer(next) {
            if (next === undefined && this._peer !== undefined)
                return this._peer;
            else
                return this._peer = this.id6(2, next);
        }
        salt() {
            return new Uint8Array(this.buffer, this.byteOffset + 2, 16);
        }
        sens(next) {
            const prev = new Uint8Array(this.buffer, this.byteOffset, 64);
            if (next)
                prev.set(next);
            return prev;
        }
        mix(mixin) {
            for (let i = 0; i < mixin.length; ++i) {
                this.uint8(2 + i, this.uint8(2 + i) ^ mixin[i]);
            }
        }
        sign(next) {
            const prev = new Uint8Array(this.buffer, this.byteOffset + 64, 64);
            if (next)
                prev.set(next);
            return prev;
        }
        signed() {
            return this.sign().some(b => b);
        }
        work() {
            if (!this.signed()) {
                return $hyoo_crus_rank_rate.just;
            }
            const sign = this.sign();
            let int = sign[0] | (sign[1] << 8);
            let count = 0;
            while (int & 1) {
                int >>>= 1;
                ++count;
            }
            return count;
        }
        rank_min() {
            return $hyoo_crus_rank_rule;
        }
        _land = null;
        dump() {
            return {};
        }
    }
    $.$hyoo_crus_unit = $hyoo_crus_unit;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_crus_pass extends $hyoo_crus_unit {
        _lord;
        lord(next) {
            if (next === undefined && this._lord !== undefined)
                return this._lord;
            else
                return this._lord = this.id12(2, next);
        }
        key() {
            return `pass:${this.id6(2)}`;
        }
        auth(next) {
            const prev = new Uint8Array(this.buffer, this.byteOffset, 64);
            if (next)
                prev.set(next);
            return prev;
        }
        dump() {
            return {
                kind: this.kind(),
                lord: this.lord().description,
            };
        }
        rank_min() {
            return $hyoo_crus_rank($hyoo_crus_rank_tier.join | ($hyoo_crus_rank_rate.just - this.work()));
        }
        [$mol_dev_format_head]() {
            return $mol_dev_format_span({}, $mol_dev_format_native(this), ' ', this.peer(), ' 🔑 ', $mol_dev_format_span({}, this.lord().description));
        }
    }
    $.$hyoo_crus_pass = $hyoo_crus_pass;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_crus_gift extends $hyoo_crus_unit {
        rank(next) {
            if (next !== undefined)
                this.uint8(0, $hyoo_crus_unit_kind.gift);
            const res = this.uint8(1, next);
            if (res < $hyoo_crus_rank_deny || res > $hyoo_crus_rank_rule) {
                $mol_fail(new RangeError(`Wrong rank ${res}`));
            }
            return res;
        }
        time(next) {
            return this.uint48(8, next);
        }
        free() {
            return new Uint8Array(this.buffer, this.byteOffset + 26, 6);
        }
        _dest;
        dest(next) {
            if (next === undefined && this._dest !== undefined)
                return this._dest;
            else
                return this._dest = this.id12(14, next);
        }
        key() {
            return `gift:${this.dest().description}`;
        }
        bill() {
            return new Uint8Array(this.buffer, this.byteOffset + 32, 32);
        }
        static compare(left, right) {
            return (right.time() - left.time()) || (right.peer() > left.peer() ? 1 : right.peer() < left.peer() ? -1 : 0);
        }
        dump() {
            return {
                kind: this.kind(),
                peer: this.peer(),
                dest: this.dest().description,
                tier: $hyoo_crus_rank_tier[this.rank() & ~$hyoo_crus_rank_rate.just],
                work: this.work(),
                time: $hyoo_crus_time_dump(this.time()),
            };
        }
        rank_min() {
            return $hyoo_crus_rank($hyoo_crus_rank_rule | ($hyoo_crus_rank_rate.just - this.work()));
        }
        [$mol_dev_format_head]() {
            return $mol_dev_format_span({}, $mol_dev_format_native(this), ' ', this.peer(), ' 🏅 ', $mol_dev_format_span({}, this.dest().description || '_'), this.bill().some(v => v) ? ' 🔐' : ' 👀', $hyoo_crus_rank_tier[this.rank() & ~$hyoo_crus_rank_rate.just], ':', this.rank() & $hyoo_crus_rank_rate.just, ' ', $mol_dev_format_shade($hyoo_crus_time_dump(this.time())));
        }
    }
    $.$hyoo_crus_gift = $hyoo_crus_gift;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    let $hyoo_crus_sand_tag;
    (function ($hyoo_crus_sand_tag) {
        $hyoo_crus_sand_tag[$hyoo_crus_sand_tag["term"] = 0] = "term";
        $hyoo_crus_sand_tag[$hyoo_crus_sand_tag["solo"] = 1] = "solo";
        $hyoo_crus_sand_tag[$hyoo_crus_sand_tag["vals"] = 2] = "vals";
        $hyoo_crus_sand_tag[$hyoo_crus_sand_tag["keys"] = 3] = "keys";
    })($hyoo_crus_sand_tag = $.$hyoo_crus_sand_tag || ($.$hyoo_crus_sand_tag = {}));
    class $hyoo_crus_sand extends $hyoo_crus_unit {
        _vary = undefined;
        _open = null;
        hint(tip = 'nil', tag = 'term') {
            this.uint8(0, ($hyoo_crus_sand_tag[tag] << 1) | ($hyoo_crus_vary_tip[tip] << 3));
        }
        tag() {
            return $hyoo_crus_sand_tag[(this.uint8(0) >> 1) & 0b11];
        }
        tip() {
            const tip = $hyoo_crus_vary_tip[this.uint8(0) >> 3] || $hyoo_crus_vary_tip.nil;
            return tip;
        }
        utf() {
            return Boolean(this.uint8(0) & 0b10000000);
        }
        size(next) {
            return this.uint8(1, next);
        }
        time(next) {
            return this.uint48(8, next);
        }
        _head;
        head(next) {
            if (next === undefined && this._head !== undefined)
                return this._head;
            else
                return this._head = this.id6(14, next);
        }
        _self;
        self(next) {
            if (next === undefined && this._self !== undefined)
                return this._self;
            else
                return this._self = this.id6(20, next);
        }
        key() {
            return `sand:${this.head()}/${this.peer()}/${this.self()}`;
        }
        _lead;
        lead(next) {
            if (next === undefined && this._lead !== undefined)
                return this._lead;
            else
                return this._lead = this.id6(26, next);
        }
        hash(next, tip = 'nil', tag = 'term') {
            const bin = new Uint8Array(this.buffer, this.byteOffset + 32, 20);
            if (next !== undefined) {
                this.hint(tip, tag);
                this.size(255);
                bin.set(next);
            }
            if (this.size() > 32)
                return bin;
            $mol_fail(new Error('No stored hash'));
        }
        meta() {
            return new Uint8Array(this.buffer, this.byteOffset + 42, 12);
        }
        data(next, tip = 'nil', tag = 'term') {
            if (next === undefined) {
                const size = this.size();
                if (size > 32)
                    $mol_fail(new Error('Too long data'));
                return new Uint8Array(this.buffer, this.byteOffset + 32, size);
            }
            else {
                this.hint(tip, tag);
                if (next.byteLength > 32)
                    $mol_fail(new Error('Too long data'));
                this.uint8(1, next.byteLength);
                const bin = new Uint8Array(this.buffer, this.byteOffset + 32, next.byteLength);
                bin.set(next);
                new Uint8Array(this.buffer, this.byteOffset + 32 + next.length, 32 - next.length).fill(0);
                return bin;
            }
        }
        idea() {
            const bin = new Uint8Array(this.buffer, this.byteOffset + 20, 44);
            const hash = $mol_crypto_hash(bin);
            const buf = new $mol_buffer(hash.buffer);
            return buf.uint48(0);
        }
        static compare(left, right) {
            return (Math.floor(right.time() / 65536) - Math.floor(left.time() / 65536))
                || (right.peer() > left.peer() ? 1 : right.peer() < left.peer() ? -1 : 0)
                || (right.time() - left.time());
        }
        dump() {
            return {
                kind: this.kind(),
                peer: this.peer(),
                lead: this.lead(),
                head: this.head(),
                self: this.self(),
                tip: this.tip(),
                tag: this.tag(),
                size: this.size(),
                time: $hyoo_crus_time_dump(this.time()),
            };
        }
        rank_min() {
            return $hyoo_crus_rank($hyoo_crus_rank_tier.post | ($hyoo_crus_rank_rate.just - this.work()));
        }
        [$mol_dev_format_head]() {
            return $mol_dev_format_span({}, $mol_dev_format_native(this), ' ', this.peer(), ' ', this.lead() || 'AAAAAAAA', $mol_dev_format_shade('\\'), $mol_dev_format_accent(this.head() || 'AAAAAAAA'), $mol_dev_format_shade('/'), this.self() || 'AAAAAAAA', ' ', $mol_dev_format_shade($hyoo_crus_time_dump(this.time())), ' ', {
                term: '💼',
                solo: '1️⃣',
                vals: '🎹',
                keys: '🔑',
            }[this.tag()], this.tip(), ' ', $mol_dev_format_native(this._vary));
        }
    }
    $.$hyoo_crus_sand = $hyoo_crus_sand;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_reconcile({ prev, from, to, next, equal, drop, insert, update, replace, }) {
        if (!update)
            update = (next, prev, lead) => prev;
        if (!replace)
            replace = (next, prev, lead) => insert(next, drop(prev, lead));
        if (to > prev.length)
            to = prev.length;
        if (from > to)
            from = to;
        let p = from;
        let n = 0;
        let lead = p ? prev[p - 1] : null;
        while (p < to || n < next.length) {
            if (p < to && n < next.length && equal(next[n], prev[p])) {
                lead = update(next[n], prev[p], lead);
                ++p;
                ++n;
            }
            else if (next.length - n > to - p) {
                lead = insert(next[n], lead);
                ++n;
            }
            else if (next.length - n < to - p) {
                lead = drop(prev[p], lead);
                ++p;
            }
            else {
                lead = replace(next[n], prev[p], lead);
                ++p;
                ++n;
            }
        }
    }
    $.$mol_reconcile = $mol_reconcile;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_crus_list_vary extends $hyoo_crus_node {
        static tag = $hyoo_crus_sand_tag[$hyoo_crus_sand_tag.vals];
        items_vary(next, tag = 'term') {
            const units = this.units();
            if (next === undefined)
                return units.map(unit => this.land().sand_decode(unit));
            this.splice(next, 0, units.length, tag);
            return this.items_vary();
        }
        splice(next, from = this.units().length, to = from, tag = 'term') {
            const land = this.land();
            $mol_reconcile({
                prev: this.units(),
                from,
                to,
                next,
                equal: (next, prev) => $mol_compare_deep(this.land().sand_decode(prev), next),
                drop: (prev, lead) => this.land().post(lead?.self() ?? '', prev.head(), prev.self(), null),
                insert: (next, lead) => this.land().post(lead?.self() ?? '', this.head(), land.self_make(), next, tag),
                replace: (next, prev, lead) => this.land().post(lead?.self() ?? '', prev.head(), prev.self(), next, prev.tag()),
            });
        }
        find(vary) {
            for (const unit of this.units()) {
                if ($mol_compare_deep(this.land().sand_decode(unit), vary))
                    return unit;
            }
            return null;
        }
        has(vary, next, tag = 'term') {
            if (next === undefined)
                return Boolean(this.find(vary));
            if (next)
                this.add(vary, tag);
            else
                this.cut(vary);
            return next;
        }
        add(vary, tag = 'term') {
            if (this.has(vary))
                return;
            this.land().post('', this.head(), '', vary, tag);
        }
        cut(vary) {
            const units = [...this.units()];
            for (let i = 0; i < units.length; ++i) {
                if (!$mol_compare_deep(this.land().sand_decode(units[i]), vary))
                    continue;
                this.land().post(units[i - 1]?.self() ?? 0, units[i].head(), units[i].self(), null);
                units.splice(i, 1);
                --i;
            }
        }
        move(from, to) {
            this.land().sand_move(this.units()[from], this.head(), to);
        }
        wipe(seat) {
            this.land().sand_wipe(this.units()[seat]);
        }
        node_make(Node, vary, tag = 'term') {
            this.splice([vary], undefined, undefined, tag);
            return this.land().Node(Node).Item(this.units().at(-1).self());
        }
        ;
        [$mol_dev_format_head]() {
            return $mol_dev_format_span({}, $mol_dev_format_native(this), ' ', this.head(), ' ', $mol_dev_format_auto(this.items_vary()));
        }
    }
    __decorate([
        $mol_mem
    ], $hyoo_crus_list_vary.prototype, "items_vary", null);
    __decorate([
        $mol_action
    ], $hyoo_crus_list_vary.prototype, "splice", null);
    $.$hyoo_crus_list_vary = $hyoo_crus_list_vary;
    function $hyoo_crus_list(parse) {
        class $hyoo_crus_list extends $hyoo_crus_list_vary {
            static parse = parse;
            items(next) {
                return this.items_vary(next?.map(parse)).map(parse);
            }
            static toString() {
                return this === $hyoo_crus_list ? '$hyoo_crus_list<' + this.$.$mol_func_name(parse) + '>' : super.toString();
            }
        }
        __decorate([
            $mol_mem
        ], $hyoo_crus_list.prototype, "items", null);
        return $hyoo_crus_list;
    }
    $.$hyoo_crus_list = $hyoo_crus_list;
    class $hyoo_crus_list_bin extends $hyoo_crus_list($hyoo_crus_vary_cast_bin) {
    }
    $.$hyoo_crus_list_bin = $hyoo_crus_list_bin;
    class $hyoo_crus_list_bool extends $hyoo_crus_list($hyoo_crus_vary_cast_bool) {
    }
    $.$hyoo_crus_list_bool = $hyoo_crus_list_bool;
    class $hyoo_crus_list_int extends $hyoo_crus_list($hyoo_crus_vary_cast_int) {
    }
    $.$hyoo_crus_list_int = $hyoo_crus_list_int;
    class $hyoo_crus_list_real extends $hyoo_crus_list($hyoo_crus_vary_cast_real) {
    }
    $.$hyoo_crus_list_real = $hyoo_crus_list_real;
    class $hyoo_crus_list_ints extends $hyoo_crus_list($hyoo_crus_vary_cast_ints) {
    }
    $.$hyoo_crus_list_ints = $hyoo_crus_list_ints;
    class $hyoo_crus_list_reals extends $hyoo_crus_list($hyoo_crus_vary_cast_reals) {
    }
    $.$hyoo_crus_list_reals = $hyoo_crus_list_reals;
    class $hyoo_crus_list_ref extends $hyoo_crus_list($hyoo_crus_vary_cast_ref) {
    }
    $.$hyoo_crus_list_ref = $hyoo_crus_list_ref;
    class $hyoo_crus_list_str extends $hyoo_crus_list($hyoo_crus_vary_cast_str) {
    }
    $.$hyoo_crus_list_str = $hyoo_crus_list_str;
    class $hyoo_crus_list_time extends $hyoo_crus_list($hyoo_crus_vary_cast_time) {
    }
    $.$hyoo_crus_list_time = $hyoo_crus_list_time;
    class $hyoo_crus_list_dur extends $hyoo_crus_list($hyoo_crus_vary_cast_dur) {
    }
    $.$hyoo_crus_list_dur = $hyoo_crus_list_dur;
    class $hyoo_crus_list_range extends $hyoo_crus_list($hyoo_crus_vary_cast_range) {
    }
    $.$hyoo_crus_list_range = $hyoo_crus_list_range;
    class $hyoo_crus_list_json extends $hyoo_crus_list($hyoo_crus_vary_cast_json) {
    }
    $.$hyoo_crus_list_json = $hyoo_crus_list_json;
    class $hyoo_crus_list_jsan extends $hyoo_crus_list($hyoo_crus_vary_cast_jsan) {
    }
    $.$hyoo_crus_list_jsan = $hyoo_crus_list_jsan;
    class $hyoo_crus_list_dom extends $hyoo_crus_list($hyoo_crus_vary_cast_dom) {
    }
    $.$hyoo_crus_list_dom = $hyoo_crus_list_dom;
    class $hyoo_crus_list_tree extends $hyoo_crus_list($hyoo_crus_vary_cast_tree) {
    }
    $.$hyoo_crus_list_tree = $hyoo_crus_list_tree;
    class $hyoo_crus_list_ref_base extends $hyoo_crus_list_ref {
    }
    $.$hyoo_crus_list_ref_base = $hyoo_crus_list_ref_base;
    function $hyoo_crus_list_ref_to(Value) {
        class $hyoo_crus_list_ref_to extends $hyoo_crus_list_ref_base {
            static Value = $mol_memo.func(Value);
            static toString() {
                return this === $hyoo_crus_list_ref_to ? '$hyoo_crus_list_ref_to<' + Value() + '>' : super.toString();
            }
            remote_list(next) {
                const glob = this.$.$hyoo_crus_glob;
                const Node = Value();
                return this.items_vary(next?.map(item => item.ref()))
                    .map($hyoo_crus_vary_cast_ref)
                    .filter($mol_guard_defined)
                    .map(ref => glob.Node(ref, Node));
            }
            remote_add(item) {
                this.add(item.ref());
            }
            make(config) {
                if (config === null || typeof config === 'number') {
                    const self = this.land().self_make(config || undefined);
                    const node = this.land().Node(Value()).Item(self);
                    this.splice([node.ref()]);
                    return node;
                }
                else if (config instanceof $hyoo_crus_land) {
                    const land = config.area_make();
                    this.splice([land.ref()]);
                    return land.Node(Value()).Item('');
                }
                else if (config) {
                    const land = this.$.$hyoo_crus_glob.land_grab(config);
                    this.splice([land.ref()]);
                    return land.Node(Value()).Item('');
                }
            }
            remote_make(config) {
                return this.make(config);
            }
            local_make(idea) {
                const self = this.land().self_make(idea);
                const node = this.land().Node(Value()).Item(self);
                this.splice([node.ref()]);
                return node;
            }
        }
        __decorate([
            $mol_mem
        ], $hyoo_crus_list_ref_to.prototype, "remote_list", null);
        __decorate([
            $mol_action
        ], $hyoo_crus_list_ref_to.prototype, "remote_add", null);
        __decorate([
            $mol_action
        ], $hyoo_crus_list_ref_to.prototype, "make", null);
        __decorate([
            $mol_action
        ], $hyoo_crus_list_ref_to.prototype, "local_make", null);
        return $hyoo_crus_list_ref_to;
    }
    $.$hyoo_crus_list_ref_to = $hyoo_crus_list_ref_to;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_crus_dict extends $hyoo_crus_list_vary {
        static tag = $hyoo_crus_sand_tag[$hyoo_crus_sand_tag.keys];
        keys() {
            return this.items_vary();
        }
        dive(key, Node, auto) {
            if (this.can_change() && auto !== undefined)
                this.has(key, true, Node.tag);
            const unit = this.find(key);
            return unit ? this.land().Node(Node).Item(unit.self()) : null;
        }
        static schema = {};
        static with(schema) {
            const $hyoo_crus_dict_with = class $hyoo_crus_dict_with extends this {
                static toString() {
                    if (this !== $hyoo_crus_dict_with)
                        return super.toString();
                    const params = Object.entries(schema).map(([name, type]) => `${name}: ${type}`);
                    return '$hyoo_crus_dict.with<{' + params.join(', ') + '}>';
                }
            };
            for (const Field in schema) {
                Object.defineProperty($hyoo_crus_dict_with.prototype, Field, {
                    value: function (auto) {
                        return this.dive(Field, schema[Field], auto);
                    }
                });
            }
            return Object.assign($hyoo_crus_dict_with, { schema: { ...this.schema, ...schema } });
        }
        ;
        [$mol_dev_format_head]() {
            const keys = $mol_wire_probe(() => this.keys());
            const nodes = $mol_wire_probe(() => this.nodes(null)) ?? [];
            return $mol_dev_format_span({}, $mol_dev_format_native(this), ' ', this.head(), ' ', $mol_dev_format_auto(keys?.map((key, index) => new Pair(key, nodes[index]))));
        }
    }
    __decorate([
        $mol_mem
    ], $hyoo_crus_dict.prototype, "keys", null);
    $.$hyoo_crus_dict = $hyoo_crus_dict;
    class Pair {
        key;
        val;
        constructor(key, val) {
            this.key = key;
            this.val = val;
        }
        ;
        [$mol_dev_format_head]() {
            return $mol_dev_format_tr({}, $mol_dev_format_td({}, $mol_dev_format_auto(this.key)), $mol_dev_format_td({}, ': '), $mol_dev_format_td({}, $mol_dev_format_auto(this.val)));
        }
    }
    function $hyoo_crus_dict_to(Value) {
        return class $hyoo_crus_dict_to extends $hyoo_crus_dict {
            Value = Value;
            key(key, auto) {
                return this.dive(key, this.Value, auto);
            }
            static toString() {
                return this === $hyoo_crus_dict_to ? '$hyoo_crus_dict_to<' + Value + '>' : super.toString();
            }
        };
    }
    $.$hyoo_crus_dict_to = $hyoo_crus_dict_to;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_crus_atom_vary extends $hyoo_crus_node {
        static tag = $hyoo_crus_sand_tag[$hyoo_crus_sand_tag.solo];
        pick_unit(peer) {
            return this.units_of(peer).at(0);
        }
        vary(next) {
            return this.vary_of('', next);
        }
        vary_of(peer, next) {
            let unit_prev = this.pick_unit(peer);
            let prev = unit_prev ? this.land().sand_decode(unit_prev) : null;
            if (next === undefined)
                return prev;
            if ($mol_compare_deep(prev, next))
                return next;
            this.land().post('', unit_prev?.head() ?? this.head(), unit_prev?.self() ?? '', next);
            return this.vary_of(peer);
        }
        ;
        [$mol_dev_format_head]() {
            return $mol_dev_format_span({}, $mol_dev_format_native(this), ' ', this.head(), ' ', $mol_dev_format_auto(this.vary()));
        }
    }
    __decorate([
        $mol_mem_key
    ], $hyoo_crus_atom_vary.prototype, "vary_of", null);
    $.$hyoo_crus_atom_vary = $hyoo_crus_atom_vary;
    class $hyoo_crus_atom_enum_base extends $hyoo_crus_atom_vary {
        static options = [];
    }
    $.$hyoo_crus_atom_enum_base = $hyoo_crus_atom_enum_base;
    function $hyoo_crus_atom_enum(options) {
        class $hyoo_crus_atom_enum extends $hyoo_crus_atom_enum_base {
            static options = options;
            static toString() {
                return this === $hyoo_crus_atom_enum ? '$hyoo_crus_atom_enum<' + options.map($hyoo_crus_vary_cast_str) + '>' : super.toString();
            }
            val(next) {
                return this.val_of('', next);
            }
            val_of(peer, next) {
                validate: if (next !== undefined) {
                    for (const option of options) {
                        if ($mol_compare_deep(option, next))
                            break validate;
                    }
                    $mol_fail(new Error(`Wrong value (${$hyoo_crus_vary_cast_str(next)})`));
                }
                const val = this.vary_of(peer, next);
                for (const option of options) {
                    if ($mol_compare_deep(option, val))
                        return val;
                }
                return null;
            }
        }
        __decorate([
            $mol_mem_key
        ], $hyoo_crus_atom_enum.prototype, "val_of", null);
        return $hyoo_crus_atom_enum;
    }
    $.$hyoo_crus_atom_enum = $hyoo_crus_atom_enum;
    function $hyoo_crus_atom(parse) {
        class $hyoo_crus_atom extends $hyoo_crus_atom_vary {
            static parse = parse;
            val(next) {
                return this.val_of('', next);
            }
            val_of(peer, next) {
                if (next !== undefined)
                    parse(next);
                const res = this.vary_of(peer, next);
                try {
                    return parse(res);
                }
                catch {
                    return null;
                }
            }
            static toString() {
                return this === $hyoo_crus_atom ? '$hyoo_crus_atom<' + this.$.$mol_func_name(parse) + '>' : super.toString();
            }
        }
        return $hyoo_crus_atom;
    }
    $.$hyoo_crus_atom = $hyoo_crus_atom;
    class $hyoo_crus_atom_bin extends $hyoo_crus_atom($hyoo_crus_vary_cast_bin) {
    }
    $.$hyoo_crus_atom_bin = $hyoo_crus_atom_bin;
    class $hyoo_crus_atom_bool extends $hyoo_crus_atom($hyoo_crus_vary_cast_bool) {
    }
    $.$hyoo_crus_atom_bool = $hyoo_crus_atom_bool;
    class $hyoo_crus_atom_int extends $hyoo_crus_atom($hyoo_crus_vary_cast_int) {
    }
    $.$hyoo_crus_atom_int = $hyoo_crus_atom_int;
    class $hyoo_crus_atom_real extends $hyoo_crus_atom($hyoo_crus_vary_cast_real) {
    }
    $.$hyoo_crus_atom_real = $hyoo_crus_atom_real;
    class $hyoo_crus_atom_ints extends $hyoo_crus_atom($hyoo_crus_vary_cast_ints) {
    }
    $.$hyoo_crus_atom_ints = $hyoo_crus_atom_ints;
    class $hyoo_crus_atom_reals extends $hyoo_crus_atom($hyoo_crus_vary_cast_reals) {
    }
    $.$hyoo_crus_atom_reals = $hyoo_crus_atom_reals;
    class $hyoo_crus_atom_ref extends $hyoo_crus_atom($hyoo_crus_vary_cast_ref) {
    }
    $.$hyoo_crus_atom_ref = $hyoo_crus_atom_ref;
    class $hyoo_crus_atom_str extends $hyoo_crus_atom($hyoo_crus_vary_cast_str) {
    }
    $.$hyoo_crus_atom_str = $hyoo_crus_atom_str;
    class $hyoo_crus_atom_time extends $hyoo_crus_atom($hyoo_crus_vary_cast_time) {
    }
    $.$hyoo_crus_atom_time = $hyoo_crus_atom_time;
    class $hyoo_crus_atom_dur extends $hyoo_crus_atom($hyoo_crus_vary_cast_dur) {
    }
    $.$hyoo_crus_atom_dur = $hyoo_crus_atom_dur;
    class $hyoo_crus_atom_range extends $hyoo_crus_atom($hyoo_crus_vary_cast_range) {
    }
    $.$hyoo_crus_atom_range = $hyoo_crus_atom_range;
    class $hyoo_crus_atom_json extends $hyoo_crus_atom($hyoo_crus_vary_cast_json) {
    }
    $.$hyoo_crus_atom_json = $hyoo_crus_atom_json;
    class $hyoo_crus_atom_jsan extends $hyoo_crus_atom($hyoo_crus_vary_cast_jsan) {
    }
    $.$hyoo_crus_atom_jsan = $hyoo_crus_atom_jsan;
    class $hyoo_crus_atom_dom extends $hyoo_crus_atom($hyoo_crus_vary_cast_dom) {
    }
    $.$hyoo_crus_atom_dom = $hyoo_crus_atom_dom;
    class $hyoo_crus_atom_tree extends $hyoo_crus_atom($hyoo_crus_vary_cast_tree) {
    }
    $.$hyoo_crus_atom_tree = $hyoo_crus_atom_tree;
    class $hyoo_crus_atom_ref_base extends $hyoo_crus_atom_ref {
        static Value = $hyoo_crus_dict;
    }
    $.$hyoo_crus_atom_ref_base = $hyoo_crus_atom_ref_base;
    function $hyoo_crus_atom_ref_to(Value) {
        class $hyoo_crus_atom_ref_to extends $hyoo_crus_atom_ref_base {
            Value = $mol_memo.func(Value);
            static toString() {
                return this === $hyoo_crus_atom_ref_to ? '$hyoo_crus_atom_ref_to<' + Value() + '>' : super.toString();
            }
            remote(next) {
                return this.remote_of('', next);
            }
            remote_of(peer, next) {
                let ref = next?.ref() ?? next;
                ref = $hyoo_crus_vary_cast_ref(this.vary_of(peer, ref));
                if (!ref)
                    return null;
                return this.$.$hyoo_crus_glob.Node(ref, Value());
            }
            ensure(config) {
                return this.ensure_of('', config);
            }
            ensure_of(peer, config) {
                if (!this.val_of(peer)) {
                    if (config === null)
                        this.ensure_here(peer);
                    else if (config instanceof $hyoo_crus_land)
                        this.ensure_area(peer, config);
                    else if (config)
                        this.ensure_lord(peer, config);
                    else
                        return null;
                }
                return this.remote_of(peer);
            }
            ensure_here(peer) {
                const idea = $mol_hash_string(this.ref().description);
                const head = this.land().self_make(idea);
                const node = this.land().Node(Value()).Item(head);
                this.remote_of(peer, node);
            }
            ensure_area(peer, land) {
                const idea = $mol_hash_string(this.ref().description);
                const area = land.area_make(idea);
                this.val_of(peer, area.ref());
            }
            ensure_lord(peer, preset) {
                const land = this.$.$hyoo_crus_glob.land_grab(preset);
                this.val_of(peer, land.ref());
            }
            remote_ensure(preset) {
                return this.ensure(preset);
            }
            local_ensure() {
                return this.ensure(null);
            }
        }
        __decorate([
            $mol_mem_key
        ], $hyoo_crus_atom_ref_to.prototype, "remote_of", null);
        __decorate([
            $mol_action
        ], $hyoo_crus_atom_ref_to.prototype, "ensure_here", null);
        __decorate([
            $mol_action
        ], $hyoo_crus_atom_ref_to.prototype, "ensure_area", null);
        __decorate([
            $mol_action
        ], $hyoo_crus_atom_ref_to.prototype, "ensure_lord", null);
        return $hyoo_crus_atom_ref_to;
    }
    $.$hyoo_crus_atom_ref_to = $hyoo_crus_atom_ref_to;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_crus_entity extends $hyoo_crus_dict.with({
        Title: $hyoo_crus_atom_str,
    }) {
        title(next) {
            return this.Title(next)?.val(next) ?? '';
        }
    }
    __decorate([
        $mol_mem
    ], $hyoo_crus_entity.prototype, "title", null);
    $.$hyoo_crus_entity = $hyoo_crus_entity;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_crus_home extends $hyoo_crus_entity.with({
        Selection: $hyoo_crus_atom_str,
        Hall: $hyoo_crus_atom_ref_to(() => $hyoo_crus_dict),
    }) {
        hall_by(Node, preset) {
            return this.Hall(null)?.ensure(preset)?.cast(Node) ?? null;
        }
    }
    $.$hyoo_crus_home = $hyoo_crus_home;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_crus_mine extends $mol_object {
        static unit_updates = 0;
        static unit_appends = 0;
        static rock_writes = 0;
        static hash(blob) {
            return $mol_crypto_hash(blob);
        }
        static rock(hash, next) {
            $mol_wire_solid();
            return next ?? null;
        }
        static rock_save(blob) {
            const hash = this.hash(blob);
            this.rock(hash, blob);
            this.rock(hash);
            return hash;
        }
        static units_persisted = new WeakSet();
        static units(land, next) {
            if (next)
                return $mol_wire_sync(this).units_save(land, next), next;
            else
                return $mol_wire_sync(this).units_load(land);
        }
        static async units_load(land) {
            return [];
        }
        static async units_save(land, units) {
        }
    }
    __decorate([
        $mol_mem_key
    ], $hyoo_crus_mine, "hash", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_crus_mine, "rock", null);
    __decorate([
        $mol_action
    ], $hyoo_crus_mine, "rock_save", null);
    $.$hyoo_crus_mine = $hyoo_crus_mine;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_crus_mine_pg extends $hyoo_crus_mine {
        static urn() {
            return $mol_state_arg.value('db');
        }
        static url() {
            return new URL(this.urn());
        }
        static rock(hash, next) {
            if (next) {
                $mol_wire_sync(this).db_sync()?.query(`
						INSERT INTO Rock( hash, rock )
						VALUES( $1::bytea, $2::bytea )
						ON CONFLICT( hash ) DO NOTHING
					`, [hash, next]);
                return next;
            }
            return $mol_wire_sync(this).rock_load(hash);
        }
        static async rock_load(hash) {
            const db = await this.db();
            if (!db)
                return null;
            const res = await db.query(`SELECT rock FROM Rock WHERE hash = $1::bytea`, [hash]);
            return res.rows[0]?.rock ?? null;
        }
        static async units_save(land, units) {
            $hyoo_crus_land;
            const db = await this.db();
            if (!db)
                return;
            const tasks = units.map(unit => {
                const ref = land.description;
                const buf = Buffer.from(unit.buffer, unit.byteOffset, unit.byteLength);
                return db.query(`
						INSERT INTO Land( land, path, unit )
						VALUES( $1::varchar(17), $2::varchar(17), $3::bytea )
						ON CONFLICT( land, path ) DO UPDATE SET unit = $3::bytea;
					`, [ref, unit.key(), buf]);
            });
            await Promise.all(tasks);
            for (const unit of units)
                this.units_persisted.add(unit);
        }
        static async units_load(land) {
            const db = await this.db();
            if (!db)
                return [];
            const res = await db.query(`SELECT unit FROM Land WHERE land = $1::varchar(17)`, [land.description]);
            const units = res.rows.map(row => {
                const unit = new $hyoo_crus_unit(row.unit.buffer, row.unit.byteOffset, row.unit.byteLength).narrow();
                this.units_persisted.add(unit);
                $hyoo_crus_unit_trusted.add(unit);
                return unit;
            });
            return units;
        }
        static db_sync() {
            $mol_wire_solid();
            return $mol_wire_sync(this).db();
        }
        static async db() {
            const urn = this.urn();
            if (!urn)
                return null;
            const db = new $node.pg.Pool({
                connectionString: urn,
                ssl: { rejectUnauthorized: false },
            });
            db.on('error', error => {
                this.$.$mol_log3_fail({
                    place: this,
                    message: error?.message,
                });
            });
            await db.query(`
				CREATE TABLE IF NOT EXISTS Land (
					land varchar(17) NOT NULL,
					path varchar(17) NOT NULL,
					unit bytea NOT NULL,
					primary key( land, path )
				);
			`);
            await db.query(`
				CREATE TABLE IF NOT EXISTS Rock (
					hash bytea NOT NULL,
					rock bytea NOT NULL,
					primary key( hash )
				);
			`);
            this.$.$mol_log3_rise({
                place: this,
                message: 'Data Base Ready',
                type: this.url().protocol,
                host: this.url().host,
                name: this.url().pathname,
            });
            return db;
        }
    }
    __decorate([
        $mol_memo.method
    ], $hyoo_crus_mine_pg, "urn", null);
    __decorate([
        $mol_memo.method
    ], $hyoo_crus_mine_pg, "url", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_crus_mine_pg, "rock", null);
    __decorate([
        $mol_action
    ], $hyoo_crus_mine_pg, "units_load", null);
    __decorate([
        $mol_mem
    ], $hyoo_crus_mine_pg, "db_sync", null);
    __decorate([
        $mol_memo.method
    ], $hyoo_crus_mine_pg, "db", null);
    $.$hyoo_crus_mine_pg = $hyoo_crus_mine_pg;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_crus_mine_fs extends $hyoo_crus_mine {
        static root() {
            const root = this.$.$mol_file.relative('.crus');
            this.$.$mol_log3_rise({
                place: this,
                message: 'File Storage Ready',
                path: root.path()
            });
            return root;
        }
        static rock_file(hash) {
            const id = $mol_base64_ae_encode(hash);
            return this.root().resolve(`rock/${id.slice(0, 2)}/${id}.blob`);
        }
        static rock(hash, next) {
            const buf = this.rock_file(hash).buffer(next);
            if (next)
                return buf;
            if ($mol_compare_deep(hash, this.hash(buf)))
                return buf;
            return null;
        }
        static units_file(land) {
            $hyoo_crus_land;
            const id = land.description;
            const dir = this.root().resolve(`unit/${id.slice(0, 2)}`);
            dir.exists(true);
            return dir.resolve(`${id}.crus`);
        }
        static units_offsets(land) {
            $mol_wire_solid();
            return new Map();
        }
        static units_sizes = new Map();
        static units_save(land, units) {
            const descr = this.units_file(land).open('create', 'read_write');
            try {
                const offsets = this.units_offsets(land);
                const append = [];
                for (const unit of units) {
                    const off = offsets.get(unit.key());
                    if (off === undefined) {
                        append.push(unit);
                    }
                    else {
                        descr.write({ buffer: unit, position: off });
                        this.units_persisted.add(unit);
                    }
                }
                if (!append.length)
                    return;
                let size = this.units_sizes.get(land) ?? 0;
                let offset = size;
                size += append.length * $hyoo_crus_unit.size;
                descr.truncate(size);
                this.units_sizes.set(land, size);
                for (const unit of append) {
                    descr.write({ buffer: unit, position: offset });
                    offsets.set(unit.key(), offset);
                    this.units_persisted.add(unit);
                    offset += unit.byteLength;
                }
            }
            finally {
                descr.close();
            }
            return undefined;
        }
        static async units_load(land) {
            const descr = this.units_file(land).open('create', 'read_write');
            try {
                const buf = descr.read();
                if (!buf.length)
                    return [];
                this.units_sizes.set(land, buf.length);
                const pack = $hyoo_crus_pack.from(buf);
                const { lands, rocks } = pack.parts(land);
                const units = lands[land]?.units ?? [];
                const offsets = this.units_offsets(land);
                for (let i = 0; i < units.length; ++i) {
                    offsets.set(units[i].key(), i * $hyoo_crus_unit.size);
                    this.units_persisted.add(units[i]);
                }
                return units;
            }
            finally {
                descr.close();
            }
        }
    }
    __decorate([
        $mol_memo.method
    ], $hyoo_crus_mine_fs, "root", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_crus_mine_fs, "rock_file", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_crus_mine_fs, "rock", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_crus_mine_fs, "units_file", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_crus_mine_fs, "units_offsets", null);
    __decorate([
        $mol_action
    ], $hyoo_crus_mine_fs, "units_load", null);
    $.$hyoo_crus_mine_fs = $hyoo_crus_mine_fs;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$hyoo_crus_mine = $hyoo_crus_mine_pg.urn() ? $hyoo_crus_mine_pg : $hyoo_crus_mine_fs;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_crus_pack extends $mol_buffer {
        toBlob() {
            return new Blob([this], { type: 'application/vnd.hyoo_crus_pack' });
        }
        parts(land = null) {
            const lands = {};
            if (land)
                lands[land] = { faces: new $hyoo_crus_face_map, units: [] };
            let total = 0;
            const rocks = [];
            const buf = this.asArray();
            for (let offset = 0; offset < this.byteLength;) {
                const kind = this.uint8(offset);
                if (!kind)
                    break;
                if (kind % 2) {
                    switch (kind) {
                        case $hyoo_crus_part.land: {
                            const faces = new $hyoo_crus_face_map;
                            faces.total = this.uint32(offset) >> 8;
                            offset += 4;
                            land = $hyoo_crus_ref_decode(new Uint8Array(buf.buffer, buf.byteOffset + offset, 18));
                            offset += 20;
                            lands[land] = { faces, units: [] };
                            continue;
                        }
                        case $hyoo_crus_part.face: {
                            if (!land)
                                $mol_fail(new Error('Land is undefined'));
                            const count = this.uint32(offset) >> 8;
                            offset += 4;
                            const faces = lands[land].faces;
                            for (let i = 0; i < count; ++i) {
                                const peer = $mol_base64_ae_encode(new Uint8Array(buf.buffer, buf.byteOffset + offset, 6));
                                const time = this.uint48(offset + 6);
                                faces.time_max(peer, time);
                                offset += 12;
                            }
                            offset = Math.ceil(offset / 8) * 8;
                            continue;
                        }
                        case $hyoo_crus_part.pass: {
                            if (!land)
                                $mol_fail(new Error('Land is undefined'));
                            const unit = new $hyoo_crus_pass(buf.slice(offset, offset += $hyoo_crus_unit.size).buffer);
                            lands[land].units ||= [];
                            lands[land].units.push(unit);
                            continue;
                        }
                        case $hyoo_crus_part.gift: {
                            if (!land)
                                $mol_fail(new Error('Land is undefined'));
                            const unit = new $hyoo_crus_gift(buf.slice(offset, offset += $hyoo_crus_unit.size).buffer);
                            lands[land].units ||= [];
                            lands[land].units.push(unit);
                            continue;
                        }
                        case $hyoo_crus_part.rock: {
                            const size = this.uint32(offset) >> 8;
                            if (size === 0) {
                                const hash = buf.slice(offset + 4, offset + 4 + 24);
                                rocks.push([hash, null]);
                                offset += 4 + 24;
                            }
                            else {
                                const rock = buf.slice(offset + 4, offset + 4 + size);
                                const hash = $mol_crypto_hash(rock);
                                rocks.push([hash, rock]);
                                offset += Math.ceil(size / 8 + .5) * 8;
                            }
                            continue;
                        }
                        case $hyoo_crus_part.root:
                        case $hyoo_crus_part.buck: {
                            offset += 128;
                            continue;
                        }
                        default: $mol_fail(new Error(`Unknown CRUS Pack Part (${kind.toString(2)}) at (${offset.toString(16)})`));
                    }
                }
                else {
                    if (!land)
                        $mol_fail(new Error('Land is undefined'));
                    const unit = $hyoo_crus_sand.from(buf.slice(offset, offset += $hyoo_crus_unit.size));
                    lands[land].units ||= [];
                    lands[land].units.push(unit);
                    continue;
                }
            }
            return { lands, rocks };
        }
        static make({ lands, rocks }) {
            let size = 0;
            for (const land of Reflect.ownKeys(lands)) {
                size += 24;
                size += Math.ceil(lands[land].faces.size * 12 / 8 + .5) * 8;
                size += lands[land].units.length * $hyoo_crus_unit.size;
            }
            for (const [hash, rock] of rocks) {
                size += rock ? Math.ceil(rock.length / 8 + .5) * 8 : 24;
            }
            if (size === 0)
                return null;
            const buff = new Uint8Array(size);
            const pack = new $hyoo_crus_pack(buff.buffer);
            let offset = 0;
            for (const land of Reflect.ownKeys(lands)) {
                const faces = lands[land].faces;
                pack.uint32(offset, $hyoo_crus_part.land | (faces.total << 8));
                buff.set($hyoo_crus_ref_encode(land), offset + 4);
                offset += 24;
                pack.uint32(offset, $hyoo_crus_part.face | (faces.size << 8));
                offset += 4;
                for (const [peer, time] of faces) {
                    buff.set($mol_base64_ae_decode(peer), offset);
                    pack.uint48(offset + 6, time);
                    offset += 12;
                }
                offset = Math.ceil(offset / 8) * 8;
                for (const unit of lands[land].units) {
                    buff.set(unit.asArray(), offset);
                    offset += unit.byteLength;
                }
            }
            for (const [hash, rock] of rocks) {
                const len = rock?.length ?? 0;
                pack.uint32(offset, $hyoo_crus_part.rock | (len << 8));
                if (rock)
                    buff.set(rock, offset + 4);
                else
                    buff.set(hash, offset + 4);
                offset += rock ? Math.ceil(len / 8 + .5) * 8 : 24;
            }
            return pack;
        }
    }
    $.$hyoo_crus_pack = $hyoo_crus_pack;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const Passives = new WeakMap();
    class $hyoo_crus_yard extends $mol_object {
        glob() {
            return null;
        }
        lands_news = new $mol_wire_set();
        static masters = [];
        master_cursor(next = 0) {
            return next;
        }
        master_current() {
            return this.$.$hyoo_crus_yard.masters[this.master_cursor()];
        }
        master_next() {
            this.master_cursor((this.master_cursor() + 1) % this.$.$hyoo_crus_yard.masters.length);
        }
        reconnects(reset) {
            return ($mol_wire_probe(() => this.reconnects()) ?? 0) + 1;
        }
        master() {
            this.reconnects();
            const link = this.master_current();
            if (!link)
                return null;
            const socket = new $mol_dom_context.WebSocket(link.replace(/^http/, 'ws'));
            socket.binaryType = 'arraybuffer';
            const port = $mol_rest_port_ws_std.make({ socket });
            socket.onmessage = async (event) => {
                if (event.data instanceof ArrayBuffer) {
                    if (!event.data.byteLength)
                        return;
                    await $mol_wire_async(this).port_income(port, new Uint8Array(event.data));
                }
                else {
                    this.$.$mol_log3_fail({
                        place: this,
                        message: 'Wrong data',
                        data: event.data
                    });
                }
            };
            let interval;
            socket.onclose = () => {
                clearInterval(interval);
                setTimeout(() => this.reconnects(null), 1000);
            };
            Object.assign(socket, {
                destructor: () => {
                    socket.onclose = () => { };
                    clearInterval(interval);
                    socket.close();
                }
            });
            return new Promise((done, fail) => {
                socket.onopen = () => {
                    this.$.$mol_log3_come({
                        place: this,
                        message: 'Connected',
                        port: $mol_key(port),
                        server: link,
                    });
                    interval = setInterval(() => socket.send(new Uint8Array), 30000);
                    done(port);
                };
                socket.onerror = () => {
                    socket.onclose = event => {
                        fail(new Error(`Master (${link}) is unavailable (${event.code})`));
                        clearInterval(interval);
                        interval = setTimeout(() => {
                            this.master_next();
                            this.reconnects(null);
                        }, 1000);
                    };
                };
            });
        }
        slaves = new $mol_wire_set();
        sync() {
            this.sync_news();
            this.sync_port();
        }
        sync_news() {
            const glob = this.$.$hyoo_crus_glob;
            const lands = [...this.lands_news].map(ref => glob.Land(ref));
            try {
                for (const port of this.masters()) {
                    for (const land of lands) {
                        this.sync_port_land([port, land.ref()]);
                    }
                }
                for (const land of lands)
                    land.saving();
                this.lands_news.clear();
            }
            catch (error) {
                $mol_fail_log(error);
            }
        }
        sync_port() {
            for (const port of this.ports())
                this.sync_port_lands(port);
        }
        sync_port_lands(port) {
            for (const land of this.port_lands_active(port)) {
                this.sync_port_land([port, land]);
            }
        }
        ports() {
            return [...this.masters(), ...this.slaves];
        }
        masters() {
            try {
                return [this.master()].filter($mol_guard_defined);
            }
            catch (error) {
                $mol_fail_log(error);
                return [];
            }
        }
        port_lands_active(port) {
            return new $mol_wire_set();
        }
        port_lands_passive(port) {
            let passives = Passives.get(port);
            if (!passives)
                Passives.set(port, passives = new Set);
            return passives;
        }
        port_income(port, msg) {
            const pack = $mol_wire_sync($hyoo_crus_pack).from(msg);
            const parts = $mol_wire_sync(pack).parts();
            if (this.$.$hyoo_crus_log())
                $mol_wire_sync(this.$).$mol_log3_rise({
                    place: this,
                    message: 'Gain Pack',
                    port: $mol_key(port),
                    lands: parts.lands,
                    rocks: parts.rocks.length,
                });
            forget: {
                if (parts.rocks.length)
                    break forget;
                const lands = Object.getOwnPropertySymbols(parts.lands);
                for (const land of lands) {
                    if (parts.lands[land].units.length)
                        break forget;
                    if (parts.lands[land].faces.size)
                        break forget;
                    if (!this.port_lands_active(port).has(land))
                        break forget;
                    this.port_lands_active(port).delete(land);
                    return;
                }
            }
            this.face_port_sync(port, parts.lands);
            this.$.$hyoo_crus_glob.apply_parts(parts.lands, parts.rocks);
        }
        face_port_sync(port, income) {
            const actives = this.port_lands_active(port);
            const passives = this.port_lands_passive(port);
            for (const land of Reflect.ownKeys(income)) {
                if (!passives.has(land))
                    actives.add(land);
                const faces = income[land].faces;
                let port_faces = this.face_port_land([port, land]);
                if (!port_faces)
                    this.face_port_land([port, land], port_faces = $mol_mem_cached(() => this.face_port_land([port, land]))
                        || new $hyoo_crus_face_map);
                port_faces.sync(faces);
                const units = income[land].units;
                for (let unit of units) {
                    const unit2 = unit.narrow();
                    if (unit2 instanceof $hyoo_crus_pass)
                        continue;
                    port_faces.time_max(unit2.peer(), unit2.time());
                }
            }
        }
        sync_land(land) {
            for (const port of this.masters()) {
                this.port_lands_passive(port).add(land);
                this.sync_port_land([port, land]);
            }
            this.sync();
        }
        forget_land(land) {
            const faces = new $hyoo_crus_face_map;
            faces.total = land.faces.total;
            const pack = $hyoo_crus_pack.make({
                lands: { [land.ref()]: { faces, units: [] } },
                rocks: [],
            }).asArray();
            for (const port of this.ports()) {
                if (!this.port_lands_passive(port).has(land.ref()))
                    continue;
                this.port_lands_passive(port).delete(land.ref());
                if (this.$.$hyoo_crus_log())
                    this.$.$mol_log3_rise({
                        place: this,
                        message: 'Forget Land',
                        port: $mol_key(port),
                        land: land.ref(),
                    });
                port.send_bin(pack);
            }
        }
        sync_port_land([port, land]) {
            try {
                this.init_port_land([port, land]);
                const faces = this.face_port_land([port, land]);
                if (!faces)
                    return;
                const Land = this.$.$hyoo_crus_glob.Land(land);
                Land.saving();
                const parts = Land.delta_parts(faces);
                if (!parts)
                    return;
                if (this.$.$hyoo_crus_log())
                    this.$.$mol_log3_rise({
                        place: this,
                        message: 'Send Unit',
                        port: $mol_key(port),
                        lands: parts.lands,
                        rocks: parts.rocks.length,
                    });
                port.send_bin($hyoo_crus_pack.make(parts).asArray());
                faces.sync(Land.faces);
            }
            catch (error) {
                $mol_fail_log(error);
            }
        }
        init_port_land([port, land]) {
            const Land = this.$.$hyoo_crus_glob.Land(land);
            Land.loading();
            if (this.$.$hyoo_crus_log())
                this.$.$mol_log3_rise({
                    place: this,
                    message: 'Send Face',
                    port: $mol_key(port),
                    land: land,
                    faces: Land.faces,
                });
            port.send_bin(Land.faces_pack().asArray());
        }
        face_port_land([port, land], next = null) {
            $mol_wire_solid();
            return next;
        }
    }
    __decorate([
        $mol_mem
    ], $hyoo_crus_yard.prototype, "glob", null);
    __decorate([
        $mol_mem
    ], $hyoo_crus_yard.prototype, "master_cursor", null);
    __decorate([
        $mol_mem
    ], $hyoo_crus_yard.prototype, "master_current", null);
    __decorate([
        $mol_action
    ], $hyoo_crus_yard.prototype, "master_next", null);
    __decorate([
        $mol_mem
    ], $hyoo_crus_yard.prototype, "reconnects", null);
    __decorate([
        $mol_mem
    ], $hyoo_crus_yard.prototype, "master", null);
    __decorate([
        $mol_mem
    ], $hyoo_crus_yard.prototype, "sync", null);
    __decorate([
        $mol_mem
    ], $hyoo_crus_yard.prototype, "sync_news", null);
    __decorate([
        $mol_mem
    ], $hyoo_crus_yard.prototype, "sync_port", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_crus_yard.prototype, "sync_port_lands", null);
    __decorate([
        $mol_mem
    ], $hyoo_crus_yard.prototype, "ports", null);
    __decorate([
        $mol_mem
    ], $hyoo_crus_yard.prototype, "masters", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_crus_yard.prototype, "port_lands_active", null);
    __decorate([
        $mol_action
    ], $hyoo_crus_yard.prototype, "port_income", null);
    __decorate([
        $mol_action
    ], $hyoo_crus_yard.prototype, "face_port_sync", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_crus_yard.prototype, "sync_land", null);
    __decorate([
        $mol_action
    ], $hyoo_crus_yard.prototype, "forget_land", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_crus_yard.prototype, "sync_port_land", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_crus_yard.prototype, "init_port_land", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_crus_yard.prototype, "face_port_land", null);
    $.$hyoo_crus_yard = $hyoo_crus_yard;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_crus_glob extends $mol_object {
        static lands_touched = new $mol_wire_set();
        lands_touched = this.constructor.lands_touched;
        static yard() {
            return new this.$.$hyoo_crus_yard;
        }
        yard() {
            return this.$.$hyoo_crus_glob.yard();
        }
        static home(Node) {
            return this.Land(this.$.$hyoo_crus_auth.current().lord()).Data(Node ?? $hyoo_crus_home);
        }
        home() {
            return this.$.$hyoo_crus_glob.home();
        }
        static king_grab(preset = { '': $hyoo_crus_rank_read }) {
            const king = this.$.$hyoo_crus_auth.grab();
            const colony = $mol_wire_sync($hyoo_crus_land).make({ $: this.$ });
            colony.auth = $mol_const(king);
            if ((preset[''] ?? $hyoo_crus_rank_deny) === $hyoo_crus_rank_deny) {
                colony.encrypted(true);
            }
            const self = this.$.$hyoo_crus_auth.current();
            colony.give(self, $hyoo_crus_rank_rule);
            for (const key in preset)
                colony.give(key ? $hyoo_crus_auth.from(key) : null, preset[key]);
            this.Land(colony.ref()).apply_unit(colony.delta_unit());
            return king;
        }
        king_grab(preset = { '': $hyoo_crus_rank_read }) {
            return this.$.$hyoo_crus_glob.king_grab(preset);
        }
        static land_grab(preset = { '': $hyoo_crus_rank_read }) {
            return this.Land(this.king_grab(preset).lord());
        }
        land_grab(preset = { '': $hyoo_crus_rank_read }) {
            return this.$.$hyoo_crus_glob.land_grab(preset);
        }
        static Land(ref) {
            this.lands_touched.add(ref);
            return $hyoo_crus_land.make({
                ref: $mol_const(ref),
            });
        }
        Land(ref) {
            return this.$.$hyoo_crus_glob.Land(ref);
        }
        static Node(ref, Node) {
            const land = this.Land($hyoo_crus_ref_land(ref));
            return land.Node(Node).Item($hyoo_crus_ref_head(ref));
        }
        Node(ref, Node) {
            return this.$.$hyoo_crus_glob.Node(ref, Node);
        }
        static apply_pack(pack) {
            const { lands, rocks } = pack.parts();
            return this.apply_parts(lands, rocks);
        }
        apply_pack(pack) {
            return this.$.$hyoo_crus_glob.apply_pack(pack);
        }
        static apply_parts(lands, rocks) {
            for (const land of Reflect.ownKeys(lands)) {
                const errors = this.Land(land).apply_unit(lands[land].units).filter(Boolean);
                for (const error of errors)
                    this.$.$mol_log3_warn({
                        place: `${this}.apply_pack()`,
                        message: error,
                        hint: 'Send it to developer',
                    });
            }
            for (const [hash, rock] of rocks) {
                if (!rock)
                    continue;
                this.$.$hyoo_crus_mine.rock_save(rock);
            }
        }
        apply_parts(lands, rocks) {
            return this.$.$hyoo_crus_glob.apply_parts(lands, rocks);
        }
    }
    __decorate([
        $mol_mem
    ], $hyoo_crus_glob, "yard", null);
    __decorate([
        $mol_action
    ], $hyoo_crus_glob, "king_grab", null);
    __decorate([
        $mol_action
    ], $hyoo_crus_glob, "land_grab", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_crus_glob, "Land", null);
    __decorate([
        $mol_action
    ], $hyoo_crus_glob, "apply_pack", null);
    __decorate([
        $mol_action
    ], $hyoo_crus_glob, "apply_parts", null);
    $.$hyoo_crus_glob = $hyoo_crus_glob;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $hyoo_crus_status extends $.$hyoo_crus_status {
            message() {
                try {
                    this.$.$hyoo_crus_glob.yard().master();
                    return this.hint();
                }
                catch (error) {
                    if (error instanceof Promise)
                        $mol_fail_hidden(error);
                    $mol_fail_log(error);
                    return String(error);
                }
            }
            link_content() {
                try {
                    this.$.$hyoo_crus_glob.yard().master();
                    return [this.Well()];
                }
                catch (error) {
                    if (error instanceof Promise)
                        $mol_fail_hidden(error);
                    $mol_fail_log(error);
                    return [this.Fail()];
                }
            }
            options() {
                return this.$.$hyoo_crus_yard.masters;
            }
            master_link() {
                return this.$.$hyoo_crus_glob.yard().master_current();
            }
            master_id(uri) {
                return uri.replace(/^\w+:\/\//, '').replace(/\/$/, '');
            }
            option_label(uri) {
                return uri.replace(/^\w+:\/\//, '').replace(/\/$/, '');
            }
            value(next) {
                return this.$.$hyoo_crus_yard.masters[this.$.$hyoo_crus_glob.yard().master_cursor(next == undefined ? undefined : this.$.$hyoo_crus_yard.masters.indexOf(next))];
            }
        }
        __decorate([
            $mol_mem
        ], $hyoo_crus_status.prototype, "message", null);
        __decorate([
            $mol_mem
        ], $hyoo_crus_status.prototype, "link_content", null);
        __decorate([
            $mol_mem
        ], $hyoo_crus_status.prototype, "master_link", null);
        $$.$hyoo_crus_status = $hyoo_crus_status;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("hyoo/crus/status/status.view.css", "[hyoo_crus_status_option_row] {\n\tpadding: var(--mol_gap_text);\n}\n\n[hyoo_crus_status_well] {\n\tcolor: var(--mol_theme_current);\n}\n\n[hyoo_crus_status_fail] {\n\tcolor: var(--mol_theme_focus);\n}\n\n[hyoo_crus_status][mol_view_error=\"Promise\"] {\n\tanimation: hyoo_crus_status_wait 1s linear infinite;\n}\n\n@keyframes hyoo_crus_status_wait {\n\tfrom {\n\t\topacity: 1;\n\t}\n\tto {\n\t\topacity: .5;\n\t}\n}\n");
})($ || ($ = {}));

;
	($.$mol_check_icon) = class $mol_check_icon extends ($.$mol_check) {};


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/check/icon/icon.view.css", "[mol_check_icon]:where([mol_check_checked]) {\n\tcolor: var(--mol_theme_current);\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_icon_brightness_4) = class $mol_icon_brightness_4 extends ($.$mol_icon) {
		path(){
			return "M12,18C11.11,18 10.26,17.8 9.5,17.45C11.56,16.5 13,14.42 13,12C13,9.58 11.56,7.5 9.5,6.55C10.26,6.2 11.11,6 12,6A6,6 0 0,1 18,12A6,6 0 0,1 12,18M20,8.69V4H15.31L12,0.69L8.69,4H4V8.69L0.69,12L4,15.31V20H8.69L12,23.31L15.31,20H20V15.31L23.31,12L20,8.69Z";
		}
	};


;
"use strict";

;
	($.$mol_lights_toggle) = class $mol_lights_toggle extends ($.$mol_check_icon) {
		Lights_icon(){
			const obj = new this.$.$mol_icon_brightness_4();
			return obj;
		}
		lights(next){
			if(next !== undefined) return next;
			return false;
		}
		Icon(){
			return (this.Lights_icon());
		}
		hint(){
			return (this.$.$mol_locale.text("$mol_lights_toggle_hint"));
		}
		checked(next){
			return (this.lights(next));
		}
	};
	($mol_mem(($.$mol_lights_toggle.prototype), "Lights_icon"));
	($mol_mem(($.$mol_lights_toggle.prototype), "lights"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_lights_toggle extends $.$mol_lights_toggle {
            lights(next) {
                return this.$.$mol_lights(next);
            }
        }
        $$.$mol_lights_toggle = $mol_lights_toggle;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_image) = class $mol_image extends ($.$mol_view) {
		uri(){
			return "";
		}
		loading(){
			return "eager";
		}
		decoding(){
			return "async";
		}
		cors(){
			return null;
		}
		natural_width(){
			return 0;
		}
		natural_height(){
			return 0;
		}
		load(next){
			if(next !== undefined) return next;
			return null;
		}
		dom_name(){
			return "img";
		}
		field(){
			return {
				...(super.field()), 
				"src": (this.uri()), 
				"alt": (this.title()), 
				"loading": (this.loading()), 
				"decoding": (this.decoding()), 
				"crossOrigin": (this.cors())
			};
		}
		attr(){
			return {
				...(super.attr()), 
				"width": (this.natural_width()), 
				"height": (this.natural_height())
			};
		}
		event(){
			return {"load": (next) => (this.load(next))};
		}
		minimal_width(){
			return 16;
		}
		minimal_height(){
			return 16;
		}
	};
	($mol_mem(($.$mol_image.prototype), "load"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_image extends $.$mol_image {
            natural_width(next) {
                const dom = this.dom_node();
                if (dom.naturalWidth)
                    return dom.naturalWidth;
                const found = this.uri().match(/\bwidth=(\d+)/);
                return found ? Number(found[1]) : null;
            }
            natural_height(next) {
                const dom = this.dom_node();
                if (dom.naturalHeight)
                    return dom.naturalHeight;
                const found = this.uri().match(/\bheight=(\d+)/);
                return found ? Number(found[1]) : null;
            }
            load() {
                this.natural_width(null);
                this.natural_height(null);
            }
        }
        __decorate([
            $mol_mem
        ], $mol_image.prototype, "natural_width", null);
        __decorate([
            $mol_mem
        ], $mol_image.prototype, "natural_height", null);
        $$.$mol_image = $mol_image;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/image/image.view.css", "[mol_image] {\n\tborder-radius: var(--mol_gap_round);\n\toverflow: hidden;\n\tflex: 0 1 auto;\n\tmax-width: 100%;\n\tobject-fit: cover;\n\theight: fit-content;\n}\n");
})($ || ($ = {}));

;
	($.$mol_stack) = class $mol_stack extends ($.$mol_view) {};


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/stack/stack.view.css", "[mol_stack] {\n\tdisplay: grid;\n\t/* width: max-content; */\n\t/* height: max-content; */\n\talign-items: flex-start;\n\tjustify-items: flex-start;\n}\n\n[mol_stack] > * {\n\tgrid-area: 1/1;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_text_code_token) = class $mol_text_code_token extends ($.$mol_dimmer) {
		type(){
			return "";
		}
		attr(){
			return {...(super.attr()), "mol_text_code_token_type": (this.type())};
		}
	};
	($.$mol_text_code_token_link) = class $mol_text_code_token_link extends ($.$mol_text_code_token) {
		uri(){
			return "";
		}
		dom_name(){
			return "a";
		}
		type(){
			return "code-link";
		}
		attr(){
			return {
				...(super.attr()), 
				"href": (this.uri()), 
				"target": "_blank"
			};
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        const { hsla } = $mol_style_func;
        $mol_style_define($mol_text_code_token, {
            display: 'inline',
            textDecoration: 'none',
            '@': {
                mol_text_code_token_type: {
                    'code-keyword': {
                        color: hsla(0, 70, 60, 1),
                    },
                    'code-field': {
                        color: hsla(300, 70, 50, 1),
                    },
                    'code-tag': {
                        color: hsla(330, 70, 50, 1),
                    },
                    'code-global': {
                        color: hsla(30, 80, 50, 1),
                    },
                    'code-decorator': {
                        color: hsla(180, 40, 50, 1),
                    },
                    'code-punctuation': {
                        color: hsla(0, 0, 50, 1),
                    },
                    'code-string': {
                        color: hsla(90, 40, 50, 1),
                    },
                    'code-number': {
                        color: hsla(55, 65, 45, 1),
                    },
                    'code-call': {
                        color: hsla(270, 60, 50, 1),
                    },
                    'code-link': {
                        color: hsla(210, 60, 50, 1),
                    },
                    'code-comment-inline': {
                        opacity: .5,
                    },
                    'code-comment-block': {
                        opacity: .5,
                    },
                    'code-docs': {
                        opacity: .75,
                    },
                },
            }
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_text_code_line) = class $mol_text_code_line extends ($.$mol_paragraph) {
		numb(){
			return 0;
		}
		token_type(id){
			return "";
		}
		token_text(id){
			return "";
		}
		highlight(){
			return "";
		}
		token_uri(id){
			return "";
		}
		text(){
			return "";
		}
		minimal_height(){
			return 24;
		}
		numb_showed(){
			return true;
		}
		syntax(){
			return null;
		}
		uri_resolve(id){
			return "";
		}
		Numb(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.numb())]);
			return obj;
		}
		Token(id){
			const obj = new this.$.$mol_text_code_token();
			(obj.type) = () => ((this.token_type(id)));
			(obj.haystack) = () => ((this.token_text(id)));
			(obj.needle) = () => ((this.highlight()));
			return obj;
		}
		Token_link(id){
			const obj = new this.$.$mol_text_code_token_link();
			(obj.haystack) = () => ((this.token_text(id)));
			(obj.needle) = () => ((this.highlight()));
			(obj.uri) = () => ((this.token_uri(id)));
			return obj;
		}
		find_pos(id){
			return null;
		}
	};
	($mol_mem(($.$mol_text_code_line.prototype), "Numb"));
	($mol_mem_key(($.$mol_text_code_line.prototype), "Token"));
	($mol_mem_key(($.$mol_text_code_line.prototype), "Token_link"));


;
"use strict";
var $;
(function ($) {
    class $mol_syntax2 {
        lexems;
        constructor(lexems) {
            this.lexems = lexems;
            for (let name in lexems) {
                this.rules.push({
                    name: name,
                    regExp: lexems[name],
                    size: RegExp('^$|' + lexems[name].source).exec('').length - 1,
                });
            }
            const parts = '(' + this.rules.map(rule => rule.regExp.source).join(')|(') + ')';
            this.regexp = RegExp(`([\\s\\S]*?)(?:(${parts})|$(?![^]))`, 'gmu');
        }
        rules = [];
        regexp;
        tokenize(text, handle) {
            let end = 0;
            lexing: while (end < text.length) {
                const start = end;
                this.regexp.lastIndex = start;
                var found = this.regexp.exec(text);
                end = this.regexp.lastIndex;
                if (start === end)
                    throw new Error('Empty token');
                var prefix = found[1];
                if (prefix)
                    handle('', prefix, [prefix], start);
                var suffix = found[2];
                if (!suffix)
                    continue;
                let offset = 4;
                for (let rule of this.rules) {
                    if (found[offset - 1]) {
                        handle(rule.name, suffix, found.slice(offset, offset + rule.size), start + prefix.length);
                        continue lexing;
                    }
                    offset += rule.size + 1;
                }
                $mol_fail(new Error('$mol_syntax2 is broken'));
            }
        }
        parse(text, handlers) {
            this.tokenize(text, (name, ...args) => handlers[name](...args));
        }
    }
    $.$mol_syntax2 = $mol_syntax2;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_syntax2_md_flow = new $mol_syntax2({
        'quote': /^((?:(?:[>"] )(?:[^]*?)$(\r?\n?))+)([\n\r]*)/,
        'spoiler': /^((?:(?:[\?] )(?:[^]*?)$(\r?\n?))+)([\n\r]*)/,
        'header': /^([#=]+)(\s+)(.*?)$([\n\r]*)/,
        'list': /^((?:(?: ?([*+-])|(?:\d+[\.\)])+) +(?:[^]*?)$(?:\r?\n?)(?:  (?:[^]*?)$(?:\r?\n?))*)+)((?:\r?\n)*)/,
        'code': /^(```\s*)([\w.-]*)[\r\n]+([^]*?)^(```)$([\n\r]*)/,
        'code-indent': /^((?:(?: |\t)(?:[^]*?)$\r?\n?)+)([\n\r]*)/,
        'table': /((?:^\|.+?$\r?\n?)+)([\n\r]*)/,
        'grid': /((?:^ *! .*?$\r?\n?)+)([\n\r]*)/,
        'cut': /^--+$((?:\r?\n)*)/,
        'block': /^(.*?)$((?:\r?\n)*)/,
    });
    $.$mol_syntax2_md_line = new $mol_syntax2({
        'strong': /\*\*(.+?)\*\*/,
        'emphasis': /\*(?!\s)(.+?)\*|\/\/(?!\s)(.+?)\/\//,
        'code': /```(.+?)```|;;(.+?);;|`(.+?)`/,
        'insert': /\+\+(.+?)\+\+/,
        'delete': /~~(.+?)~~|--(.+?)--/,
        'embed': /""(?:(.*?)\\)?(.*?)""/,
        'link': /\\\\(?:(.*?)\\)?(.*?)\\\\/,
        'image-link': /!\[([^\[\]]*?)\]\((.*?)\)/,
        'text-link': /\[(.*?(?:\[[^\[\]]*?\][^\[\]]*?)*)\]\((.*?)\)/,
        'text-link-http': /\b(https?:\/\/[^\s,.;:!?")]+(?:[,.;:!?")][^\s,.;:!?")]+)+)/,
    });
    $.$mol_syntax2_md_code = new $mol_syntax2({
        'code-indent': /\t+/,
        'code-docs': /\/\/\/.*?$/,
        'code-comment-block': /(?:\/\*[^]*?\*\/|\/\+[^]*?\+\/|<![^]*?>)/,
        'code-link': /(?:\w+:\/\/|#)\S+?(?=\s|\\\\|""|$)/,
        'code-comment-inline': /\/\/.*?(?:$|\/\/)|- \\(?!\\).*|#!? .*/,
        'code-string': /(?:".*?"|'.*?'|`.*?`| ?\\\\.+?\\\\|\/.+?\/[dygimsu]*(?!\p{Letter})|[ \t]*\\[^\n]*)/u,
        'code-number': /[+-]?(?:\d*\.)?\d+\w*/,
        'code-call': /\.?\w+ *(?=\()/,
        'code-sexpr': /\((\w+ )/,
        'code-field': /(?:(?:\.|::|->)\w+|[\w-]+\??\s*:(?!\/\/|:))/,
        'code-keyword': /\b(throw|readonly|unknown|keyof|typeof|never|from|class|struct|interface|type|function|extends|implements|module|namespace|import|export|include|require|var|val|let|const|for|do|while|until|in|out|of|new|if|then|else|switch|case|this|return|async|await|yield|try|catch|break|continue|get|set|public|private|protected|string|boolean|number|null|undefined|true|false|void|int|float|ref)\b/,
        'code-global': /[$]+\w*|\b[A-Z][a-z0-9]+[A-Z]\w*/,
        'code-word': /\w+/,
        'code-decorator': /@.+/,
        'code-tag': /<\/?[\w-]+\/?>?|&\w+;/,
        'code-punctuation': /[\-\[\]\{\}\(\)<=>~!\?@#%&\*_\+\\\/\|;:\.,\^]+?/,
    });
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_text_code_line extends $.$mol_text_code_line {
            maximal_width() {
                return this.text().length * this.letter_width();
            }
            syntax() {
                return this.$.$mol_syntax2_md_code;
            }
            tokens(path) {
                const tokens = [];
                const text = (path.length > 0)
                    ? this.tokens(path.slice(0, path.length - 1))[path[path.length - 1]].found.slice(1, -1)
                    : this.text();
                this.syntax().tokenize(text, (name, found, chunks) => {
                    if (name === 'code-sexpr') {
                        tokens.push({ name: 'code-punctuation', found: '(', chunks: [] });
                        tokens.push({ name: 'code-call', found: chunks[0], chunks: [] });
                    }
                    else {
                        tokens.push({ name, found, chunks });
                    }
                });
                return tokens;
            }
            sub() {
                return [
                    ...this.numb_showed() ? [this.Numb()] : [],
                    ...this.row_content([])
                ];
            }
            row_content(path) {
                return this.tokens(path).map((t, i) => this.Token([...path, i]));
            }
            Token(path) {
                return this.token_type(path) === 'code-link' ? this.Token_link(path) : super.Token(path);
            }
            token_type(path) {
                return this.tokens([...path.slice(0, path.length - 1)])[path[path.length - 1]].name;
            }
            token_content(path) {
                const tokens = this.tokens([...path.slice(0, path.length - 1)]);
                const token = tokens[path[path.length - 1]];
                switch (token.name) {
                    case 'code-string': return [
                        token.found[0],
                        ...this.row_content(path),
                        token.found[token.found.length - 1],
                    ];
                    default: return [token.found];
                }
            }
            token_text(path) {
                const tokens = this.tokens([...path.slice(0, path.length - 1)]);
                const token = tokens[path[path.length - 1]];
                return token.found;
            }
            token_uri(path) {
                const uri = this.token_text(path);
                return this.uri_resolve(uri);
            }
            *view_find(check, path = []) {
                if (check(this, this.text())) {
                    yield [...path, this];
                }
            }
            find_pos(offset) {
                return this.find_token_pos([offset]);
            }
            find_token_pos([offset, ...path]) {
                for (const [index, token] of this.tokens(path).entries()) {
                    if (token.found.length >= offset) {
                        const token = this.Token([...path, index]);
                        return { token, offset };
                    }
                    else {
                        offset -= token.found.length;
                    }
                }
                return null;
            }
        }
        __decorate([
            $mol_mem_key
        ], $mol_text_code_line.prototype, "tokens", null);
        __decorate([
            $mol_mem_key
        ], $mol_text_code_line.prototype, "row_content", null);
        __decorate([
            $mol_mem_key
        ], $mol_text_code_line.prototype, "token_type", null);
        __decorate([
            $mol_mem_key
        ], $mol_text_code_line.prototype, "token_content", null);
        __decorate([
            $mol_mem_key
        ], $mol_text_code_line.prototype, "token_text", null);
        __decorate([
            $mol_mem_key
        ], $mol_text_code_line.prototype, "token_uri", null);
        __decorate([
            $mol_mem_key
        ], $mol_text_code_line.prototype, "find_pos", null);
        __decorate([
            $mol_mem_key
        ], $mol_text_code_line.prototype, "find_token_pos", null);
        $$.$mol_text_code_line = $mol_text_code_line;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        const { rem } = $mol_style_unit;
        $mol_style_define($mol_text_code_line, {
            display: 'block',
            position: 'relative',
            font: {
                family: 'monospace',
            },
            Numb: {
                textAlign: 'right',
                color: $mol_theme.shade,
                width: rem(3),
                margin: {
                    left: rem(-4),
                },
                display: 'inline-block',
                whiteSpace: 'nowrap',
                userSelect: 'none',
                position: 'absolute',
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$mol_blob = ($node.buffer?.Blob ?? $mol_dom_context.Blob);
})($ || ($ = {}));

;
	($.$mol_icon_clipboard) = class $mol_icon_clipboard extends ($.$mol_icon) {
		path(){
			return "M19,3H14.82C14.4,1.84 13.3,1 12,1C10.7,1 9.6,1.84 9.18,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5A2,2 0 0,0 19,3M12,3A1,1 0 0,1 13,4A1,1 0 0,1 12,5A1,1 0 0,1 11,4A1,1 0 0,1 12,3";
		}
	};


;
"use strict";

;
	($.$mol_icon_clipboard_outline) = class $mol_icon_clipboard_outline extends ($.$mol_icon) {
		path(){
			return "M19,3H14.82C14.4,1.84 13.3,1 12,1C10.7,1 9.6,1.84 9.18,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5A2,2 0 0,0 19,3M12,3A1,1 0 0,1 13,4A1,1 0 0,1 12,5A1,1 0 0,1 11,4A1,1 0 0,1 12,3M7,7H17V5H19V19H5V5H7V7Z";
		}
	};


;
"use strict";

;
	($.$mol_button_copy) = class $mol_button_copy extends ($.$mol_button_minor) {
		text(){
			return (this.title());
		}
		text_blob(next){
			if(next !== undefined) return next;
			const obj = new this.$.$mol_blob([(this.text())], {"type": "text/plain"});
			return obj;
		}
		html(){
			return "";
		}
		html_blob(next){
			if(next !== undefined) return next;
			const obj = new this.$.$mol_blob([(this.html())], {"type": "text/html"});
			return obj;
		}
		Icon(){
			const obj = new this.$.$mol_icon_clipboard_outline();
			return obj;
		}
		title(){
			return "";
		}
		blobs(){
			return [(this.text_blob()), (this.html_blob())];
		}
		data(){
			return {};
		}
		sub(){
			return [(this.Icon()), (this.title())];
		}
	};
	($mol_mem(($.$mol_button_copy.prototype), "text_blob"));
	($mol_mem(($.$mol_button_copy.prototype), "html_blob"));
	($mol_mem(($.$mol_button_copy.prototype), "Icon"));


;
"use strict";
var $;
(function ($) {
    const mapping = {
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        '&': '&amp;',
    };
    function $mol_html_encode(text) {
        return text.replace(/[&<">]/gi, str => mapping[str]);
    }
    $.$mol_html_encode = $mol_html_encode;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_button_copy extends $.$mol_button_copy {
            data() {
                return Object.fromEntries(this.blobs().map(blob => [blob.type, blob]));
            }
            html() {
                return $mol_html_encode(this.text());
            }
            attachments() {
                return [new ClipboardItem(this.data())];
            }
            click(event) {
                const cb = $mol_wire_sync(this.$.$mol_dom_context.navigator.clipboard);
                cb.writeText?.(this.text());
                cb.write?.(this.attachments());
                if (cb.writeText === undefined && cb.write === undefined) {
                    throw new Error("doesn't support copy to clipoard");
                }
            }
        }
        __decorate([
            $mol_mem
        ], $mol_button_copy.prototype, "html", null);
        __decorate([
            $mol_mem
        ], $mol_button_copy.prototype, "attachments", null);
        $$.$mol_button_copy = $mol_button_copy;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_text_code) = class $mol_text_code extends ($.$mol_stack) {
		sidebar_showed(){
			return false;
		}
		render_visible_only(){
			return false;
		}
		row_numb(id){
			return 0;
		}
		row_text(id){
			return "";
		}
		syntax(){
			return null;
		}
		uri_resolve(id){
			return "";
		}
		highlight(){
			return "";
		}
		Row(id){
			const obj = new this.$.$mol_text_code_line();
			(obj.numb_showed) = () => ((this.sidebar_showed()));
			(obj.numb) = () => ((this.row_numb(id)));
			(obj.text) = () => ((this.row_text(id)));
			(obj.syntax) = () => ((this.syntax()));
			(obj.uri_resolve) = (id) => ((this.uri_resolve(id)));
			(obj.highlight) = () => ((this.highlight()));
			return obj;
		}
		rows(){
			return [(this.Row("0"))];
		}
		Rows(){
			const obj = new this.$.$mol_list();
			(obj.render_visible_only) = () => ((this.render_visible_only()));
			(obj.rows) = () => ((this.rows()));
			return obj;
		}
		text_export(){
			return "";
		}
		Copy(){
			const obj = new this.$.$mol_button_copy();
			(obj.hint) = () => ((this.$.$mol_locale.text("$mol_text_code_Copy_hint")));
			(obj.text) = () => ((this.text_export()));
			return obj;
		}
		attr(){
			return {...(super.attr()), "mol_text_code_sidebar_showed": (this.sidebar_showed())};
		}
		text(){
			return "";
		}
		text_lines(){
			return [];
		}
		find_pos(id){
			return null;
		}
		uri_base(){
			return "";
		}
		sub(){
			return [(this.Rows()), (this.Copy())];
		}
	};
	($mol_mem_key(($.$mol_text_code.prototype), "Row"));
	($mol_mem(($.$mol_text_code.prototype), "Rows"));
	($mol_mem(($.$mol_text_code.prototype), "Copy"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_text_code extends $.$mol_text_code {
            render_visible_only() {
                return this.$.$mol_support_css_overflow_anchor();
            }
            text_lines() {
                return (this.text() ?? '').split('\n');
            }
            rows() {
                return this.text_lines().map((_, index) => this.Row(index + 1));
            }
            row_text(index) {
                return this.text_lines()[index - 1];
            }
            row_numb(index) {
                return index;
            }
            find_pos(offset) {
                for (const [index, line] of this.text_lines().entries()) {
                    if (line.length >= offset) {
                        return this.Row(index + 1).find_pos(offset);
                    }
                    else {
                        offset -= line.length + 1;
                    }
                }
                return null;
            }
            sub() {
                return [
                    this.Rows(),
                    ...this.sidebar_showed() ? [this.Copy()] : []
                ];
            }
            syntax() {
                return this.$.$mol_syntax2_md_code;
            }
            uri_base() {
                return $mol_dom_context.document.location.href;
            }
            uri_resolve(uri) {
                if (/^(\w+script+:)+/.test(uri))
                    return null;
                try {
                    const url = new URL(uri, this.uri_base());
                    return url.toString();
                }
                catch (error) {
                    $mol_fail_log(error);
                    return null;
                }
            }
            text_export() {
                return this.text() + '\n';
            }
        }
        __decorate([
            $mol_mem
        ], $mol_text_code.prototype, "text_lines", null);
        __decorate([
            $mol_mem
        ], $mol_text_code.prototype, "rows", null);
        __decorate([
            $mol_mem_key
        ], $mol_text_code.prototype, "row_text", null);
        __decorate([
            $mol_mem_key
        ], $mol_text_code.prototype, "find_pos", null);
        __decorate([
            $mol_mem
        ], $mol_text_code.prototype, "sub", null);
        __decorate([
            $mol_mem_key
        ], $mol_text_code.prototype, "uri_resolve", null);
        $$.$mol_text_code = $mol_text_code;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        const { rem, px } = $mol_style_unit;
        $mol_style_define($mol_text_code, {
            whiteSpace: 'pre-wrap',
            font: {
                family: 'monospace',
            },
            Rows: {
                padding: $mol_gap.text,
            },
            Row: {
                font: {
                    family: 'inherit',
                },
            },
            Copy: {
                alignSelf: 'flex-start',
                justifySelf: 'flex-start',
            },
            '@': {
                'mol_text_code_sidebar_showed': {
                    true: {
                        $mol_text_code_line: {
                            margin: {
                                left: rem(1.75),
                            },
                        },
                    },
                },
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_float) = class $mol_float extends ($.$mol_view) {
		style(){
			return {...(super.style()), "minHeight": "auto"};
		}
	};


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/float/float.view.css", "[mol_float] {\n\tposition: sticky;\n\ttop: 0;\n\tleft: 0;\n\tz-index: var(--mol_layer_float);\n\topacity: 1;\n\ttransition: opacity .25s ease-in;\n\tdisplay: block;\n\tbackground: linear-gradient( var(--mol_theme_card), var(--mol_theme_card) ), var(--mol_theme_back);\n\tbox-shadow: 0 0 .5rem hsla(0,0%,0%,.25);\n}\n\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_icon_chevron) = class $mol_icon_chevron extends ($.$mol_icon) {
		path(){
			return "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z";
		}
	};


;
"use strict";

;
	($.$mol_check_expand) = class $mol_check_expand extends ($.$mol_check) {
		level_style(){
			return "0px";
		}
		expanded(next){
			if(next !== undefined) return next;
			return false;
		}
		expandable(){
			return false;
		}
		Icon(){
			const obj = new this.$.$mol_icon_chevron();
			return obj;
		}
		level(){
			return 0;
		}
		style(){
			return {...(super.style()), "paddingLeft": (this.level_style())};
		}
		checked(next){
			return (this.expanded(next));
		}
		enabled(){
			return (this.expandable());
		}
	};
	($mol_mem(($.$mol_check_expand.prototype), "expanded"));
	($mol_mem(($.$mol_check_expand.prototype), "Icon"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_check_expand extends $.$mol_check_expand {
            level_style() {
                return `${this.level() * 1 - 1}rem`;
            }
            expandable() {
                return this.expanded() !== null;
            }
        }
        $$.$mol_check_expand = $mol_check_expand;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/check/expand/expand.view.css", "[mol_check_expand] {\n\tmin-width: 20px;\n}\n\n:where([mol_check_expand][disabled]) [mol_check_expand_icon] {\n\tvisibility: hidden;\n}\n\n[mol_check_expand_icon] {\n\tbox-shadow: none;\n\tmargin-left: -0.375rem;\n}\n[mol_check_expand_icon] {\n\ttransform: rotateZ(0deg);\n}\n\n:where([mol_check_checked]) [mol_check_expand_icon] {\n\ttransform: rotateZ(90deg);\n}\n\n[mol_check_expand_icon] {\n\tvertical-align: text-top;\n}\n\n[mol_check_expand_label] {\n\tmargin-left: 0;\n}\n");
})($ || ($ = {}));

;
	($.$mol_grid) = class $mol_grid extends ($.$mol_view) {
		rows(){
			return [];
		}
		Table(){
			const obj = new this.$.$mol_grid_table();
			(obj.sub) = () => ((this.rows()));
			return obj;
		}
		head_cells(){
			return [];
		}
		cells(id){
			return [];
		}
		cell_content(id){
			return [];
		}
		cell_content_text(id){
			return (this.cell_content(id));
		}
		cell_content_number(id){
			return (this.cell_content(id));
		}
		col_head_content(id){
			return [];
		}
		cell_level(id){
			return 0;
		}
		cell_expanded(id, next){
			if(next !== undefined) return next;
			return false;
		}
		needle(){
			return "";
		}
		cell_value(id){
			return "";
		}
		Cell_dimmer(id){
			const obj = new this.$.$mol_dimmer();
			(obj.needle) = () => ((this.needle()));
			(obj.haystack) = () => ((this.cell_value(id)));
			return obj;
		}
		row_height(){
			return 32;
		}
		row_ids(){
			return [];
		}
		row_id(id){
			return null;
		}
		col_ids(){
			return [];
		}
		records(){
			return {};
		}
		record(id){
			return null;
		}
		hierarchy(){
			return null;
		}
		hierarchy_col(){
			return "";
		}
		minimal_width(){
			return 0;
		}
		sub(){
			return [(this.Head()), (this.Table())];
		}
		Head(){
			const obj = new this.$.$mol_grid_row();
			(obj.cells) = () => ((this.head_cells()));
			return obj;
		}
		Row(id){
			const obj = new this.$.$mol_grid_row();
			(obj.minimal_height) = () => ((this.row_height()));
			(obj.minimal_width) = () => ((this.minimal_width()));
			(obj.cells) = () => ((this.cells(id)));
			return obj;
		}
		Cell(id){
			const obj = new this.$.$mol_view();
			return obj;
		}
		cell(id){
			return null;
		}
		Cell_text(id){
			const obj = new this.$.$mol_grid_cell();
			(obj.sub) = () => ((this.cell_content_text(id)));
			return obj;
		}
		Cell_number(id){
			const obj = new this.$.$mol_grid_number();
			(obj.sub) = () => ((this.cell_content_number(id)));
			return obj;
		}
		Col_head(id){
			const obj = new this.$.$mol_float();
			(obj.dom_name) = () => ("th");
			(obj.sub) = () => ((this.col_head_content(id)));
			return obj;
		}
		Cell_branch(id){
			const obj = new this.$.$mol_check_expand();
			(obj.level) = () => ((this.cell_level(id)));
			(obj.label) = () => ((this.cell_content(id)));
			(obj.expanded) = (next) => ((this.cell_expanded(id, next)));
			return obj;
		}
		Cell_content(id){
			return [(this.Cell_dimmer(id))];
		}
	};
	($mol_mem(($.$mol_grid.prototype), "Table"));
	($mol_mem_key(($.$mol_grid.prototype), "cell_expanded"));
	($mol_mem_key(($.$mol_grid.prototype), "Cell_dimmer"));
	($mol_mem(($.$mol_grid.prototype), "Head"));
	($mol_mem_key(($.$mol_grid.prototype), "Row"));
	($mol_mem_key(($.$mol_grid.prototype), "Cell"));
	($mol_mem_key(($.$mol_grid.prototype), "Cell_text"));
	($mol_mem_key(($.$mol_grid.prototype), "Cell_number"));
	($mol_mem_key(($.$mol_grid.prototype), "Col_head"));
	($mol_mem_key(($.$mol_grid.prototype), "Cell_branch"));
	($.$mol_grid_table) = class $mol_grid_table extends ($.$mol_list) {};
	($.$mol_grid_row) = class $mol_grid_row extends ($.$mol_view) {
		cells(){
			return [];
		}
		sub(){
			return (this.cells());
		}
	};
	($.$mol_grid_cell) = class $mol_grid_cell extends ($.$mol_view) {
		minimal_height(){
			return 40;
		}
	};
	($.$mol_grid_number) = class $mol_grid_number extends ($.$mol_grid_cell) {};


;
"use strict";
var $;
(function ($) {
    class $mol_state_session extends $mol_object {
        static 'native()';
        static native() {
            if (this['native()'])
                return this['native()'];
            check: try {
                const native = $mol_dom_context.sessionStorage;
                if (!native)
                    break check;
                native.setItem('', '');
                native.removeItem('');
                return this['native()'] = native;
            }
            catch (error) {
                console.warn(error);
            }
            return this['native()'] = {
                getItem(key) {
                    return this[':' + key];
                },
                setItem(key, value) {
                    this[':' + key] = value;
                },
                removeItem(key) {
                    this[':' + key] = void 0;
                }
            };
        }
        static value(key, next) {
            if (next === void 0)
                return JSON.parse(this.native().getItem(key) || 'null');
            if (next === null)
                this.native().removeItem(key);
            else
                this.native().setItem(key, JSON.stringify(next));
            return next;
        }
        prefix() { return ''; }
        value(key, next) {
            return $mol_state_session.value(this.prefix() + '.' + key, next);
        }
    }
    __decorate([
        $mol_mem_key
    ], $mol_state_session, "value", null);
    $.$mol_state_session = $mol_state_session;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_grid extends $.$mol_grid {
            head_cells() {
                return this.col_ids().map(colId => this.Col_head(colId));
            }
            col_head_content(colId) {
                return [colId];
            }
            rows() {
                return this.row_ids().map(id => this.Row(id));
            }
            cells(row_id) {
                return this.col_ids().map(col_id => this.Cell({ row: row_id, col: col_id }));
            }
            col_type(col_id) {
                if (col_id === this.hierarchy_col())
                    return 'branch';
                const rowFirst = this.row_id(0);
                const val = this.record(rowFirst[rowFirst.length - 1])[col_id];
                if (typeof val === 'number')
                    return 'number';
                return 'text';
            }
            Cell(id) {
                switch (this.col_type(id.col).valueOf()) {
                    case 'branch': return this.Cell_branch(id);
                    case 'number': return this.Cell_number(id);
                }
                return this.Cell_text(id);
            }
            cell_content(id) {
                return [this.record(id.row[id.row.length - 1])[id.col]];
            }
            cell_content_text(id) {
                return this.cell_content(id).map(val => typeof val === 'object' ? JSON.stringify(val) : val);
            }
            records() {
                return [];
            }
            record(id) {
                return this.records()[id];
            }
            record_ids() {
                return Object.keys(this.records());
            }
            row_id(index) {
                return this.row_ids().slice(index, index + 1).valueOf()[0];
            }
            col_ids() {
                const rowFirst = this.row_id(0);
                if (rowFirst === void 0)
                    return [];
                const record = this.record(rowFirst[rowFirst.length - 1]);
                if (!record)
                    return [];
                return Object.keys(record);
            }
            hierarchy() {
                const hierarchy = {};
                const root = hierarchy[''] = {
                    id: '',
                    parent: null,
                    sub: [],
                };
                this.record_ids().map(id => {
                    root.sub.push(hierarchy[id] = {
                        id,
                        parent: root,
                        sub: [],
                    });
                });
                return hierarchy;
            }
            row_sub_ids(row) {
                return this.hierarchy()[row[row.length - 1]].sub.map(child => row.concat(child.id));
            }
            row_root_id() {
                return [''];
            }
            cell_level(id) {
                return id.row.length - 1;
            }
            row_ids() {
                const next = [];
                const add = (row) => {
                    next.push(row);
                    if (this.row_expanded(row)) {
                        this.row_sub_ids(row).forEach(child => add(child));
                    }
                };
                this.row_sub_ids(this.row_root_id()).forEach(child => add(child));
                return next;
            }
            row_expanded(row_id, next) {
                if (!this.row_sub_ids(row_id).length)
                    return null;
                const key = `row_expanded(${JSON.stringify(row_id)})`;
                const next2 = $mol_state_session.value(key, next);
                return (next2 == null) ? this.row_expanded_default(row_id) : next2;
            }
            row_expanded_default(row_id) {
                return true;
            }
            cell_expanded(id, next) {
                return this.row_expanded(id.row, next);
            }
        }
        __decorate([
            $mol_mem
        ], $mol_grid.prototype, "head_cells", null);
        __decorate([
            $mol_mem
        ], $mol_grid.prototype, "rows", null);
        __decorate([
            $mol_mem_key
        ], $mol_grid.prototype, "col_type", null);
        __decorate([
            $mol_mem
        ], $mol_grid.prototype, "record_ids", null);
        __decorate([
            $mol_mem
        ], $mol_grid.prototype, "hierarchy", null);
        __decorate([
            $mol_mem
        ], $mol_grid.prototype, "row_ids", null);
        $$.$mol_grid = $mol_grid;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/grid/grid.view.css", "[mol_grid] {\n\tdisplay: block;\n\tflex: 0 1 auto;\n\tposition: relative;\n\toverflow-x: auto;\n}\n\n[mol_grid_gap] {\n\tposition: absolute;\n\tpadding: .1px;\n\ttop: 0;\n\ttransform: translateZ(0);\n}\n\n[mol_grid_table] {\n\tborder-spacing: 0;\n\tdisplay: table-row-group;\n\tposition: relative;\n}\n\n[mol_grid_table] > * {\n\tdisplay: table-row;\n\ttransition: none;\n}\n\n[mol_grid_head] > *,\n[mol_grid_table] > * > * {\n\tdisplay: table-cell;\n\tpadding: var(--mol_gap_text);\n\twhite-space: nowrap;\n\tvertical-align: middle;\n\tbox-shadow: inset 2px 2px 0 -1px var(--mol_theme_line);\n}\n\n[mol_grid_row]:where(:first-child) > * {\n\tbox-shadow: inset 2px 0 0 -1px var(--mol_theme_line);\n}\n\n[mol_grid_table] > * > *:where(:first-child) {\n\tbox-shadow: inset 0px 2px 0 -1px var(--mol_theme_line);\n}\n\n[mol_grid_head] > * {\n\tbox-shadow: inset 2px -2px 0 -1px var(--mol_theme_line);\n}\n\n[mol_grid_head] > *:where(:first-child) {\n\tbox-shadow: inset 0px -2px 0 -1px var(--mol_theme_line);\n}\n\n[mol_grid_table] > [mol_grid_row]:where(:first-child) > *:where(:first-child) {\n\tbox-shadow: none;\n}\t\n\n[mol_grid_head] {\n\tdisplay: table-row;\n\ttransform: none !important;\n}\n\n/* [mol_grid_cell_number] {\n\ttext-align: right;\n} */\n\n[mol_grid_col_head] {\n\tfont-weight: inherit;\n\ttext-align: inherit;\n\tdisplay: table-cell;\n\tcolor: var(--mol_theme_shade);\n}\n\n[mol_grid_cell_dimmer] {\n\tdisplay: inline-block;\n\tvertical-align: inherit;\n}\n");
})($ || ($ = {}));

;
	($.$mol_link_iconed) = class $mol_link_iconed extends ($.$mol_link) {
		icon(){
			return "";
		}
		Icon(){
			const obj = new this.$.$mol_image();
			(obj.uri) = () => ((this.icon()));
			(obj.title) = () => ("");
			return obj;
		}
		title(){
			return (this.uri());
		}
		sub(){
			return [(this.Icon())];
		}
		content(){
			return [(this.title())];
		}
		host(){
			return "";
		}
	};
	($mol_mem(($.$mol_link_iconed.prototype), "Icon"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_link_iconed extends $.$mol_link_iconed {
            icon() {
                return `https://favicon.yandex.net/favicon/${this.host()}?color=0,0,0,0&size=32&stub=1`;
            }
            host() {
                const base = this.$.$mol_state_arg.href();
                const url = new URL(this.uri(), base);
                return url.hostname;
            }
            title() {
                const uri = this.uri();
                const host = this.host();
                const suffix = (host ? uri.split(this.host(), 2)[1] : uri)?.replace(/^[\/\?#!]+/, '');
                return decodeURIComponent(suffix || host).replace(/^\//, ' ');
            }
            sub() {
                return [
                    ...this.host() ? [this.Icon()] : [],
                    ...this.content() ? [' ', ...this.content()] : [],
                ];
            }
        }
        __decorate([
            $mol_mem
        ], $mol_link_iconed.prototype, "icon", null);
        __decorate([
            $mol_mem
        ], $mol_link_iconed.prototype, "host", null);
        __decorate([
            $mol_mem
        ], $mol_link_iconed.prototype, "title", null);
        __decorate([
            $mol_mem
        ], $mol_link_iconed.prototype, "sub", null);
        $$.$mol_link_iconed = $mol_link_iconed;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/link/iconed/iconed.view.css", "[mol_link_iconed] {\n\talign-items: baseline;\n\tdisplay: inline-flex;\n\tpadding: var(--mol_gap_text);\n}\n\n[mol_link_iconed_icon] {\n\tbox-shadow: none;\n\theight: 1.5em;\n\twidth: 1em;\n\tflex: 0 0 auto;\n\tdisplay: inline-block;\n\talign-self: normal;\n\tvertical-align: top;\n\tborder-radius: 0;\n\tobject-fit: scale-down;\n\topacity: .75;\n}\n\n[mol_theme=\"$mol_theme_dark\"] [mol_link_iconed_icon] {\n\tfilter: var(--mol_theme_image);\n}\n");
})($ || ($ = {}));

;
	($.$mol_embed_native) = class $mol_embed_native extends ($.$mol_scroll) {
		mime(){
			return "";
		}
		title(){
			return "";
		}
		Fallback(){
			const obj = new this.$.$mol_link();
			(obj.uri) = () => ((this.uri()));
			(obj.sub) = () => ([(this.title())]);
			return obj;
		}
		uri_change(next){
			if(next !== undefined) return next;
			return null;
		}
		uri(next){
			if(next !== undefined) return next;
			return "";
		}
		dom_name(){
			return "object";
		}
		window(){
			return null;
		}
		attr(){
			return {
				...(super.attr()), 
				"data": (this.uri()), 
				"type": (this.mime())
			};
		}
		sub(){
			return [(this.Fallback())];
		}
		message(){
			return {"hashchange": (next) => (this.uri_change(next))};
		}
	};
	($mol_mem(($.$mol_embed_native.prototype), "Fallback"));
	($mol_mem(($.$mol_embed_native.prototype), "uri_change"));
	($mol_mem(($.$mol_embed_native.prototype), "uri"));


;
"use strict";
var $;
(function ($) {
    function $mol_promise() {
        let done;
        let fail;
        const promise = new Promise((d, f) => {
            done = d;
            fail = f;
        });
        return Object.assign(promise, {
            done,
            fail,
        });
    }
    $.$mol_promise = $mol_promise;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_wait_timeout_async(timeout) {
        const promise = $mol_promise();
        const task = new this.$mol_after_timeout(timeout, () => promise.done());
        return Object.assign(promise, {
            destructor: () => task.destructor()
        });
    }
    $.$mol_wait_timeout_async = $mol_wait_timeout_async;
    function $mol_wait_timeout(timeout) {
        return this.$mol_wire_sync(this).$mol_wait_timeout_async(timeout);
    }
    $.$mol_wait_timeout = $mol_wait_timeout;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_embed_native extends $.$mol_embed_native {
            window() {
                $mol_wire_solid();
                return $mol_wire_sync(this).load(this.dom_node_actual());
            }
            load(frame) {
                return new Promise((done, fail) => {
                    frame.onload = () => {
                        try {
                            if (frame.contentWindow.location.href === 'about:blank') {
                                return;
                            }
                        }
                        catch { }
                        done(frame.contentWindow);
                    };
                    frame.onerror = (event) => {
                        fail(typeof event === 'string' ? new Error(event) : event.error || event);
                    };
                });
            }
            uri_resource() {
                return this.uri().replace(/#.*/, '');
            }
            message_listener() {
                return new $mol_dom_listener($mol_dom_context, 'message', $mol_wire_async(this).message_receive);
            }
            message_receive(event) {
                if (!event)
                    return;
                if (event.source !== this.window())
                    return;
                if (!Array.isArray(event.data))
                    return;
                this.message()[event.data[0]]?.(event);
            }
            uri_change(event) {
                this.$.$mol_wait_timeout(1000);
                this.uri(event.data[1]);
            }
            auto() {
                return [
                    this.message_listener(),
                    this.window(),
                ];
            }
        }
        __decorate([
            $mol_mem
        ], $mol_embed_native.prototype, "window", null);
        __decorate([
            $mol_mem
        ], $mol_embed_native.prototype, "uri_resource", null);
        __decorate([
            $mol_mem
        ], $mol_embed_native.prototype, "message_listener", null);
        $$.$mol_embed_native = $mol_embed_native;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/embed/native/native.view.css", "[mol_embed_native] {\n\tmax-width: 100%;\n\tmax-height: 100vh;\n\tobject-fit: cover;\n\tdisplay: flex;\n\tflex: 1 1 auto;\n\tobject-position: top left;\n\tborder-radius: var(--mol_gap_round);\n\taspect-ratio: 4/3;\n}\n");
})($ || ($ = {}));

;
	($.$mol_icon_youtube) = class $mol_icon_youtube extends ($.$mol_icon) {
		path(){
			return "M10,15L15.19,12L10,9V15M21.56,7.17C21.69,7.64 21.78,8.27 21.84,9.07C21.91,9.87 21.94,10.56 21.94,11.16L22,12C22,14.19 21.84,15.8 21.56,16.83C21.31,17.73 20.73,18.31 19.83,18.56C19.36,18.69 18.5,18.78 17.18,18.84C15.88,18.91 14.69,18.94 13.59,18.94L12,19C7.81,19 5.2,18.84 4.17,18.56C3.27,18.31 2.69,17.73 2.44,16.83C2.31,16.36 2.22,15.73 2.16,14.93C2.09,14.13 2.06,13.44 2.06,12.84L2,12C2,9.81 2.16,8.2 2.44,7.17C2.69,6.27 3.27,5.69 4.17,5.44C4.64,5.31 5.5,5.22 6.82,5.16C8.12,5.09 9.31,5.06 10.41,5.06L12,5C16.19,5 18.8,5.16 19.83,5.44C20.73,5.69 21.31,6.27 21.56,7.17Z";
		}
	};


;
"use strict";

;
	($.$mol_frame) = class $mol_frame extends ($.$mol_embed_native) {
		allow(){
			return "";
		}
		uri(next){
			if(next !== undefined) return next;
			return "about:config";
		}
		html(){
			return null;
		}
		dom_name(){
			return "iframe";
		}
		attr(){
			return {
				...(super.attr()), 
				"data": null, 
				"type": null, 
				"allow": (this.allow()), 
				"src": (this.uri()), 
				"srcdoc": (this.html())
			};
		}
		fullscreen(){
			return true;
		}
		accelerometer(){
			return true;
		}
		autoplay(){
			return true;
		}
		encription(){
			return true;
		}
		gyroscope(){
			return true;
		}
		pip(){
			return true;
		}
		clipboard_read(){
			return true;
		}
		clipboard_write(){
			return true;
		}
	};
	($mol_mem(($.$mol_frame.prototype), "uri"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_frame extends $.$mol_frame {
            window() {
                return super.window();
            }
            allow() {
                return [
                    ...this.fullscreen() ? ['fullscreen'] : [],
                    ...this.accelerometer() ? ['accelerometer'] : [],
                    ...this.autoplay() ? ['autoplay'] : [],
                    ...this.encription() ? ['encrypted-media'] : [],
                    ...this.gyroscope() ? ['gyroscope'] : [],
                    ...this.pip() ? ['picture-in-picture'] : [],
                    ...this.clipboard_read() ? [`clipboard-read ${this.uri()}`] : [],
                    ...this.clipboard_write() ? [`clipboard-write ${this.uri()}`] : [],
                ].join('; ');
            }
        }
        $$.$mol_frame = $mol_frame;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_define($mol_frame, {
        border: {
            style: 'none',
        },
        maxHeight: $mol_style_unit.vh(100),
    });
})($ || ($ = {}));

;
	($.$mol_embed_service) = class $mol_embed_service extends ($.$mol_check) {
		active(next){
			if(next !== undefined) return next;
			return false;
		}
		title(){
			return "";
		}
		video_preview(){
			return "";
		}
		Image(){
			const obj = new this.$.$mol_image();
			(obj.title) = () => ((this.title()));
			(obj.uri) = () => ((this.video_preview()));
			return obj;
		}
		Hint(){
			const obj = new this.$.$mol_icon_youtube();
			return obj;
		}
		video_embed(){
			return "";
		}
		Frame(){
			const obj = new this.$.$mol_frame();
			(obj.title) = () => ((this.title()));
			(obj.uri) = () => ((this.video_embed()));
			return obj;
		}
		uri(){
			return "";
		}
		video_id(){
			return "";
		}
		checked(next){
			return (this.active(next));
		}
		sub(){
			return [
				(this.Image()), 
				(this.Hint()), 
				(this.Frame())
			];
		}
	};
	($mol_mem(($.$mol_embed_service.prototype), "active"));
	($mol_mem(($.$mol_embed_service.prototype), "Image"));
	($mol_mem(($.$mol_embed_service.prototype), "Hint"));
	($mol_mem(($.$mol_embed_service.prototype), "Frame"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_embed_service extends $.$mol_embed_service {
            sub() {
                return this.active()
                    ? [this.Frame()]
                    : [this.Image(), this.Hint()];
            }
        }
        __decorate([
            $mol_mem
        ], $mol_embed_service.prototype, "sub", null);
        $$.$mol_embed_service = $mol_embed_service;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/embed/service/service.view.css", "[mol_embed_service] {\n\tpadding: 0;\n\tmax-width: 100%;\n}\n\n[mol_embed_service_image] {\n\tflex: auto 1 1;\n\twidth: 100vw;\n}\n\n[mol_embed_service_frame] {\n\twidth: 100vw;\n}\n\n[mol_embed_service_hint] {\n\tposition: absolute;\n    left: 50%;\n    top: 50%;\n    width: 50%;\n    height: 50%;\n    opacity: 0.3;\n    transform: translate(-50%, -50%);\n}\n\n[mol_embed_service]:hover [mol_embed_service_hint] {\n\topacity: .6;\n}\n");
})($ || ($ = {}));

;
	($.$mol_embed_youtube) = class $mol_embed_youtube extends ($.$mol_embed_service) {};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_embed_youtube extends $.$mol_embed_youtube {
            video_embed() {
                return `https://www.youtube.com/embed/${encodeURIComponent(this.video_id())}?autoplay=1&loop=1`;
            }
            video_id() {
                return this.uri().match(/^https\:\/\/www\.youtube\.com\/(?:embed\/|shorts\/|watch\?v=)([^\/&?#]+)/)?.[1]
                    ?? this.uri().match(/^https\:\/\/youtu\.be\/([^\/&?#]+)/)?.[1]
                    ?? 'about:blank';
            }
            video_preview() {
                return `https://i.ytimg.com/vi/${this.video_id()}/sddefault.jpg`;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_embed_youtube.prototype, "video_embed", null);
        __decorate([
            $mol_mem
        ], $mol_embed_youtube.prototype, "video_id", null);
        __decorate([
            $mol_mem
        ], $mol_embed_youtube.prototype, "video_preview", null);
        $$.$mol_embed_youtube = $mol_embed_youtube;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_embed_rutube) = class $mol_embed_rutube extends ($.$mol_embed_service) {};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_embed_rutube extends $.$mol_embed_rutube {
            video_embed() {
                return `https://rutube.ru/play/embed/${encodeURIComponent(this.video_id())}`;
            }
            video_id() {
                return this.uri().match(/^https:\/\/rutube.ru\/video\/([^\/&?#]+)/)?.[1] ?? 'about:blank';
            }
            video_preview() {
                return `https://rutube.ru/api/video/${this.video_id()}/thumbnail/?redirect=1`;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_embed_rutube.prototype, "video_embed", null);
        __decorate([
            $mol_mem
        ], $mol_embed_rutube.prototype, "video_id", null);
        __decorate([
            $mol_mem
        ], $mol_embed_rutube.prototype, "video_preview", null);
        $$.$mol_embed_rutube = $mol_embed_rutube;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_embed_any) = class $mol_embed_any extends ($.$mol_view) {
		title(){
			return "";
		}
		uri(){
			return "";
		}
		Image(){
			const obj = new this.$.$mol_image();
			(obj.title) = () => ((this.title()));
			(obj.uri) = () => ((this.uri()));
			return obj;
		}
		Object(){
			const obj = new this.$.$mol_embed_native();
			(obj.title) = () => ((this.title()));
			(obj.uri) = () => ((this.uri()));
			return obj;
		}
		Youtube(){
			const obj = new this.$.$mol_embed_youtube();
			(obj.title) = () => ((this.title()));
			(obj.uri) = () => ((this.uri()));
			return obj;
		}
		Rutube(){
			const obj = new this.$.$mol_embed_rutube();
			(obj.title) = () => ((this.title()));
			(obj.uri) = () => ((this.uri()));
			return obj;
		}
	};
	($mol_mem(($.$mol_embed_any.prototype), "Image"));
	($mol_mem(($.$mol_embed_any.prototype), "Object"));
	($mol_mem(($.$mol_embed_any.prototype), "Youtube"));
	($mol_mem(($.$mol_embed_any.prototype), "Rutube"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_embed_any extends $.$mol_embed_any {
            type() {
                try {
                    const uri = this.uri();
                    if (/\b(png|gif|jpg|jpeg|jfif|webp|svg)\b/.test(uri))
                        return 'image';
                    if (/^https:\/\/www\.youtube\.com\//.test(uri))
                        return 'youtube';
                    if (/^https:\/\/youtu\.be\//.test(uri))
                        return 'youtube';
                    if (/^https:\/\/rutube\.ru\//.test(uri))
                        return 'rutube';
                }
                catch (error) {
                    $mol_fail_log(error);
                    return 'image';
                }
                return 'object';
            }
            sub() {
                switch (this.type()) {
                    case 'image': return [this.Image()];
                    case 'youtube': return [this.Youtube()];
                    case 'rutube': return [this.Rutube()];
                    default: return [this.Object()];
                }
            }
        }
        __decorate([
            $mol_mem
        ], $mol_embed_any.prototype, "type", null);
        __decorate([
            $mol_mem
        ], $mol_embed_any.prototype, "sub", null);
        $$.$mol_embed_any = $mol_embed_any;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_expander) = class $mol_expander extends ($.$mol_list) {
		expanded(next){
			if(next !== undefined) return next;
			return false;
		}
		expandable(){
			return true;
		}
		label(){
			return [(this.title())];
		}
		Trigger(){
			const obj = new this.$.$mol_check_expand();
			(obj.checked) = (next) => ((this.expanded(next)));
			(obj.expandable) = () => ((this.expandable()));
			(obj.label) = () => ((this.label()));
			return obj;
		}
		Tools(){
			return null;
		}
		Label(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Trigger()), (this.Tools())]);
			return obj;
		}
		content(){
			return [];
		}
		Content(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ((this.content()));
			return obj;
		}
		rows(){
			return [(this.Label()), (this.Content())];
		}
	};
	($mol_mem(($.$mol_expander.prototype), "expanded"));
	($mol_mem(($.$mol_expander.prototype), "Trigger"));
	($mol_mem(($.$mol_expander.prototype), "Label"));
	($mol_mem(($.$mol_expander.prototype), "Content"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_expander extends $.$mol_expander {
            rows() {
                return [
                    this.Label(),
                    ...this.expanded() ? [this.Content()] : []
                ];
            }
            expandable() {
                return this.content().length > 0;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_expander.prototype, "rows", null);
        $$.$mol_expander = $mol_expander;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/expander/expander.view.css", "[mol_expander] {\n\tflex-direction: column;\n}\n\n[mol_expander_label] {\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tborder-radius: var(--mol_gap_round);\n}\n\n[mol_expander_trigger] {\n\tflex: auto;\n\tposition: relative;\n}\n");
})($ || ($ = {}));

;
	($.$mol_text) = class $mol_text extends ($.$mol_list) {
		auto_scroll(){
			return null;
		}
		block_content(id){
			return [];
		}
		uri_resolve(id){
			return "";
		}
		quote_text(id){
			return "";
		}
		highlight(){
			return "";
		}
		list_type(id){
			return "-";
		}
		list_text(id){
			return "";
		}
		header_level(id){
			return 1;
		}
		header_arg(id){
			return {};
		}
		pre_text(id){
			return "";
		}
		code_sidebar_showed(){
			return true;
		}
		pre_sidebar_showed(){
			return (this.code_sidebar_showed());
		}
		table_head_cells(id){
			return [];
		}
		table_rows(id){
			return [];
		}
		table_cells(id){
			return [];
		}
		table_cell_text(id){
			return "";
		}
		grid_rows(id){
			return [];
		}
		grid_cells(id){
			return [];
		}
		grid_cell_text(id){
			return "";
		}
		line_text(id){
			return "";
		}
		line_type(id){
			return "";
		}
		line_content(id){
			return [];
		}
		code_syntax(){
			return null;
		}
		link_uri(id){
			return "";
		}
		link_host(id){
			return "";
		}
		spoiler_label(id){
			return "";
		}
		Spoiler_label(id){
			const obj = new this.$.$mol_text();
			(obj.text) = () => ((this.spoiler_label(id)));
			return obj;
		}
		spoiler_content(id){
			return "";
		}
		Spoiler_content(id){
			const obj = new this.$.$mol_text();
			(obj.text) = () => ((this.spoiler_content(id)));
			return obj;
		}
		uri_base(){
			return "";
		}
		text(){
			return "";
		}
		param(){
			return "";
		}
		flow_tokens(){
			return [];
		}
		block_text(id){
			return "";
		}
		auto(){
			return [(this.auto_scroll())];
		}
		Paragraph(id){
			const obj = new this.$.$mol_paragraph();
			(obj.sub) = () => ((this.block_content(id)));
			return obj;
		}
		Quote(id){
			const obj = new this.$.$mol_text();
			(obj.uri_resolve) = (id) => ((this.uri_resolve(id)));
			(obj.text) = () => ((this.quote_text(id)));
			(obj.highlight) = () => ((this.highlight()));
			(obj.auto_scroll) = () => (null);
			return obj;
		}
		List(id){
			const obj = new this.$.$mol_text_list();
			(obj.uri_resolve) = (id) => ((this.uri_resolve(id)));
			(obj.type) = () => ((this.list_type(id)));
			(obj.text) = () => ((this.list_text(id)));
			(obj.highlight) = () => ((this.highlight()));
			return obj;
		}
		item_index(id){
			return 0;
		}
		Header(id){
			const obj = new this.$.$mol_text_header();
			(obj.minimal_height) = () => (40);
			(obj.level) = () => ((this.header_level(id)));
			(obj.content) = () => ((this.block_content(id)));
			(obj.arg) = () => ((this.header_arg(id)));
			return obj;
		}
		Pre(id){
			const obj = new this.$.$mol_text_code();
			(obj.text) = () => ((this.pre_text(id)));
			(obj.highlight) = () => ((this.highlight()));
			(obj.uri_resolve) = (id) => ((this.uri_resolve(id)));
			(obj.sidebar_showed) = () => ((this.pre_sidebar_showed()));
			return obj;
		}
		Cut(id){
			const obj = new this.$.$mol_view();
			(obj.dom_name) = () => ("hr");
			return obj;
		}
		Table(id){
			const obj = new this.$.$mol_grid();
			(obj.head_cells) = () => ((this.table_head_cells(id)));
			(obj.rows) = () => ((this.table_rows(id)));
			return obj;
		}
		Table_row(id){
			const obj = new this.$.$mol_grid_row();
			(obj.cells) = () => ((this.table_cells(id)));
			return obj;
		}
		Table_cell(id){
			const obj = new this.$.$mol_text();
			(obj.auto_scroll) = () => (null);
			(obj.highlight) = () => ((this.highlight()));
			(obj.uri_resolve) = (id) => ((this.uri_resolve(id)));
			(obj.text) = () => ((this.table_cell_text(id)));
			return obj;
		}
		Grid(id){
			const obj = new this.$.$mol_grid();
			(obj.rows) = () => ((this.grid_rows(id)));
			return obj;
		}
		Grid_row(id){
			const obj = new this.$.$mol_grid_row();
			(obj.cells) = () => ((this.grid_cells(id)));
			return obj;
		}
		Grid_cell(id){
			const obj = new this.$.$mol_text();
			(obj.auto_scroll) = () => (null);
			(obj.highlight) = () => ((this.highlight()));
			(obj.uri_resolve) = (id) => ((this.uri_resolve(id)));
			(obj.text) = () => ((this.grid_cell_text(id)));
			return obj;
		}
		String(id){
			const obj = new this.$.$mol_dimmer();
			(obj.dom_name) = () => ("span");
			(obj.needle) = () => ((this.highlight()));
			(obj.haystack) = () => ((this.line_text(id)));
			return obj;
		}
		Span(id){
			const obj = new this.$.$mol_text_span();
			(obj.dom_name) = () => ("span");
			(obj.type) = () => ((this.line_type(id)));
			(obj.sub) = () => ((this.line_content(id)));
			return obj;
		}
		Code_line(id){
			const obj = new this.$.$mol_text_code_line();
			(obj.numb_showed) = () => (false);
			(obj.highlight) = () => ((this.highlight()));
			(obj.text) = () => ((this.line_text(id)));
			(obj.uri_resolve) = (id) => ((this.uri_resolve(id)));
			(obj.syntax) = () => ((this.code_syntax()));
			return obj;
		}
		Link(id){
			const obj = new this.$.$mol_link_iconed();
			(obj.uri) = () => ((this.link_uri(id)));
			(obj.content) = () => ((this.line_content(id)));
			return obj;
		}
		Link_http(id){
			const obj = new this.$.$mol_link_iconed();
			(obj.uri) = () => ((this.link_uri(id)));
			(obj.content) = () => ([(this.link_host(id))]);
			return obj;
		}
		Embed(id){
			const obj = new this.$.$mol_embed_any();
			(obj.uri) = () => ((this.link_uri(id)));
			(obj.title) = () => ((this.line_text(id)));
			return obj;
		}
		Spoiler(id){
			const obj = new this.$.$mol_expander();
			(obj.label) = () => ([(this.Spoiler_label(id))]);
			(obj.content) = () => ([(this.Spoiler_content(id))]);
			return obj;
		}
	};
	($mol_mem_key(($.$mol_text.prototype), "Spoiler_label"));
	($mol_mem_key(($.$mol_text.prototype), "Spoiler_content"));
	($mol_mem_key(($.$mol_text.prototype), "Paragraph"));
	($mol_mem_key(($.$mol_text.prototype), "Quote"));
	($mol_mem_key(($.$mol_text.prototype), "List"));
	($mol_mem_key(($.$mol_text.prototype), "Header"));
	($mol_mem_key(($.$mol_text.prototype), "Pre"));
	($mol_mem_key(($.$mol_text.prototype), "Cut"));
	($mol_mem_key(($.$mol_text.prototype), "Table"));
	($mol_mem_key(($.$mol_text.prototype), "Table_row"));
	($mol_mem_key(($.$mol_text.prototype), "Table_cell"));
	($mol_mem_key(($.$mol_text.prototype), "Grid"));
	($mol_mem_key(($.$mol_text.prototype), "Grid_row"));
	($mol_mem_key(($.$mol_text.prototype), "Grid_cell"));
	($mol_mem_key(($.$mol_text.prototype), "String"));
	($mol_mem_key(($.$mol_text.prototype), "Span"));
	($mol_mem_key(($.$mol_text.prototype), "Code_line"));
	($mol_mem_key(($.$mol_text.prototype), "Link"));
	($mol_mem_key(($.$mol_text.prototype), "Link_http"));
	($mol_mem_key(($.$mol_text.prototype), "Embed"));
	($mol_mem_key(($.$mol_text.prototype), "Spoiler"));
	($.$mol_text_header) = class $mol_text_header extends ($.$mol_paragraph) {
		arg(){
			return {};
		}
		content(){
			return [];
		}
		Link(){
			const obj = new this.$.$mol_link();
			(obj.arg) = () => ((this.arg()));
			(obj.hint) = () => ((this.$.$mol_locale.text("$mol_text_header_Link_hint")));
			(obj.sub) = () => ((this.content()));
			return obj;
		}
		level(){
			return 1;
		}
		sub(){
			return [(this.Link())];
		}
	};
	($mol_mem(($.$mol_text_header.prototype), "Link"));
	($.$mol_text_span) = class $mol_text_span extends ($.$mol_paragraph) {
		type(){
			return "";
		}
		dom_name(){
			return "span";
		}
		attr(){
			return {...(super.attr()), "mol_text_type": (this.type())};
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_text extends $.$mol_text {
            flow_tokens() {
                const tokens = [];
                this.$.$mol_syntax2_md_flow.tokenize(this.text(), (name, found, chunks) => tokens.push({ name, found, chunks }));
                return tokens;
            }
            block_type(index) {
                return this.flow_tokens()[index].name;
            }
            rows() {
                return this.flow_tokens().map(({ name }, index) => {
                    switch (name) {
                        case 'quote': return this.Quote(index);
                        case 'spoiler': return this.Spoiler(index);
                        case 'header': return this.Header(index);
                        case 'list': return this.List(index);
                        case 'code': return this.Pre(index);
                        case 'code-indent': return this.Pre(index);
                        case 'table': return this.Table(index);
                        case 'grid': return this.Grid(index);
                        case 'cut': return this.Cut(index);
                        default: return this.Paragraph(index);
                    }
                });
            }
            param() {
                return this.toString().replace(/^.*?[\)>]\./, '').replace(/[(<>)]/g, '');
            }
            header_level(index) {
                return this.flow_tokens()[index].chunks[0].length;
            }
            header_arg(index) {
                return {
                    [this.param()]: this.block_text(index)
                };
            }
            list_type(index) {
                return this.flow_tokens()[index].chunks[1] ?? '';
            }
            item_index(index) {
                return this.flow_tokens().slice(0, index).filter(token => token.name === 'block').length + 1;
            }
            pre_text(index) {
                const token = this.flow_tokens()[index];
                return (token.chunks[2] ?? token.chunks[0].replace(/^(\t| (?:\+\+|--|\*\*|  ) )/gm, '')).replace(/[\n\r]*$/, '');
            }
            quote_text(index) {
                return this.flow_tokens()[index].chunks[0].replace(/^[>"] /mg, '');
            }
            list_text(index) {
                return this.flow_tokens()[index].chunks[0].replace(/^([-*+]|(?:\d+[\.\)])+) ?/mg, '').replace(/^  ?/mg, '');
            }
            cell_content(indexBlock) {
                return this.flow_tokens()[indexBlock].chunks[0]
                    .split(/\r?\n/g)
                    .filter(row => row && !/\|--/.test(row))
                    .map((row, rowId) => {
                    return row.split(/\|/g)
                        .filter(cell => cell)
                        .map((cell, cellId) => cell.trim());
                });
            }
            table_rows(blockId) {
                return this.cell_content(blockId)
                    .slice(1)
                    .map((row, rowId) => this.Table_row({ block: blockId, row: rowId + 1 }));
            }
            table_head_cells(blockId) {
                return this.cell_content(blockId)[0]
                    .map((cell, cellId) => this.Table_cell({ block: blockId, row: 0, cell: cellId }));
            }
            table_cells(id) {
                return this.cell_content(id.block)[id.row]
                    .map((cell, cellId) => this.Table_cell({ block: id.block, row: id.row, cell: cellId }));
            }
            table_cell_text(id) {
                return this.cell_content(id.block)[id.row][id.cell];
            }
            grid_content(indexBlock) {
                return [...this.flow_tokens()[indexBlock].chunks[0].match(/(?:^! .*?$\r?\n?)+(?:^ +! .*?$\r?\n?)*/gm)]
                    .map((row, rowId) => {
                    const cells = [];
                    for (const line of row.trim().split(/\r?\n/)) {
                        const [_, indent, content] = /^( *)! (.*)/.exec(line);
                        const col = Math.ceil(indent.length / 2);
                        cells[col] = (cells[col] ? cells[col] + '\n' : '') + content;
                    }
                    return cells;
                });
            }
            grid_rows(blockId) {
                return this.grid_content(blockId)
                    .map((row, rowId) => this.Grid_row({ block: blockId, row: rowId }));
            }
            grid_cells(id) {
                return this.grid_content(id.block)[id.row]
                    .map((cell, cellId) => this.Grid_cell({ block: id.block, row: id.row, cell: cellId }));
            }
            grid_cell_text(id) {
                return this.grid_content(id.block)[id.row][id.cell];
            }
            uri_base() {
                return $mol_dom_context.document.location.href;
            }
            uri_base_abs() {
                return new URL(this.uri_base(), $mol_dom_context.document.location.href);
            }
            uri_resolve(uri) {
                if (/^(\w+script+:)+/.test(uri))
                    return null;
                if (/^#\!/.test(uri)) {
                    const params = {};
                    for (const chunk of uri.slice(2).split(this.$.$mol_state_arg.separator)) {
                        if (!chunk)
                            continue;
                        const vals = chunk.split('=').map(decodeURIComponent);
                        params[vals.shift()] = vals.join('=');
                    }
                    return this.$.$mol_state_arg.link(params);
                }
                try {
                    const url = new URL(uri, this.uri_base_abs());
                    return url.toString();
                }
                catch (error) {
                    $mol_fail_log(error);
                    return null;
                }
            }
            code_syntax() {
                return this.$.$mol_syntax2_md_code;
            }
            block_text(index) {
                const token = this.flow_tokens()[index];
                switch (token.name) {
                    case 'header': return token.chunks[2];
                    default: return token.chunks[0];
                }
            }
            block_content(index) {
                return this.line_content([index]);
            }
            line_tokens(path) {
                const tokens = [];
                this.$.$mol_syntax2_md_line.tokenize(this.line_text(path), (name, found, chunks) => tokens.push({ name, found, chunks }));
                return tokens;
            }
            line_token(path) {
                const tokens = this.line_tokens(path.slice(0, path.length - 1));
                return tokens[path[path.length - 1]];
            }
            line_type(path) {
                return this.line_token(path).name;
            }
            line_text(path) {
                if (path.length === 1)
                    return this.block_text(path[0]);
                const { name, found, chunks } = this.line_token(path);
                switch (name) {
                    case 'link': return chunks[0] || chunks[1].replace(/^.*?\/\/|\/.*$/g, '');
                    case 'text-link': return chunks[0] || chunks[1].replace(/^.*?\/\/|\/.*$/g, '');
                    default: return (chunks[0] || chunks[1] || chunks[2]) ?? found;
                }
            }
            line_content(path) {
                return this.line_tokens(path).map(({ name, chunks }, index) => {
                    const path2 = [...path, index];
                    switch (name) {
                        case 'embed': return this.Embed(path2);
                        case 'link': return this.Link(path2);
                        case 'text-link-http': return this.Link_http(path2);
                        case 'text-link': return this.Link(path2);
                        case 'image-link': return this.Embed(path2);
                        case 'code': return this.Code_line(path2);
                        case '': return this.String(path2);
                        default: return this.Span(path2);
                    }
                });
            }
            link_uri(path) {
                const token = this.line_token(path);
                const uri = this.uri_resolve(token.chunks[1] ?? token.found);
                if (!uri)
                    throw new Error('Bad link');
                return uri;
            }
            link_host(path) {
                return this.link_uri(path).replace(/^.*?\/\/|\/.*$/g, '');
            }
            auto_scroll() {
                for (const [index, token] of this.flow_tokens().entries()) {
                    if (token.name !== 'header')
                        continue;
                    const header = this.Header(index);
                    if (!header.Link().current())
                        continue;
                    new $mol_after_tick(() => this.ensure_visible(header));
                }
            }
            spoiler_rows(index) {
                return this.flow_tokens()[index].chunks[0].replace(/^[\?] /mg, '').split('\n');
            }
            spoiler_label(index) {
                return this.spoiler_rows(index)[0];
            }
            spoiler_content(index) {
                return this.spoiler_rows(index).slice(1).join('\n');
            }
        }
        __decorate([
            $mol_mem
        ], $mol_text.prototype, "flow_tokens", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "block_type", null);
        __decorate([
            $mol_mem
        ], $mol_text.prototype, "rows", null);
        __decorate([
            $mol_mem
        ], $mol_text.prototype, "param", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "header_level", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "header_arg", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "pre_text", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "quote_text", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "list_text", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "cell_content", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "table_rows", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "table_head_cells", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "table_cells", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "table_cell_text", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "grid_content", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "grid_rows", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "grid_cells", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "grid_cell_text", null);
        __decorate([
            $mol_mem
        ], $mol_text.prototype, "uri_base_abs", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "uri_resolve", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "block_text", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "line_tokens", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "line_token", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "line_type", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "line_text", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "line_content", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "link_uri", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "link_host", null);
        __decorate([
            $mol_mem
        ], $mol_text.prototype, "auto_scroll", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "spoiler_rows", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "spoiler_label", null);
        __decorate([
            $mol_mem_key
        ], $mol_text.prototype, "spoiler_content", null);
        $$.$mol_text = $mol_text;
        class $mol_text_header extends $.$mol_text_header {
            dom_name() {
                return 'h' + this.level();
            }
        }
        $$.$mol_text_header = $mol_text_header;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/text/text/text.view.css", "[mol_text] {\n\tline-height: 1.5em;\n\tbox-sizing: border-box;\n\tborder-radius: var(--mol_gap_round);\n\twhite-space: pre-line;\n\tdisplay: flex;\n\tflex-direction: column;\n\tflex: 0 0 auto;\n\ttab-size: 4;\n}\n\n[mol_text_paragraph] {\n\tpadding: var(--mol_gap_text);\n\toverflow: auto;\n\toverflow-x: overlay;\n\tmax-width: 100%;\n\tdisplay: block;\n\tmax-width: 60rem;\n\tbreak-inside: avoid;\n}\n\n[mol_text_spoiler_label_paragraph] {\n\tpadding: 0;\n}\n\n[mol_text_span] {\n\tdisplay: inline;\n}\n\n[mol_text_string] {\n\tdisplay: inline;\n\tflex: 0 1 auto;\n\twhite-space: normal;\n}\n\n[mol_text_quote] {\n\tmargin: var(--mol_gap_block);\n\tpadding: var(--mol_gap_block);\n\tbackground: var(--mol_theme_card);\n\tbox-shadow: 0 0 0 1px var(--mol_theme_back);\n\tbreak-inside: avoid;\n}\n\n[mol_text_header] {\n\tdisplay: block;\n\ttext-shadow: 0 0;\n\tfont-weight: normal;\n\tbreak-after: avoid;\n}\n\n* + [mol_text_header] {\n\tmargin-top: 0.75rem;\n}\n\nh1[mol_text_header] {\n\tfont-size: 1.5rem;\n}\n\nh2[mol_text_header] {\n\tfont-size: 1.5rem;\n\tfont-style: italic;\n}\n\nh3[mol_text_header] {\n\tfont-size: 1.25rem;\n}\n\nh4[mol_text_header] {\n\tfont-size: 1.25em;\n\tfont-style: italic;\n}\n\nh5[mol_text_header] {\n\tfont-size: 1rem;\n}\n\nh6[mol_text_header] {\n\tfont-size: 1rem;\n\tfont-style: italic;\n}\n\n[mol_text_header_link] {\n\tcolor: inherit;\n}\n\n[mol_text_table] {\n\tbreak-inside: avoid;\n}\n\n[mol_text_table_cell] {\n\twidth: auto;\n\tdisplay: table-cell;\n\tvertical-align: baseline;\n\tpadding: 0;\n\tborder-radius: 0;\n}\n\n[mol_text_grid] {\n\tbreak-inside: avoid;\n}\n\n[mol_text_grid_cell] {\n\twidth: auto;\n\tdisplay: table-cell;\n\tvertical-align: top;\n\tpadding: 0;\n\tborder-radius: 0;\n}\n\n[mol_text_cut] {\n\tborder: none;\n\twidth: 100%;\n\tbox-shadow: 0 0 0 1px var(--mol_theme_line);\n}\n\n[mol_text_link_http],\n[mol_text_link] {\n\tpadding: 0;\n\tdisplay: inline;\n\twhite-space: nowrap;\n}\n\n[mol_text_link_icon] + [mol_text_embed] {\n\tmargin-left: -1.5rem;\n}\n\n[mol_text_embed_youtube] {\n\tdisplay: inline;\n}\n\n[mol_text_embed_youtube_image],\n[mol_text_embed_youtube_frame],\n[mol_text_embed_object] {\n\tobject-fit: contain;\n\tobject-position: center;\n\tdisplay: inline;\n\twidth: 100vw;\n\tmax-height: calc( 100vh - 6rem );\n\tvertical-align: top;\n}\n[mol_text_embed_object_fallback] {\n\tpadding: 0;\n}\n[mol_text_embed_image] {\n\tobject-fit: contain;\n\tobject-position: center;\n\tdisplay: inline;\n\t/* max-height: calc( 100vh - 6rem ); */\n\tvertical-align: top;\n}\n\n[mol_text_pre] {\n\twhite-space: pre;\n\toverflow-x: auto;\n\toverflow-x: overlay;\n\ttab-size: 2;\n\tbreak-inside: avoid;\n}\n\n[mol_text_code_line] {\n\tdisplay: inline-block;\n}\n\n[mol_text_type=\"strong\"] {\n\ttext-shadow: 0 0;\n\tfilter: contrast(1.5);\n}\n\n[mol_text_type=\"emphasis\"] {\n\tfont-style: italic;\n}\n\n[mol_text_type=\"insert\"] {\n\tcolor: var(--mol_theme_special);\n}\n\n[mol_text_type=\"delete\"] {\n\tcolor: var(--mol_theme_shade);\n}\n\n[mol_text_type=\"remark\"] {\n\tcolor: var(--mol_theme_shade);\n}\n\n[mol_text_type=\"quote\"] {\n\tfont-style: italic;\n}\n");
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_offline() { }
    $.$mol_offline = $mol_offline;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    try {
        $mol_offline();
    }
    catch (error) {
        console.error(error);
    }
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_crus_file extends $hyoo_crus_dict.with({
        Name: $hyoo_crus_atom_str,
        Type: $hyoo_crus_atom_str,
        Chunks: $hyoo_crus_list_bin,
    }) {
        uri() {
            return `?CRUS:file=${this.ref().description};name=${this.name()}`;
        }
        name(next) {
            const ext = {
                'text/plain': 'txt',
                'application/json': 'json',
            }[this.type()] ?? 'bin';
            return this.Name(next)?.val(next) ?? `${this.ref().description}.${ext}`;
        }
        type(next) {
            return this.Type(next)?.val(next) ?? 'application/octet-stream';
        }
        blob(next) {
            if (!next)
                return new $mol_blob(this.chunks(), { type: this.type() });
            const buffer = new Uint8Array($mol_wire_sync(next).arrayBuffer());
            this.buffer(buffer);
            this.type(next.type);
            if (next instanceof $mol_dom_context.File)
                this.name(next.name);
            return next;
        }
        buffer(next) {
            if (next) {
                const chunks = [];
                for (let offset = 0; offset < next.byteLength;) {
                    chunks.push(next.slice(offset, offset += 2 ** 16));
                }
                this.chunks(chunks);
                return next;
            }
            else {
                const chunks = this.chunks();
                const size = chunks.reduce((sum, chunk) => sum + chunk.byteLength, 0);
                const res = new Uint8Array(size);
                let offset = 0;
                for (const chunk of chunks) {
                    res.set(chunk, offset);
                    offset += chunk.byteLength;
                }
                return res;
            }
        }
        chunks(next) {
            return this.Chunks(next)?.items(next)?.filter($mol_guard_defined) ?? [];
        }
        str(next, type = 'text/plain') {
            if (next === undefined)
                return $mol_charset_decode(this.buffer());
            this.buffer($mol_charset_encode(next));
            this.type(type);
            return next;
        }
        json(next, type = 'application/json') {
            if (next === undefined)
                return JSON.parse(this.str());
            this.str(JSON.stringify(next), type);
            return next;
        }
    }
    $.$hyoo_crus_file = $hyoo_crus_file;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $shm_hitalama_token extends $hyoo_crus_entity.with({
        Organization: $hyoo_crus_atom_str,
        Token: $hyoo_crus_atom_str,
        User_id: $hyoo_crus_atom_str,
        Avatar: $hyoo_crus_file,
        Avatar_url: $hyoo_crus_atom_str,
    }) {
    }
    $.$shm_hitalama_token = $shm_hitalama_token;
})($ || ($ = {}));

;
	($.$shm_hitalama_token_view) = class $shm_hitalama_token_view extends ($.$mol_view) {
		user_id(){
			return "";
		}
		logo_uri(){
			return "/shm/hitalama/token/logo/logo_vk.svg";
		}
		Logo(){
			const obj = new this.$.$mol_image();
			(obj.uri) = () => ((this.logo_uri()));
			return obj;
		}
		avatar_url(){
			return "";
		}
		Avatar(){
			const obj = new this.$.$mol_image();
			(obj.uri) = () => ((this.avatar_url()));
			(obj.title) = () => ((this.user_id()));
			return obj;
		}
		token(){
			const obj = new this.$.$shm_hitalama_token();
			return obj;
		}
		title(){
			return (this.user_id());
		}
		sub(){
			return [(this.Logo()), (this.Avatar())];
		}
	};
	($mol_mem(($.$shm_hitalama_token_view.prototype), "Logo"));
	($mol_mem(($.$shm_hitalama_token_view.prototype), "Avatar"));
	($mol_mem(($.$shm_hitalama_token_view.prototype), "token"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_token_view extends $.$shm_hitalama_token_view {
            logo_uri() {
                return ($.$mol_dom_context.document?.location.host == 'hitalama.github.io'
                    ? '/hitalama-mol' : '') + super.logo_uri();
            }
            token_str() {
                return this.token().Token()?.val() || '';
            }
            user_id() {
                return this.token().User_id()?.val() || '';
            }
            avatar_url() {
                return this.token().Avatar_url()?.val() || '';
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_token_view.prototype, "token_str", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_token_view.prototype, "user_id", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_token_view.prototype, "avatar_url", null);
        $$.$shm_hitalama_token_view = $shm_hitalama_token_view;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_token_view, {
            position: 'relative',
            Logo: {
                position: 'absolute',
                left: '-4px',
                top: '-4px',
            },
            Avatar: {
                height: '2rem',
                width: '2rem',
                border: {
                    radius: '50%',
                },
            }
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_check_list) = class $mol_check_list extends ($.$mol_view) {
		option_checked(id, next){
			if(next !== undefined) return next;
			return false;
		}
		option_title(id){
			return "";
		}
		option_label(id){
			return [(this.option_title(id))];
		}
		enabled(){
			return true;
		}
		option_enabled(id){
			return (this.enabled());
		}
		option_hint(id){
			return "";
		}
		items(){
			return [];
		}
		dictionary(){
			return {};
		}
		Option(id){
			const obj = new this.$.$mol_check();
			(obj.checked) = (next) => ((this.option_checked(id, next)));
			(obj.label) = () => ((this.option_label(id)));
			(obj.enabled) = () => ((this.option_enabled(id)));
			(obj.hint) = () => ((this.option_hint(id)));
			(obj.minimal_height) = () => (24);
			return obj;
		}
		options(){
			return {};
		}
		keys(){
			return [];
		}
		sub(){
			return (this.items());
		}
	};
	($mol_mem_key(($.$mol_check_list.prototype), "option_checked"));
	($mol_mem_key(($.$mol_check_list.prototype), "Option"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_check_list extends $.$mol_check_list {
            options() {
                return {};
            }
            dictionary(next) {
                return next ?? {};
            }
            option_checked(id, next) {
                const prev = this.dictionary();
                if (next === undefined)
                    return prev[id] ?? null;
                const next_rec = { ...prev, [id]: next };
                if (next === null)
                    delete next_rec[id];
                return this.dictionary(next_rec)[id] ?? null;
            }
            keys() {
                return Object.keys(this.options());
            }
            items() {
                return this.keys().map(key => this.Option(key));
            }
            option_title(key) {
                return this.options()[key] || key;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_check_list.prototype, "keys", null);
        __decorate([
            $mol_mem
        ], $mol_check_list.prototype, "items", null);
        $$.$mol_check_list = $mol_check_list;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/check/list/list.view.css", "[mol_check_list] {\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tflex: 1 1 auto;\n\tborder-radius: var(--mol_gap_round);\n\tgap: 1px;\n}\n\n[mol_check_list_option] {\n\tflex: 0 1 auto;\n}\n\n[mol_check_list_option]:where([mol_check_checked=\"true\"]) {\n\ttext-shadow: 0 0;\n\tcolor: var(--mol_theme_current);\n}\n\n[mol_check_list_option]:where([mol_check_checked=\"true\"][disabled]) {\n\tcolor: var(--mol_theme_text);\n}\n");
})($ || ($ = {}));

;
	($.$mol_switch) = class $mol_switch extends ($.$mol_check_list) {
		value(next){
			if(next !== undefined) return next;
			return "";
		}
	};
	($mol_mem(($.$mol_switch.prototype), "value"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_switch extends $.$mol_switch {
            value(next) {
                return $mol_state_session.value(`${this}.value()`, next) ?? '';
            }
            option_checked(key, next) {
                if (next === undefined)
                    return this.value() == key;
                this.value(next ? key : '');
                return next;
            }
        }
        $$.$mol_switch = $mol_switch;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_pop_over) = class $mol_pop_over extends ($.$mol_pop) {
		hovered(next){
			if(next !== undefined) return next;
			return false;
		}
		event_show(next){
			if(next !== undefined) return next;
			return null;
		}
		event_hide(next){
			if(next !== undefined) return next;
			return null;
		}
		showed(){
			return (this.hovered());
		}
		attr(){
			return {...(super.attr()), "tabindex": 0};
		}
		event(){
			return {
				...(super.event()), 
				"mouseenter": (next) => (this.event_show(next)), 
				"mouseleave": (next) => (this.event_hide(next))
			};
		}
	};
	($mol_mem(($.$mol_pop_over.prototype), "hovered"));
	($mol_mem(($.$mol_pop_over.prototype), "event_show"));
	($mol_mem(($.$mol_pop_over.prototype), "event_hide"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_pop_over extends $.$mol_pop_over {
            event_show(event) {
                this.hovered(true);
            }
            event_hide(event) {
                this.hovered(false);
            }
            showed() {
                return this.focused() || this.hovered();
            }
        }
        $$.$mol_pop_over = $mol_pop_over;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/pop/over/over.view.css", "[mol_pop_over]:focus {\r\n\toutline: none;\r\n}");
})($ || ($ = {}));

;
	($.$shm_hitalama_token_switch) = class $shm_hitalama_token_switch extends ($.$mol_view) {
		current_ref(next){
			if(next !== undefined) return next;
			return "";
		}
		tokens_refs(){
			return [];
		}
		token(id){
			const obj = new this.$.$shm_hitalama_token();
			return obj;
		}
		Token(id){
			const obj = new this.$.$shm_hitalama_token_view();
			(obj.token) = () => ((this.token(id)));
			return obj;
		}
		option_label(id){
			return [(this.Token(id))];
		}
		Switch(){
			const obj = new this.$.$mol_switch();
			(obj.value) = (next) => ((this.current_ref(next)));
			(obj.keys) = () => ((this.tokens_refs()));
			(obj.option_label) = (id) => ((this.option_label(id)));
			return obj;
		}
		Add_anchor(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ("Добавить");
			return obj;
		}
		vk_auth_uri(){
			return "";
		}
		Add_vk(){
			const obj = new this.$.$mol_link();
			(obj.title) = () => ("VK");
			(obj.target) = () => ("_self");
			(obj.uri) = () => ((this.vk_auth_uri()));
			return obj;
		}
		Add(){
			const obj = new this.$.$mol_pop_over();
			(obj.Anchor) = () => ((this.Add_anchor()));
			(obj.bubble_content) = () => ([(this.Add_vk())]);
			return obj;
		}
		clear(next){
			if(next !== undefined) return next;
			return null;
		}
		Clear(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ("Очистить");
			(obj.click) = (next) => ((this.clear(next)));
			return obj;
		}
		vk_token_url_parse(){
			return "";
		}
		tokens(){
			return [];
		}
		current(){
			return null;
		}
		sub(){
			return [
				(this.Switch()), 
				(this.Add()), 
				(this.Clear())
			];
		}
		auto(){
			return [(this.vk_token_url_parse())];
		}
		vk_client_id(){
			return "7803698";
		}
		vk_redirect_uri(){
			return "http://localhost:9080/shm/hitalama/app/-/test.html";
		}
	};
	($mol_mem(($.$shm_hitalama_token_switch.prototype), "current_ref"));
	($mol_mem_key(($.$shm_hitalama_token_switch.prototype), "token"));
	($mol_mem_key(($.$shm_hitalama_token_switch.prototype), "Token"));
	($mol_mem(($.$shm_hitalama_token_switch.prototype), "Switch"));
	($mol_mem(($.$shm_hitalama_token_switch.prototype), "Add_anchor"));
	($mol_mem(($.$shm_hitalama_token_switch.prototype), "Add_vk"));
	($mol_mem(($.$shm_hitalama_token_switch.prototype), "Add"));
	($mol_mem(($.$shm_hitalama_token_switch.prototype), "clear"));
	($mol_mem(($.$shm_hitalama_token_switch.prototype), "Clear"));


;
"use strict";
var $;
(function ($) {
    class $shm_hitalama_group extends $hyoo_crus_entity.with({
        Name: $hyoo_crus_atom_str,
        Group_id: $hyoo_crus_atom_str,
        Owner_id: $hyoo_crus_atom_str,
        Photo_url: $hyoo_crus_atom_str,
        Members_count: $hyoo_crus_atom_real,
    }) {
        fill(dto) {
            this.Name(null)?.val(dto?.name);
            this.Group_id(null)?.val(dto?.id);
            this.Owner_id(null)?.val('-' + dto?.id);
            this.Photo_url(null)?.val(dto?.photo_50);
            this.Members_count(null)?.val(dto?.members_count);
        }
    }
    $.$shm_hitalama_group = $shm_hitalama_group;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $shm_hitalama_list extends $hyoo_crus_entity.with({
        Name: $hyoo_crus_atom_str,
        Groups: $hyoo_crus_list_ref_to(() => $shm_hitalama_group)
    }) {
    }
    $.$shm_hitalama_list = $shm_hitalama_list;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_blob_uri(blob) {
        return new Promise((done, fail) => {
            const reader = new FileReader;
            reader.onerror = fail;
            reader.onload = event => done(event.target.result);
            reader.readAsDataURL(blob);
        });
    }
    $.$mol_blob_uri = $mol_blob_uri;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $shm_hitalama_file extends $hyoo_crus_entity.with({
        Size: $hyoo_crus_atom_real,
        File: $hyoo_crus_atom_ref_to(() => $hyoo_crus_file),
    }) {
        async blob_uri_async() {
            const blob = this.File()?.remote()?.blob();
            const uri = await $mol_blob_uri(blob);
            return uri;
        }
    }
    $.$shm_hitalama_file = $shm_hitalama_file;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $shm_hitalama_project extends $hyoo_crus_entity.with({
        Files: $hyoo_crus_list_ref_to(() => $shm_hitalama_file),
        Query_logs: $hyoo_crus_list_ref_to(() => $shm_hitalama_project_query_log),
    }) {
    }
    $.$shm_hitalama_project = $shm_hitalama_project;
    class $shm_hitalama_project_query_log extends $hyoo_crus_entity.with({
        Query: $hyoo_crus_atom_str,
        Time: $hyoo_crus_atom_real,
    }) {
    }
    $.$shm_hitalama_project_query_log = $shm_hitalama_project_query_log;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    const { unicode_only, line_end, tab, repeat_greedy, optional, forbid_after, force_after, char_only, char_except } = $mol_regexp;
    $.$hyoo_crus_text_tokens = $mol_regexp.from({
        token: {
            'line-break': line_end,
            'indents': repeat_greedy(tab, 1),
            'emoji': [
                unicode_only('Extended_Pictographic'),
                optional(unicode_only('Emoji_Modifier')),
                repeat_greedy([
                    unicode_only('Emoji_Component'),
                    unicode_only('Extended_Pictographic'),
                    optional(unicode_only('Emoji_Modifier')),
                ]),
            ],
            'link': /\b(https?:\/\/[^\s,.;:!?")]+(?:[,.;:!?")][^\s,.;:!?")]+)+)/,
            'Word': [
                [char_only(' ', 0xA0)],
                repeat_greedy(char_only([
                    unicode_only('General_Category', 'Uppercase_Letter'),
                    unicode_only('Diacritic'),
                    unicode_only('General_Category', 'Number'),
                ]), 1),
                repeat_greedy(char_only([
                    unicode_only('General_Category', 'Lowercase_Letter'),
                    unicode_only('Diacritic'),
                    unicode_only('General_Category', 'Number'),
                ])),
            ],
            'word': [
                [char_only(' ', 0xA0)],
                repeat_greedy(char_only([
                    unicode_only('General_Category', 'Lowercase_Letter'),
                    unicode_only('Diacritic'),
                    unicode_only('General_Category', 'Number'),
                ]), 1),
            ],
            'spaces': [
                forbid_after(line_end),
                repeat_greedy(unicode_only('White_Space'), 1),
                force_after(unicode_only('White_Space')),
            ],
            'space': [
                forbid_after(line_end),
                unicode_only('White_Space'),
                forbid_after([
                    unicode_only('White_Space'),
                    unicode_only('General_Category', 'Uppercase_Letter'),
                    unicode_only('General_Category', 'Lowercase_Letter'),
                    unicode_only('Diacritic'),
                    unicode_only('General_Category', 'Number'),
                ]),
            ],
            'others': [
                [char_only(' ', 0xA0)],
                repeat_greedy(char_except([
                    unicode_only('General_Category', 'Uppercase_Letter'),
                    unicode_only('General_Category', 'Lowercase_Letter'),
                    unicode_only('Diacritic'),
                    unicode_only('General_Category', 'Number'),
                    unicode_only('White_Space'),
                ]), 1),
            ],
        },
    });
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $hyoo_crus_text extends $hyoo_crus_node {
        static tag = $hyoo_crus_sand_tag[$hyoo_crus_sand_tag.vals];
        value(next) {
            return this.text(next);
        }
        text(next) {
            if (next !== undefined) {
                const land = this.land();
                const prev = this.units();
                const lines = next.match(/.*\n|.+$/g) ?? [];
                $mol_reconcile({
                    prev,
                    from: 0,
                    to: prev.length,
                    next: lines,
                    equal: (next, prev) => {
                        return land.Node($hyoo_crus_text).Item(prev.self()).str() === next;
                    },
                    drop: (prev, lead) => this.land().post(lead?.self() ?? '', prev.head(), prev.self(), null),
                    insert: (next, lead) => {
                        const sand = this.land().post(lead?.self() ?? '', this.head(), land.self_make(), 'p', 'vals');
                        land.Node($hyoo_crus_text).Item(sand.self()).str(next);
                        return sand;
                    },
                    replace: (next, prev, lead) => {
                        land.Node($hyoo_crus_text).Item(prev.self()).str(next);
                        return prev;
                    },
                });
            }
            return this.str();
        }
        str(next) {
            if (next === undefined) {
                let str = '';
                const land = this.land();
                for (const unit of this.units()) {
                    if (unit.tag() === 'term')
                        str += $hyoo_crus_vary_cast_str(land.sand_decode(unit)) ?? '';
                    else
                        str += land.Node($hyoo_crus_text).Item(unit.self()).str();
                }
                return str;
            }
            else {
                this.write(next, 0, -1);
                return this.str();
            }
        }
        write(next, str_from = -1, str_to = str_from) {
            const land = this.land();
            const list = this.units();
            let from = str_from < 0 ? list.length : 0;
            let word = '';
            while (from < list.length) {
                word = $hyoo_crus_vary_cast_str(land.sand_decode(list[from])) ?? '';
                if (str_from <= word.length) {
                    next = word.slice(0, str_from) + next;
                    break;
                }
                str_from -= word.length;
                if (str_to > 0)
                    str_to -= word.length;
                from++;
            }
            let to = str_to < 0 ? list.length : from;
            while (to < list.length) {
                word = $hyoo_crus_vary_cast_str(land.sand_decode(list[to])) ?? '';
                to++;
                if (str_to < word.length) {
                    next = next + word.slice(str_to);
                    break;
                }
                str_to -= word.length;
            }
            if (from && from === list.length) {
                --from;
                next = ($hyoo_crus_vary_cast_str(land.sand_decode(list[from])) ?? '') + next;
            }
            const words = next.match($hyoo_crus_text_tokens) ?? [];
            this.cast($hyoo_crus_list_vary).splice(words, from, to);
            return this;
        }
        point_by_offset(offset) {
            const land = this.land();
            let off = offset;
            for (const unit of this.units()) {
                if (unit.tag() === 'term') {
                    const len = $hyoo_crus_vary_cast_str(land.sand_decode(unit))?.length ?? 0;
                    if (off <= len)
                        return [unit.self(), off];
                    else
                        off -= len;
                }
                else {
                    const found = land.Node($hyoo_crus_text).Item(unit.self()).point_by_offset(off);
                    if (found[0])
                        return found;
                    off = found[1];
                }
            }
            return ['', off];
        }
        offset_by_point([self, offset]) {
            const land = this.land();
            for (const unit of this.units()) {
                if (unit.self() === self)
                    return [self, offset];
                if (unit.tag() === 'term') {
                    offset += $hyoo_crus_vary_cast_str(land.sand_decode(unit))?.length ?? 0;
                }
                else {
                    const found = land.Node($hyoo_crus_text).Item(unit.self()).offset_by_point([self, offset]);
                    if (found[0])
                        return [self, found[1]];
                    offset = found[1];
                }
            }
            return ['', offset];
        }
        selection(lord, next) {
            const base = this.$.$hyoo_crus_glob.Land(lord).Data($hyoo_crus_home);
            if (next) {
                base.Selection(null)?.val(next.map(offset => this.point_by_offset(offset).join(':')).join('|'));
                return next;
            }
            else {
                this.text();
                return base.Selection()?.val()?.split('|').map(point => {
                    const chunks = point.split(':');
                    return this.offset_by_point([chunks[0], Number(chunks[1]) || 0])[1];
                }) ?? [0, 0];
            }
        }
    }
    __decorate([
        $mol_mem
    ], $hyoo_crus_text.prototype, "text", null);
    __decorate([
        $mol_mem
    ], $hyoo_crus_text.prototype, "str", null);
    __decorate([
        $mol_action
    ], $hyoo_crus_text.prototype, "write", null);
    __decorate([
        $mol_action
    ], $hyoo_crus_text.prototype, "point_by_offset", null);
    __decorate([
        $mol_action
    ], $hyoo_crus_text.prototype, "offset_by_point", null);
    __decorate([
        $mol_mem_key
    ], $hyoo_crus_text.prototype, "selection", null);
    $.$hyoo_crus_text = $hyoo_crus_text;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $shm_hitalama_board_range extends $hyoo_crus_entity.with({
        Block: $hyoo_crus_atom_ref_to(() => $shm_hitalama_board_block),
        Value: $hyoo_crus_atom_real,
        Min: $hyoo_crus_atom_real,
        Max: $hyoo_crus_atom_real,
        Step: $hyoo_crus_atom_real,
    }) {
        value(next) {
            return this.Value(next)?.val(next) ?? 0;
        }
        min(next) {
            return this.Min(next)?.val(next) ?? 0;
        }
        max(next) {
            return this.Max(next)?.val(next) ?? 10;
        }
        step(next) {
            return this.Step(next)?.val(next) ?? 1;
        }
    }
    __decorate([
        $mol_mem
    ], $shm_hitalama_board_range.prototype, "value", null);
    __decorate([
        $mol_mem
    ], $shm_hitalama_board_range.prototype, "min", null);
    __decorate([
        $mol_mem
    ], $shm_hitalama_board_range.prototype, "max", null);
    __decorate([
        $mol_mem
    ], $shm_hitalama_board_range.prototype, "step", null);
    $.$shm_hitalama_board_range = $shm_hitalama_board_range;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $shm_hitalama_board_form extends $hyoo_crus_entity.with({
        Query: $hyoo_crus_atom_str,
        Excluded_words: $hyoo_crus_atom_str,
        Date_from: $hyoo_crus_atom_str,
        Date_to: $hyoo_crus_atom_str,
        Country: $hyoo_crus_atom_str,
        Language: $hyoo_crus_atom_str,
        File_social_media: $hyoo_crus_atom_ref_to(() => $shm_hitalama_file),
        File_mass_media: $hyoo_crus_atom_ref_to(() => $shm_hitalama_file),
        Type: $hyoo_crus_atom_str,
        Tags: $hyoo_crus_atom_str,
        Category: $hyoo_crus_atom_str,
    }) {
        query(next) {
            return this.Query(next)?.val(next) ?? '';
        }
        excluded_words(next) {
            return this.Excluded_words(next)?.val(next) ?? '';
        }
        date_from(next) {
            return this.Date_from(next)?.val(next) ?? '';
        }
        date_to(next) {
            return this.Date_to(next)?.val(next) ?? '';
        }
        country(next) {
            return this.Country(next)?.val(next) ?? '';
        }
        language(next) {
            return this.Language(next)?.val(next) ?? '';
        }
        type(next) {
            return this.Type(next)?.val(next) ?? '';
        }
        tags(next) {
            return this.Tags(next)?.val(next) ?? '';
        }
        category(next) {
            return this.Category(next)?.val(next) ?? '';
        }
        prediod() {
            const from = this.Date_from()?.val();
            const to = this.Date_to()?.val();
            return (from && to) ? from + ' – ' + to : '';
        }
        social_media_title() {
            return this.File_social_media()?.remote()?.title() || '';
        }
        mass_media_title() {
            return this.File_mass_media()?.remote()?.title() || '';
        }
        table_row() {
            return [
                this.query(),
                this.excluded_words(),
                this.prediod(),
                this.country(),
                this.language(),
                this.File_social_media()?.remote()?.ref()?.description,
                this.File_mass_media()?.remote()?.ref()?.description,
                this.type(),
                this.tags(),
                this.category(),
                null,
            ];
        }
        statistic_table_rows() {
            const rows = [];
            this.File_mass_media()?.remote()?.File()?.remote()?.str()?.split('\n')?.forEach(line => {
                const [date, count] = line.split(';');
                if (isNaN(Number(count)))
                    return;
                rows.push([date, count, this.query(), this.excluded_words(), 'СМИ', this.country(), this.language()]);
            });
            this.File_social_media()?.remote()?.File()?.remote()?.str()?.split('\n')?.forEach(line => {
                const [date, count] = line.split(';');
                if (isNaN(Number(count)))
                    return;
                rows.push([date, count, this.query(), this.excluded_words(), 'Соц.медиа', this.country(), this.language()]);
            });
            return rows;
        }
        serialize() {
            return {
                ref: this.ref().description,
                query: this.Query()?.val(),
                excluded_words: this.Excluded_words()?.val(),
                date_from: this.Date_from()?.val(),
                date_to: this.Date_to()?.val(),
                country: this.Country()?.val(),
                language: this.Language()?.val(),
                type: this.Type()?.val(),
                tags: this.Tags()?.val(),
                category: this.Category()?.val(),
                file_social_media_ref: this.File_social_media()?.remote()?.ref().description,
                file_mass_media_ref: this.File_mass_media()?.remote()?.ref().description,
            };
        }
        deserialize_data(dto) {
            this.Query(dto.query)?.val(dto.query);
            this.Excluded_words(dto.excluded_words)?.val(dto.excluded_words);
            this.Date_from(dto.date_from)?.val(dto.date_from);
            this.Date_to(dto.date_to)?.val(dto.date_to);
            this.Country(dto.country)?.val(dto.country);
            this.Language(dto.language)?.val(dto.language);
            this.Type(dto.type)?.val(dto.type);
            this.Tags(dto.tags)?.val(dto.tags);
            this.Category(dto.category)?.val(dto.category);
        }
        deserialize_refs(dto, ref_remap) {
            if (dto.file_mass_media_ref) {
                const file = $hyoo_crus_glob.Node($hyoo_crus_ref(ref_remap.get(dto.file_mass_media_ref)), $shm_hitalama_file);
                this.File_mass_media(null)?.remote(file);
            }
            if (dto.file_social_media_ref) {
                const file = $hyoo_crus_glob.Node($hyoo_crus_ref(ref_remap.get(dto.file_social_media_ref)), $shm_hitalama_file);
                this.File_social_media(null)?.remote(file);
            }
        }
    }
    __decorate([
        $mol_mem
    ], $shm_hitalama_board_form.prototype, "table_row", null);
    __decorate([
        $mol_mem
    ], $shm_hitalama_board_form.prototype, "statistic_table_rows", null);
    __decorate([
        $mol_action
    ], $shm_hitalama_board_form.prototype, "serialize", null);
    __decorate([
        $mol_action
    ], $shm_hitalama_board_form.prototype, "deserialize_data", null);
    __decorate([
        $mol_action
    ], $shm_hitalama_board_form.prototype, "deserialize_refs", null);
    $.$shm_hitalama_board_form = $shm_hitalama_board_form;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $shm_hitalama_board_table extends $hyoo_crus_entity.with({
        Block: $hyoo_crus_atom_ref_to(() => $shm_hitalama_board_block),
        Board: $hyoo_crus_atom_ref_to(() => $shm_hitalama_board),
        Head: $hyoo_crus_atom_jsan,
        Head_method: $hyoo_crus_atom_str,
        Rows: $hyoo_crus_atom_jsan,
        Rows_method: $hyoo_crus_atom_str,
        Col_widths: $hyoo_crus_atom_jsan,
        Col_types: $hyoo_crus_atom_jsan,
        Rows_checked: $hyoo_crus_atom_json,
    }) {
        board() {
            return this.Board()?.remote() ?? this.Block()?.remote()?.Board()?.remote();
        }
        table_head(next) {
            const method = this.Head_method()?.val();
            if (!method)
                return this.Head(next)?.val(next) ?? [];
            const vars = 'const next = this.next;const board = this.board;\n';
            const func = new Function(vars + method);
            const res = func.call({ next, board: this.board() });
            return res;
        }
        table_rows(next) {
            const method = this.Rows_method()?.val();
            if (!method)
                return this.Rows(next)?.val(next) ?? [];
            const vars = 'const next = this.next;const board = this.board;\n';
            const func = new Function(vars + method);
            const res = func.call({ next, board: this.board() });
            return res;
        }
        col_types(next) {
            const types_raw = this.Col_types(next)?.val(next) ?? [];
            const types = [...types_raw];
            this.table_head()?.forEach((title, i) => {
                if (title == 'Дата') {
                    types[i] ??= 'date';
                }
                types[i] ??= 'any';
            });
            return types;
        }
        head_computeds() {
            return [];
        }
        head_extended() {
            return [...this.table_head() ?? [], ...this.head_computeds().map(h => h.title)];
        }
        rows_extended() {
            const head_calculated = this.head_computeds();
            const rows = this.table_rows();
            return rows?.map((row) => {
                const calculated = head_calculated.map(({ title, calc }) => {
                    return calc(row);
                });
                return [...row, ...calculated];
            });
        }
    }
    __decorate([
        $mol_mem
    ], $shm_hitalama_board_table.prototype, "board", null);
    __decorate([
        $mol_mem
    ], $shm_hitalama_board_table.prototype, "table_head", null);
    __decorate([
        $mol_mem
    ], $shm_hitalama_board_table.prototype, "table_rows", null);
    __decorate([
        $mol_mem
    ], $shm_hitalama_board_table.prototype, "col_types", null);
    __decorate([
        $mol_mem
    ], $shm_hitalama_board_table.prototype, "head_computeds", null);
    __decorate([
        $mol_mem
    ], $shm_hitalama_board_table.prototype, "head_extended", null);
    __decorate([
        $mol_mem
    ], $shm_hitalama_board_table.prototype, "rows_extended", null);
    $.$shm_hitalama_board_table = $shm_hitalama_board_table;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $shm_hitalama_board_chart extends $hyoo_crus_entity.with({
        Block: $hyoo_crus_atom_ref_to(() => $shm_hitalama_board_block),
        Axis: $hyoo_crus_atom_str,
        Axis_details: $hyoo_crus_dict_to($hyoo_crus_atom_str),
        Values: $hyoo_crus_atom_jsan,
        Groups: $hyoo_crus_atom_jsan,
        Filters_enabled: $hyoo_crus_atom_jsan,
        Filters_options: $hyoo_crus_dict_to($hyoo_crus_atom_jsan),
    }) {
        table() {
            return this.Block()?.remote()?.table();
        }
        table_head() {
            return this.table()?.head_extended() ?? [];
        }
        axis(next) {
            return this.Axis(next)?.val(next) ?? this.table_head()[0];
        }
        values(next) {
            return this.Values(next)?.val(next) ?? [];
        }
        values_title(next) {
            return this.Values(next)?.val(next ? [next] : undefined)?.at(0) ?? this.table_head()[1];
        }
        groups(next) {
            return this.Groups(next)?.val(next) ?? [];
        }
        rows() {
            const rows = this.table()?.rows_extended() ?? [];
            if (rows?.length == 0)
                return [this.table_head().map(_ => '')];
            return rows;
        }
        filter_options(field) {
            return [...this.traversed().field_options.get(field) ?? []];
        }
        filter_options_checked(field, next) {
            return this.Filters_options(next)?.key(field, next)?.val(next) ?? this.filter_options(field);
        }
        row_included([field, value]) {
            const options = this.Filters_options()?.key(field)?.val();
            if (!options)
                return true;
            return options.includes(value);
        }
        date_axis_details(axis, next) {
            return this.Axis_details(next)?.key(axis, next)?.val(next) ?? 'day';
        }
        traversed() {
            const field_options = new Map;
            const by_group = new Map;
            const labels = new Set;
            const fields = this.table_head();
            const group_indexes = this.groups().map(g => fields.indexOf(g));
            const value_i = fields.indexOf(this.values_title());
            const row_value = (row) => {
                return row[value_i];
            };
            const axis_i = fields.indexOf(this.axis());
            const axis_details = this.date_axis_details(this.axis());
            const row_label = (row) => {
                if (axis_details)
                    return dd_mm_yyyy_transform[axis_details](row[axis_i]);
                return row[axis_i];
            };
            this.rows().forEach((row) => {
                let included = true;
                row.forEach((value, i) => {
                    const set = field_options.get(fields[i]) ?? new Set;
                    field_options.set(fields[i], set);
                    set.add(value);
                    included = included == false ? false : this.row_included([fields[i], value]);
                });
                if (!included)
                    return;
                const group_name = group_indexes.map(i => row[i]).join(', ') ?? '';
                const by_label = by_group.get(group_name) ?? new Map;
                by_group.set(group_name, by_label);
                const label = row_label(row);
                by_label.set(label, (by_label.get(label) ?? 0) + Number(row_value(row)));
                labels.add(label);
            });
            return { by_group, labels, field_options };
        }
    }
    __decorate([
        $mol_mem
    ], $shm_hitalama_board_chart.prototype, "table", null);
    __decorate([
        $mol_mem
    ], $shm_hitalama_board_chart.prototype, "table_head", null);
    __decorate([
        $mol_mem
    ], $shm_hitalama_board_chart.prototype, "axis", null);
    __decorate([
        $mol_mem
    ], $shm_hitalama_board_chart.prototype, "values", null);
    __decorate([
        $mol_mem
    ], $shm_hitalama_board_chart.prototype, "values_title", null);
    __decorate([
        $mol_mem
    ], $shm_hitalama_board_chart.prototype, "groups", null);
    __decorate([
        $mol_mem
    ], $shm_hitalama_board_chart.prototype, "rows", null);
    __decorate([
        $mol_mem_key
    ], $shm_hitalama_board_chart.prototype, "filter_options", null);
    __decorate([
        $mol_mem_key
    ], $shm_hitalama_board_chart.prototype, "filter_options_checked", null);
    __decorate([
        $mol_mem_key
    ], $shm_hitalama_board_chart.prototype, "row_included", null);
    __decorate([
        $mol_mem_key
    ], $shm_hitalama_board_chart.prototype, "date_axis_details", null);
    __decorate([
        $mol_mem
    ], $shm_hitalama_board_chart.prototype, "traversed", null);
    $.$shm_hitalama_board_chart = $shm_hitalama_board_chart;
    const dd_mm_yyyy_transform = {
        'month': function (dd_mm_yyyy) {
            const [day, month, year] = dd_mm_yyyy.split('.');
            return month + '.' + year;
        },
        'year': function (dd_mm_yyyy) {
            const [day, month, year] = dd_mm_yyyy.split('.');
            return year;
        },
        'day': function (dd_mm_yyyy) {
            return dd_mm_yyyy;
        },
    };
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $.$shm_hitalama_board_block_types = [
        'text',
        'input',
        'iframe',
        'form',
        'table',
        'table_novirt',
        'code',
        'chart',
        'chart_settings',
        'chart_filter',
        'customdom',
        'file',
        'range',
        'form_edit',
        'code_css',
    ];
    class $shm_hitalama_board_block_type extends $hyoo_crus_atom_enum($.$shm_hitalama_board_block_types) {
    }
    class $shm_hitalama_board_block extends $hyoo_crus_entity.with({
        Body_x: $hyoo_crus_atom_real,
        Body_y: $hyoo_crus_atom_real,
        Bottom_edge_y: $hyoo_crus_atom_real,
        Right_edge_x: $hyoo_crus_atom_real,
        Top_edge_y: $hyoo_crus_atom_real,
        Left_edge_x: $hyoo_crus_atom_real,
        Opacity: $hyoo_crus_atom_real,
        Type: $shm_hitalama_board_block_type,
        Board: $hyoo_crus_atom_ref_to(() => $shm_hitalama_board),
        Image: $hyoo_crus_file,
        Color: $hyoo_crus_atom_str,
        Font_size: $hyoo_crus_atom_real,
        Src: $hyoo_crus_atom_str,
        Text: $hyoo_crus_text,
        Use_text_from: $hyoo_crus_atom_ref_to(() => $shm_hitalama_board_block),
        Enabled: $hyoo_crus_atom_bool,
        Range: $shm_hitalama_board_range,
        Form: $shm_hitalama_board_form,
        Form_edit: $hyoo_crus_atom_ref_to(() => $shm_hitalama_board_form),
        Table: $hyoo_crus_atom_ref_to(() => $shm_hitalama_board_table),
        Chart: $shm_hitalama_board_chart,
        Use_chart_from: $hyoo_crus_atom_ref_to(() => $shm_hitalama_board_block),
        File: $hyoo_crus_atom_ref_to(() => $shm_hitalama_file),
    }) {
        text(next) {
            return this.Text(next)?.value(next) ?? '';
        }
        color(next) {
            return this.Color(next)?.val(next) ?? '';
        }
        font_size(next) {
            return this.Font_size(next)?.val(next) ?? '';
        }
        type() {
            return this.Type()?.val() ?? '';
        }
        range() {
            return this.Range(null);
        }
        table() {
            return this.Table(null)?.ensure(this.land());
        }
        table_head(next) {
            return this.table()?.table_head(next);
        }
        table_col_types(next) {
            return this.table()?.col_types(next);
        }
        table_rows(next) {
            return this.table()?.table_rows(next);
        }
        file_str() {
            return this.File()?.remote()?.File()?.remote()?.str();
        }
    }
    __decorate([
        $mol_mem
    ], $shm_hitalama_board_block.prototype, "range", null);
    __decorate([
        $mol_mem
    ], $shm_hitalama_board_block.prototype, "table", null);
    __decorate([
        $mol_mem
    ], $shm_hitalama_board_block.prototype, "table_head", null);
    __decorate([
        $mol_mem
    ], $shm_hitalama_board_block.prototype, "table_col_types", null);
    __decorate([
        $mol_mem
    ], $shm_hitalama_board_block.prototype, "table_rows", null);
    __decorate([
        $mol_mem
    ], $shm_hitalama_board_block.prototype, "file_str", null);
    $.$shm_hitalama_board_block = $shm_hitalama_board_block;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $shm_hitalama_board_presence extends $hyoo_crus_entity.with({
        Profile: $hyoo_crus_atom_ref_to(() => $shm_hitalama_profile),
        Pos: $hyoo_crus_atom_jsan,
        Time: $hyoo_crus_atom_int,
    }) {
    }
    $.$shm_hitalama_board_presence = $shm_hitalama_board_presence;
    class $shm_hitalama_board_presence_dict extends $hyoo_crus_dict_to($hyoo_crus_atom_ref_to(() => $shm_hitalama_board_presence)) {
    }
    $.$shm_hitalama_board_presence_dict = $shm_hitalama_board_presence_dict;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $shm_hitalama_board extends $hyoo_crus_entity.with({
        Blocks: $hyoo_crus_list_ref_to(() => $shm_hitalama_board_block),
        Block_by_name: $hyoo_crus_dict_to($hyoo_crus_atom_ref_to(() => $shm_hitalama_board_block)),
        Last_color: $hyoo_crus_atom_str,
        Last_font_size: $hyoo_crus_atom_real,
        Search_statistics: $hyoo_crus_list_ref_to(() => $shm_hitalama_board_form),
        Files: $hyoo_crus_list_ref_to(() => $shm_hitalama_file),
        Tables: $hyoo_crus_list_ref_to(() => $shm_hitalama_board_table),
        Description: $hyoo_crus_atom_str,
        Presences: $hyoo_crus_atom_ref_to(() => $shm_hitalama_board_presence_dict),
    }) {
        block(ref) {
            return $hyoo_crus_glob.Node($hyoo_crus_ref(ref), $shm_hitalama_board_block);
        }
        block_add(type, pos = [0, 0], right_x = 200, bottom_x = 100, name) {
            if (name) {
                const by_name = this.Block_by_name(null)?.key(name);
                if (by_name)
                    return by_name.remote();
            }
            const block = this.Blocks(null)?.make(this.land());
            const title = name || block?.ref().description?.toString();
            this.Block_by_name(null)?.key(title, 'auto').remote(block);
            block?.title(title);
            block?.Board(null)?.remote(this);
            block?.Type(null)?.val(type);
            block?.Body_x(null)?.val(pos[0]);
            block?.Body_y(null)?.val(pos[1]);
            block?.Right_edge_x(null)?.val(right_x);
            block?.Bottom_edge_y(null)?.val(bottom_x);
            return block;
        }
        table_add(pos = [0, 0], right_x = 200, bottom_x = 100, name) {
            const block = this.block_add('table', pos, right_x, bottom_x, name);
            block?.table().Board(null)?.remote(this);
            return block;
        }
        table_novirt_add(pos = [0, 0], right_x = 200, bottom_x = 100, name) {
            const block = this.block_add('table_novirt', pos, right_x, bottom_x, name);
            block?.table().Board(null)?.remote(this);
            return block;
        }
        text_add(pos = [0, 0], text = 'text', right_x = 200, bottom_x = 100) {
            const block = this.block_add('text', pos, right_x, bottom_x);
            block?.Text(null)?.value(text);
            block?.Font_size(null)?.val(this.Last_font_size()?.val());
            block?.Color(null)?.val(this.Last_color()?.val());
            return block;
        }
        search_statistics() {
            return this.Search_statistics()?.remote_list() ?? [];
        }
        search_statistics_cut(index) {
            this.Search_statistics()?.wipe(index);
        }
        serialized() {
            return this.serialize();
        }
        get_transfer() {
            return $shm_hitalama_board_transfer.make({
                board: () => this
            });
        }
        serialize() {
            const transfer = this.get_transfer();
            return transfer.serialize_board();
        }
        serialize_blocks(blocks) {
            const transfer = this.get_transfer();
            return transfer.serialize_blocks(blocks);
        }
        deserialize(dto) {
            const transfer = this.get_transfer();
            transfer.deserialize(dto);
        }
    }
    __decorate([
        $mol_mem_key
    ], $shm_hitalama_board.prototype, "block", null);
    __decorate([
        $mol_action
    ], $shm_hitalama_board.prototype, "block_add", null);
    __decorate([
        $mol_action
    ], $shm_hitalama_board.prototype, "table_add", null);
    __decorate([
        $mol_action
    ], $shm_hitalama_board.prototype, "table_novirt_add", null);
    __decorate([
        $mol_action
    ], $shm_hitalama_board.prototype, "text_add", null);
    __decorate([
        $mol_mem
    ], $shm_hitalama_board.prototype, "search_statistics", null);
    __decorate([
        $mol_action
    ], $shm_hitalama_board.prototype, "search_statistics_cut", null);
    __decorate([
        $mol_mem
    ], $shm_hitalama_board.prototype, "serialized", null);
    __decorate([
        $mol_action
    ], $shm_hitalama_board.prototype, "get_transfer", null);
    __decorate([
        $mol_action
    ], $shm_hitalama_board.prototype, "serialize", null);
    __decorate([
        $mol_action
    ], $shm_hitalama_board.prototype, "serialize_blocks", null);
    __decorate([
        $mol_action
    ], $shm_hitalama_board.prototype, "deserialize", null);
    $.$shm_hitalama_board = $shm_hitalama_board;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $shm_hitalama_profile_key extends $mol_object {
        static key_size() {
            return 144;
        }
        static async import(serial, password) {
            const pack = $mol_base64_decode(serial);
            const closed = pack.slice(0, this.key_size());
            const salt = $mol_crypto_hash(pack.slice(this.key_size())).slice(0, 16);
            const secret = $mol_wire_sync(this.$.$mol_crypto_secret).pass(password, salt);
            const opened = await secret.decrypt(closed, salt).catch(reason => {
                console.warn(reason);
                return null;
            });
            return opened ? $mol_charset_decode(opened) : null;
        }
        static async export(auth, password, login) {
            const login_encoded = $mol_charset_encode(login);
            const salt = $mol_crypto_hash(login_encoded).slice(0, 16);
            const secret = $mol_wire_sync(this.$.$mol_crypto_secret).pass(password, salt);
            const open = this.$.$mol_charset_encode(auth);
            const closed = new Uint8Array($mol_wire_sync(secret).encrypt(open, salt));
            const pack = new Uint8Array(this.key_size() + login_encoded.byteLength);
            pack.set(closed, 0);
            pack.set(login_encoded, this.key_size());
            return this.$.$mol_base64_encode(pack);
        }
    }
    __decorate([
        $mol_action
    ], $shm_hitalama_profile_key, "import", null);
    __decorate([
        $mol_action
    ], $shm_hitalama_profile_key, "export", null);
    $.$shm_hitalama_profile_key = $shm_hitalama_profile_key;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $shm_hitalama_board_transfer_chart extends $mol_object {
        static serialize(chart) {
            const axis_details = chart.Axis_details()?.keys().map(key => [
                key?.toString(), chart.Axis_details()?.key(key).val()
            ]);
            const filters_options = chart.Filters_options()?.keys().map(key => [
                key?.toString(), chart.Filters_options()?.key(key).val()
            ]);
            return {
                axis: chart.Axis()?.val(),
                values: chart.Values()?.val(),
                groups: chart.Groups()?.val(),
                filters_enabled: chart.Filters_enabled()?.val(),
                axis_details,
                filters_options,
            };
        }
        static deserialize(chart, dto) {
            chart.Axis(dto.axis)?.val(dto.axis);
            chart.Values(dto.values)?.val(dto.values);
            chart.Groups(dto.groups)?.val(dto.groups);
            chart.Filters_enabled(dto.filters_enabled)?.val(dto.filters_enabled);
            dto.axis_details?.forEach(([key, val]) => {
                chart.Axis_details(null)?.key(key, 'auto').val(val);
            });
            dto.filters_options?.forEach(([key, val]) => {
                chart.Filters_options(null)?.key(key, 'auto').val(val);
            });
        }
    }
    __decorate([
        $mol_action
    ], $shm_hitalama_board_transfer_chart, "serialize", null);
    __decorate([
        $mol_action
    ], $shm_hitalama_board_transfer_chart, "deserialize", null);
    $.$shm_hitalama_board_transfer_chart = $shm_hitalama_board_transfer_chart;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_fetch_response extends $mol_object2 {
        native;
        constructor(native) {
            super();
            this.native = native;
        }
        status() {
            const types = ['unknown', 'inform', 'success', 'redirect', 'wrong', 'failed'];
            return types[Math.floor(this.native.status / 100)];
        }
        code() {
            return this.native.status;
        }
        message() {
            return this.native.statusText || `HTTP Error ${this.code()}`;
        }
        headers() {
            return this.native.headers;
        }
        mime() {
            return this.headers().get('content-type');
        }
        stream() {
            return this.native.body;
        }
        text() {
            const buffer = this.buffer();
            const native = this.native;
            const mime = native.headers.get('content-type') || '';
            const [, charset] = /charset=(.*)/.exec(mime) || [, 'utf-8'];
            const decoder = new TextDecoder(charset);
            return decoder.decode(buffer);
        }
        json() {
            return $mol_wire_sync(this.native).json();
        }
        blob() {
            return $mol_wire_sync(this.native).blob();
        }
        buffer() {
            return $mol_wire_sync(this.native).arrayBuffer();
        }
        xml() {
            return $mol_dom_parse(this.text(), 'application/xml');
        }
        xhtml() {
            return $mol_dom_parse(this.text(), 'application/xhtml+xml');
        }
        html() {
            return $mol_dom_parse(this.text(), 'text/html');
        }
    }
    __decorate([
        $mol_action
    ], $mol_fetch_response.prototype, "stream", null);
    __decorate([
        $mol_action
    ], $mol_fetch_response.prototype, "text", null);
    __decorate([
        $mol_action
    ], $mol_fetch_response.prototype, "xml", null);
    __decorate([
        $mol_action
    ], $mol_fetch_response.prototype, "xhtml", null);
    __decorate([
        $mol_action
    ], $mol_fetch_response.prototype, "html", null);
    $.$mol_fetch_response = $mol_fetch_response;
    class $mol_fetch extends $mol_object2 {
        static request(input, init = {}) {
            const controller = new AbortController();
            let done = false;
            const promise = fetch(input, {
                ...init,
                signal: controller.signal,
            }).finally(() => {
                done = true;
            });
            return Object.assign(promise, {
                destructor: () => {
                    if (!done && !controller.signal.aborted)
                        controller.abort();
                },
            });
        }
        static response(input, init) {
            return new $mol_fetch_response($mol_wire_sync(this).request(input, init));
        }
        static success(input, init) {
            const response = this.response(input, init);
            if (response.status() === 'success')
                return response;
            throw new Error(response.message(), { cause: response });
        }
        static stream(input, init) {
            return this.success(input, init).stream();
        }
        static text(input, init) {
            return this.success(input, init).text();
        }
        static json(input, init) {
            return this.success(input, init).json();
        }
        static blob(input, init) {
            return this.success(input, init).blob();
        }
        static buffer(input, init) {
            return this.success(input, init).buffer();
        }
        static xml(input, init) {
            return this.success(input, init).xml();
        }
        static xhtml(input, init) {
            return this.success(input, init).xhtml();
        }
        static html(input, init) {
            return this.success(input, init).html();
        }
    }
    __decorate([
        $mol_action
    ], $mol_fetch, "response", null);
    __decorate([
        $mol_action
    ], $mol_fetch, "success", null);
    __decorate([
        $mol_action
    ], $mol_fetch, "stream", null);
    __decorate([
        $mol_action
    ], $mol_fetch, "text", null);
    __decorate([
        $mol_action
    ], $mol_fetch, "json", null);
    __decorate([
        $mol_action
    ], $mol_fetch, "blob", null);
    __decorate([
        $mol_action
    ], $mol_fetch, "buffer", null);
    __decorate([
        $mol_action
    ], $mol_fetch, "xml", null);
    __decorate([
        $mol_action
    ], $mol_fetch, "xhtml", null);
    __decorate([
        $mol_action
    ], $mol_fetch, "html", null);
    $.$mol_fetch = $mol_fetch;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $shm_hitalama_board_transfer_block extends $mol_object {
        static async image_blob_uri_async(block) {
            const blob = block.Image()?.blob();
            if (!blob)
                return;
            const uri = await $mol_blob_uri(blob);
            return uri;
        }
        static serialize(block) {
            const image_blob_uri = this.$.$mol_wire_sync(this).image_blob_uri_async(block);
            const chart = block.Chart();
            const range = block.range() ? {
                value: block.range().value(),
                min: block.range().min(),
                max: block.range().max(),
                step: block.range().step(),
            } : undefined;
            return {
                ref: block.ref().description,
                title: block.title(),
                body_x: block.Body_x()?.val(),
                body_y: block.Body_y()?.val(),
                bottom_edge_y: block.Bottom_edge_y()?.val(),
                right_edge_x: block.Right_edge_x()?.val(),
                top_edge_y: block.Top_edge_y()?.val(),
                left_edge_x: block.Left_edge_x()?.val(),
                opacity: block.Opacity()?.val(),
                type: block.Type()?.val(),
                image_blob_uri,
                color: block.Color()?.val(),
                font_size: block.Font_size()?.val(),
                src: block.Src()?.val(),
                text: block.Text()?.value(),
                enabled: block.Enabled()?.val(),
                range,
                use_text_from_ref: block.Use_text_from()?.remote()?.ref().description,
                form_edit_ref: block.Form_edit()?.remote()?.ref().description,
                table_ref: block.Table()?.remote()?.ref().description,
                chart: chart ? $shm_hitalama_board_transfer_chart.serialize(chart) : undefined,
                use_chart_from_ref: block.Use_chart_from()?.remote()?.ref().description,
                file_ref: block.File()?.remote()?.ref().description,
            };
        }
        static deserialize_data(block, dto) {
            block.title(dto.title == dto.ref ? block.ref().description : dto.title);
            block.Body_x(dto.body_x)?.val(dto.body_x);
            block.Body_y(dto.body_y)?.val(dto.body_y);
            block.Bottom_edge_y(dto.bottom_edge_y)?.val(dto.bottom_edge_y);
            block.Right_edge_x(dto.right_edge_x)?.val(dto.right_edge_x);
            block.Top_edge_y(dto.top_edge_y)?.val(dto.top_edge_y);
            block.Left_edge_x(dto.left_edge_x)?.val(dto.left_edge_x);
            block.Opacity(dto.opacity)?.val(dto.opacity);
            block.Type(dto.type)?.val(dto.type);
            block.Color(null)?.val(dto.color);
            block.Font_size(null)?.val(dto.font_size);
            block.Src(dto.src)?.val(dto.src);
            block.Text(dto.text)?.value(dto.text);
            block.Enabled(dto.enabled)?.val(dto.enabled);
            if (dto.chart) {
                const chart = block.Chart(null);
                chart?.Block(null)?.remote(block);
                $shm_hitalama_board_transfer_chart.deserialize(chart, dto.chart);
            }
            if (dto.range) {
                const range = block.range();
                range.value(dto.range.value);
                range.min(dto.range.min);
                range.max(dto.range.max);
                range.step(dto.range.step);
            }
            if (dto.image_blob_uri) {
                const blob = this.$.$mol_wire_sync(this.$.$mol_fetch).blob(dto.image_blob_uri);
                block.Image(null).blob(blob);
            }
        }
        static deserialize_refs(block, dto, ref_remap) {
            if (dto.use_chart_from_ref) {
                const use_from = $hyoo_crus_glob.Node($hyoo_crus_ref(ref_remap(dto.use_chart_from_ref)), $shm_hitalama_board_block);
                block.Use_chart_from(null)?.remote(use_from);
            }
            if (dto.use_text_from_ref) {
                const use_from = $hyoo_crus_glob.Node($hyoo_crus_ref(ref_remap(dto.use_text_from_ref)), $shm_hitalama_board_block);
                block.Use_text_from(null)?.remote(use_from);
            }
            if (dto.table_ref) {
                const table = $hyoo_crus_glob.Node($hyoo_crus_ref(ref_remap(dto.table_ref)), $shm_hitalama_board_table);
                block.Table(null)?.remote(table);
            }
            if (dto.file_ref) {
                const file = $hyoo_crus_glob.Node($hyoo_crus_ref(ref_remap(dto.file_ref)), $shm_hitalama_file);
                block.File(null)?.remote(file);
            }
            if (dto.form_edit_ref) {
                const form = $hyoo_crus_glob.Node($hyoo_crus_ref(ref_remap(dto.form_edit_ref)), $shm_hitalama_board_form);
                block.Form_edit(null)?.remote(form);
            }
        }
    }
    __decorate([
        $mol_action
    ], $shm_hitalama_board_transfer_block, "serialize", null);
    __decorate([
        $mol_action
    ], $shm_hitalama_board_transfer_block, "deserialize_data", null);
    __decorate([
        $mol_action
    ], $shm_hitalama_board_transfer_block, "deserialize_refs", null);
    $.$shm_hitalama_board_transfer_block = $shm_hitalama_board_transfer_block;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $shm_hitalama_board_transfer_table extends $mol_object {
        static serialize(table) {
            return {
                ref: table.ref().description,
                head: table.Head()?.val(),
                head_method: table.Head_method()?.val(),
                rows: table.Rows()?.val(),
                rows_method: table.Rows_method()?.val(),
                col_widths: table.Col_widths()?.val(),
                col_types: table.Col_types()?.val(),
                rows_checked: table.Rows_checked()?.val(),
            };
        }
        static deserialize(table, dto) {
            table.Head(dto.head)?.val(dto.head);
            table.Head_method(dto.head_method)?.val(dto.head_method);
            table.Rows(dto.rows)?.val(dto.rows);
            table.Rows_method(dto.rows_method)?.val(dto.rows_method);
            table.Col_widths(dto.col_widths)?.val(dto.col_widths);
            table.Col_types(dto.col_types)?.val(dto.col_types);
            table.Rows_checked(dto.rows_checked)?.val(dto.rows_checked);
        }
    }
    __decorate([
        $mol_action
    ], $shm_hitalama_board_transfer_table, "serialize", null);
    __decorate([
        $mol_action
    ], $shm_hitalama_board_transfer_table, "deserialize", null);
    $.$shm_hitalama_board_transfer_table = $shm_hitalama_board_transfer_table;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $shm_hitalama_board_transfer_file extends $mol_object {
        static serialize(file) {
            const blob_uri = file.$.$mol_wire_sync(file).blob_uri_async();
            return {
                ref: file.ref().description,
                title: file.title(),
                size: file.Size()?.val(),
                blob_uri,
            };
        }
        static deserialize(file, dto) {
            file.title(dto.title);
            file.Size(null)?.val(dto.size);
            const blob = this.$.$mol_wire_sync(this.$.$mol_fetch).blob(dto.blob_uri);
            const f = file.File(null)?.ensure(file.land());
            f.blob(blob);
        }
    }
    __decorate([
        $mol_action
    ], $shm_hitalama_board_transfer_file, "serialize", null);
    __decorate([
        $mol_action
    ], $shm_hitalama_board_transfer_file, "deserialize", null);
    $.$shm_hitalama_board_transfer_file = $shm_hitalama_board_transfer_file;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $shm_hitalama_board_transfer extends $mol_object {
        board() {
            throw new Error("Not implemented");
        }
        serialize_board() {
            const table_nodes = new Set;
            const blocks = this.board().Blocks()?.remote_list().map(b => {
                const table = b.Table()?.remote();
                if (table)
                    table_nodes.add(table);
                return $shm_hitalama_board_transfer_block.serialize(b);
            });
            const tables = [...table_nodes].map(t => $shm_hitalama_board_transfer_table.serialize(t));
            const files = this.board().Files()?.remote_list().flatMap(f => {
                try {
                    return [$shm_hitalama_board_transfer_file.serialize(f)];
                }
                catch (error) {
                    if (!$mol_promise_like(error)) {
                        console.error(error);
                        return [];
                    }
                    throw error;
                }
            });
            const search_statistics = this.board().Search_statistics()?.remote_list().map(f => f.serialize());
            return {
                title: this.board().title(),
                last_color: this.board().Last_color()?.val(),
                last_font_size: this.board().Last_font_size()?.val(),
                description: this.board().Description()?.val(),
                blocks,
                tables,
                files,
                search_statistics,
            };
        }
        serialize_blocks(source) {
            const table_nodes = new Set;
            const blocks = source.map(b => {
                if (b.type() == 'table') {
                    const table = b.Table()?.remote();
                    if (table)
                        table_nodes.add(table);
                }
                return $shm_hitalama_board_transfer_block.serialize(b);
            });
            const tables = [...table_nodes].map(t => $shm_hitalama_board_transfer_table.serialize(t));
            return {
                blocks,
                tables,
            };
        }
        ref_remapping = new Map;
        ref_remap = (ref) => {
            return this.ref_remapping.get(ref) ?? ref;
        };
        deserialize(dto) {
            this.board().title(dto.title);
            this.board().Last_color(dto.last_color)?.val(dto.last_color);
            this.board().Last_font_size(dto.last_font_size)?.val(dto.last_font_size);
            this.board().Description(dto.description)?.val(dto.description);
            this.deserialize_files(dto.files);
            this.deserialize_tables(dto.tables);
            this.deserialize_statistics(dto.search_statistics);
            this.deserialize_blocks(dto.blocks);
        }
        deserialize_statistics(statistics) {
            statistics?.forEach(dto => {
                const item = this.statistic_by_dto_ref(dto.ref);
                this.ref_remapping.set(dto.ref, item?.ref().description);
                item?.deserialize_data(dto);
                item?.deserialize_refs(dto, this.ref_remapping);
            });
        }
        statistic_by_dto_ref(dto_ref) {
            const item = this.board().Search_statistics(null)?.make(this.board().land());
            return item;
        }
        block_by_dto_ref(dto_ref) {
            const block = this.board().Blocks(null)?.make(this.board().land());
            return block;
        }
        file_by_dto_ref(dto_ref) {
            const file = this.board().Files(null)?.make(this.board().land());
            return file;
        }
        table_by_dto_ref(dto_ref) {
            const table = this.board().Tables(null)?.make(this.board().land());
            return table;
        }
        deserialize_files(files) {
            files?.forEach(dto => {
                const file = this.file_by_dto_ref(dto.ref);
                this.ref_remapping.set(dto.ref, file?.ref().description);
                $shm_hitalama_board_transfer_file.deserialize(file, dto);
            });
        }
        deserialize_tables(tables) {
            tables?.forEach(dto => {
                const table = this.table_by_dto_ref(dto.ref);
                table?.Board(null)?.remote(this.board());
                this.ref_remapping.set(dto.ref, table?.ref().description);
                $shm_hitalama_board_transfer_table.deserialize(table, dto);
            });
        }
        deserialize_blocks(blocks) {
            const block_and_dto = blocks?.map(dto => {
                const block = this.block_by_dto_ref(dto.ref);
                block?.Board(null)?.remote(this.board());
                this.board().Block_by_name(null)?.key(dto.title, 'auto').remote(block);
                this.ref_remapping.set(dto.ref, block?.ref().description);
                return { block, dto };
            });
            block_and_dto?.forEach(({ block, dto }) => {
                $shm_hitalama_board_transfer_block.deserialize_data(block, dto);
            });
            block_and_dto?.forEach(({ block, dto }) => {
                $shm_hitalama_board_transfer_block.deserialize_refs(block, dto, this.ref_remap);
            });
        }
    }
    __decorate([
        $mol_action
    ], $shm_hitalama_board_transfer.prototype, "serialize_board", null);
    __decorate([
        $mol_action
    ], $shm_hitalama_board_transfer.prototype, "serialize_blocks", null);
    __decorate([
        $mol_action
    ], $shm_hitalama_board_transfer.prototype, "deserialize", null);
    __decorate([
        $mol_action
    ], $shm_hitalama_board_transfer.prototype, "deserialize_statistics", null);
    __decorate([
        $mol_mem_key
    ], $shm_hitalama_board_transfer.prototype, "statistic_by_dto_ref", null);
    __decorate([
        $mol_mem_key
    ], $shm_hitalama_board_transfer.prototype, "block_by_dto_ref", null);
    __decorate([
        $mol_mem_key
    ], $shm_hitalama_board_transfer.prototype, "file_by_dto_ref", null);
    __decorate([
        $mol_mem_key
    ], $shm_hitalama_board_transfer.prototype, "table_by_dto_ref", null);
    __decorate([
        $mol_action
    ], $shm_hitalama_board_transfer.prototype, "deserialize_files", null);
    __decorate([
        $mol_action
    ], $shm_hitalama_board_transfer.prototype, "deserialize_tables", null);
    __decorate([
        $mol_action
    ], $shm_hitalama_board_transfer.prototype, "deserialize_blocks", null);
    $.$shm_hitalama_board_transfer = $shm_hitalama_board_transfer;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $shm_hitalama_profile extends $hyoo_crus_entity.with({
        Tokens: $hyoo_crus_list_ref_to(() => $shm_hitalama_token),
        Groups_lists: $hyoo_crus_list_ref_to(() => $shm_hitalama_list),
        Projects: $hyoo_crus_list_ref_to(() => $shm_hitalama_project),
        boards: $hyoo_crus_list_ref_to(() => $shm_hitalama_board),
        Boards_removed: $hyoo_crus_list_ref_to(() => $shm_hitalama_board),
        Login: $hyoo_crus_atom_str,
        Pass_key: $hyoo_crus_atom_str,
    }) {
        static current() {
            const profile = this.$.$hyoo_crus_glob.home().hall_by($shm_hitalama_profile, { '': $hyoo_crus_rank_read });
            return profile;
        }
        password(password) {
            const pass_key = $mol_wire_sync(this.$.$shm_hitalama_profile_key).export(this.$.$hyoo_crus_auth.current().toString(), password, this.Login()?.val());
            this.Pass_key(null).val(pass_key);
        }
        auth_key_decrypt(password) {
            const pass_key = this.Pass_key()?.val();
            if (!pass_key)
                return null;
            const auth_key = $mol_wire_sync($shm_hitalama_profile_key).import(pass_key, password);
            if (!auth_key)
                return null;
            return auth_key;
        }
        enter(password) {
            const key = this.auth_key_decrypt(password);
            if (!key)
                return false;
            this.$.$hyoo_crus_auth.current(this.$.$hyoo_crus_auth.from(key));
            const home = this.$.$hyoo_crus_glob.home();
            home.Hall(null).remote(this);
            return true;
        }
    }
    __decorate([
        $mol_action
    ], $shm_hitalama_profile.prototype, "password", null);
    __decorate([
        $mol_mem_key
    ], $shm_hitalama_profile.prototype, "auth_key_decrypt", null);
    __decorate([
        $mol_action
    ], $shm_hitalama_profile.prototype, "enter", null);
    __decorate([
        $mol_mem
    ], $shm_hitalama_profile, "current", null);
    $.$shm_hitalama_profile = $shm_hitalama_profile;
    class $shm_hitalama_profile_dict extends $hyoo_crus_dict_to($hyoo_crus_atom_ref_to(() => $shm_hitalama_profile)) {
    }
    $.$shm_hitalama_profile_dict = $shm_hitalama_profile_dict;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $mol_import extends $mol_object2 {
        static module(uri) {
            $mol_wire_solid();
            return $mol_wire_sync(this).module_async(uri);
        }
        static module_async(uri) {
            return import(uri);
        }
        static script(uri) {
            $mol_wire_solid();
            return $mol_wire_sync(this).script_async(uri);
        }
        static script_async(uri) {
            const doc = $mol_dom_context.document;
            const script = doc.createElement('script');
            script.src = uri;
            doc.head.appendChild(script);
            return new Promise((done, fail) => {
                script.onload = () => done($mol_dom_context);
                script.onerror = () => fail(new Error(`Can not import ${uri}`));
            });
        }
        static style(uri) {
            return $mol_wire_sync(this).style_async(uri);
        }
        static style_async(uri) {
            const doc = $mol_dom_context.document;
            const style = doc.createElement('link');
            style.rel = 'stylesheet';
            style.href = uri;
            doc.head.appendChild(style);
            return new Promise((done, fail) => {
                style.onload = () => done(style.sheet);
                style.onerror = () => fail(new Error(`Can not import ${uri}`));
            });
        }
    }
    __decorate([
        $mol_mem_key
    ], $mol_import, "module", null);
    __decorate([
        $mol_mem_key
    ], $mol_import, "script", null);
    __decorate([
        $mol_mem_key
    ], $mol_import, "style", null);
    $.$mol_import = $mol_import;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    class $shm_hitalama_jsonp extends $mol_object {
        static _guid() {
            return $mol_guid();
        }
        static make_cb(cb, ...args) {
            const cb_name = 'jsonp_callback_' + this._guid();
            $mol_dom_context[cb_name] = (res) => {
                cb(res, ...args);
                delete $mol_dom_context[cb_name];
            };
            return cb_name;
        }
        static vk_method(method, params, cb, ...args) {
            const url_params = new URLSearchParams(params);
            const src = 'https://api.vk.com/method/' + method + '?' + url_params.toString() + '&callback=' + this.make_cb(cb, ...args);
            $mol_wire_async($mol_import).script(src);
        }
        static vk_execute(access_token, code, cb, ...args) {
            this.vk_method('execute', { access_token, code, v: '5.131' }, cb, ...args);
        }
        static vk_newFuncWall(params, cb, ...args) {
            this.vk_method('execute.newFuncWall', { ...params, hm_version: '24157', v: '5.130', timout: '60e3' }, cb, ...args);
        }
        static vk_groups_getById(params, cb, ...args) {
            this.vk_method('execute.groups_getById', { ...params, hm_version: '24157', v: '5.130', timout: '60e3' }, cb, ...args);
        }
    }
    __decorate([
        $mol_action
    ], $shm_hitalama_jsonp, "_guid", null);
    __decorate([
        $mol_action
    ], $shm_hitalama_jsonp, "make_cb", null);
    __decorate([
        $mol_action
    ], $shm_hitalama_jsonp, "vk_method", null);
    __decorate([
        $mol_action
    ], $shm_hitalama_jsonp, "vk_execute", null);
    __decorate([
        $mol_action
    ], $shm_hitalama_jsonp, "vk_newFuncWall", null);
    __decorate([
        $mol_action
    ], $shm_hitalama_jsonp, "vk_groups_getById", null);
    $.$shm_hitalama_jsonp = $shm_hitalama_jsonp;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_token_switch extends $.$shm_hitalama_token_switch {
            vk_redirect_uri() {
                const { origin, pathname } = $.$mol_dom_context.document?.location;
                return origin + pathname;
            }
            tokens() {
                return this.$.$shm_hitalama_profile.current()?.Tokens()?.remote_list() ?? [];
            }
            clear() {
                this.current_ref('');
                this.$.$shm_hitalama_profile.current()?.Tokens()?.remote_list([]);
            }
            current() {
                const id = this.current_ref();
                return id ? this.token(id) : null;
            }
            current_ref(next) {
                if (next === undefined) {
                    const tokens = this.tokens();
                    const ref = $mol_state_local.value(`${this}.current_ref()`);
                    return tokens.find(t => t.ref().description == ref) ? ref : '';
                }
                return $mol_state_local.value(`${this}.current_ref()`, next) || '';
            }
            token(ref_str) {
                return this.$.$hyoo_crus_glob.Node($hyoo_crus_ref(ref_str), $shm_hitalama_token);
            }
            tokens_refs() {
                return this.tokens().map(t => t.ref().description) ?? [];
            }
            tokens_view() {
                return this.tokens_refs().map(ref => this.Token(ref));
            }
            vk_get_user(token, token_str, user_id) {
                const code = 'return API.users.get({"user_ids":"' + user_id + '","fields":"photo_50"});';
                $shm_hitalama_jsonp.vk_execute(token_str, code, this.vk_user_receive, token);
            }
            vk_user_receive(res, token) {
                const photo_url = res.response[0].photo_50;
                token.Avatar_url(null)?.val(photo_url);
            }
            vk_token_url_parse() {
                const params = new URLSearchParams(this.$.$mol_state_arg.value('access_token') || '');
                const token_str = params.keys().next().value;
                if (!token_str)
                    return '';
                const user_id = params.get('user_id');
                const token = this.$.$shm_hitalama_profile.current()?.Tokens(null)?.make({});
                token?.Token(null)?.val(token_str);
                token?.User_id(null)?.val(user_id);
                this.$.$mol_state_arg.value('access_token', null);
                this.vk_get_user(token, token_str, user_id);
                this.current_ref(token.ref().description);
                return token_str;
            }
            vk_user_id() {
                const params = new URLSearchParams(this.$.$mol_state_arg.value('access_token') || '');
                return params.get('user_id');
            }
            vk_auth_uri() {
                return 'https://oauth.vk.com/authorize?client_id=' + this.vk_client_id() +
                    '&display=popup&redirect_uri=' +
                    this.vk_redirect_uri() +
                    '&scope=groups,wall,offline&response_type=token&v=5.131';
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_token_switch.prototype, "vk_redirect_uri", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_token_switch.prototype, "tokens", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_token_switch.prototype, "current", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_token_switch.prototype, "current_ref", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_token_switch.prototype, "token", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_token_switch.prototype, "tokens_refs", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_token_switch.prototype, "tokens_view", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_token_switch.prototype, "vk_get_user", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_token_switch.prototype, "vk_user_receive", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_token_switch.prototype, "vk_token_url_parse", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_token_switch.prototype, "vk_user_id", null);
        $$.$shm_hitalama_token_switch = $shm_hitalama_token_switch;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_token_switch, {
            Switch: {
                Option: {
                    '[mol_check_checked]': {
                        true: {
                            ['$shm_hitalama_token_view_avatar']: {
                                outline: '2px solid var(--mol_theme_current)',
                                outlineOffset: '2px',
                            },
                        },
                    },
                },
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_profile_switch) = class $shm_hitalama_profile_switch extends ($.$mol_view) {
		login(){
			return "";
		}
		Login(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ((this.login()));
			return obj;
		}
		exit(next){
			if(next !== undefined) return next;
			return null;
		}
		Exit(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ("Выйти");
			(obj.click) = (next) => ((this.exit(next)));
			return obj;
		}
		Current(){
			const obj = new this.$.$mol_pop_over();
			(obj.Anchor) = () => ((this.Login()));
			(obj.bubble_content) = () => ([(this.Exit())]);
			return obj;
		}
		Enter_link(){
			const obj = new this.$.$mol_link();
			(obj.title) = () => ("Войти");
			(obj.arg) = () => ({"section": "enter"});
			return obj;
		}
		Register_link(){
			const obj = new this.$.$mol_link();
			(obj.title) = () => ("Регистрация");
			(obj.arg) = () => ({"section": "register"});
			return obj;
		}
		profile(){
			return null;
		}
		sub(){
			return [(this.Current())];
		}
		buttons(){
			return [(this.Enter_link()), (this.Register_link())];
		}
	};
	($mol_mem(($.$shm_hitalama_profile_switch.prototype), "Login"));
	($mol_mem(($.$shm_hitalama_profile_switch.prototype), "exit"));
	($mol_mem(($.$shm_hitalama_profile_switch.prototype), "Exit"));
	($mol_mem(($.$shm_hitalama_profile_switch.prototype), "Current"));
	($mol_mem(($.$shm_hitalama_profile_switch.prototype), "Enter_link"));
	($mol_mem(($.$shm_hitalama_profile_switch.prototype), "Register_link"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_profile_switch extends $.$shm_hitalama_profile_switch {
            login() {
                return this.$.$shm_hitalama_profile.current()?.Login()?.val() ?? '';
            }
            sub() {
                return this.login() ? super.sub() : this.buttons();
            }
            exit() {
                this.$.$hyoo_crus_auth.current(this.$.$hyoo_crus_auth.grab());
            }
        }
        __decorate([
            $mol_action
        ], $shm_hitalama_profile_switch.prototype, "exit", null);
        $$.$shm_hitalama_profile_switch = $shm_hitalama_profile_switch;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_section) = class $mol_section extends ($.$mol_list) {
		title_dom_name(){
			return "h1";
		}
		Title(){
			const obj = new this.$.$mol_paragraph();
			(obj.dom_name) = () => ((this.title_dom_name()));
			(obj.title) = () => ((this.title()));
			return obj;
		}
		tools(){
			return [];
		}
		Tools(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ((this.tools()));
			return obj;
		}
		head(){
			return [(this.Title()), (this.Tools())];
		}
		Head(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ((this.head()));
			return obj;
		}
		content(){
			return [];
		}
		Content(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ((this.content()));
			return obj;
		}
		level(){
			return 1;
		}
		rows(){
			return [(this.Head()), (this.Content())];
		}
	};
	($mol_mem(($.$mol_section.prototype), "Title"));
	($mol_mem(($.$mol_section.prototype), "Tools"));
	($mol_mem(($.$mol_section.prototype), "Head"));
	($mol_mem(($.$mol_section.prototype), "Content"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_section extends $.$mol_section {
            title_dom_name() {
                return 'h' + this.level();
            }
        }
        $$.$mol_section = $mol_section;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/section/section.view.css", "[mol_section_head] {\n\tjustify-content: space-between;\n\talign-items: flex-end;\n\tflex-wrap: wrap;\n}\n\n[mol_section_title] {\n\tpadding: var(--mol_gap_text);\n\ttext-shadow: 0 0;\n\tfont-weight: normal;\n}\n\n[mol_section_title]:where(h1) {\n\tfont-size: 1.5rem;\n}\n\n[mol_section_title]:where(h2) {\n\tfont-size: 1.5rem;\n\tfont-style: italic;\n}\n\n[mol_section_title]:where(h3) {\n\tfont-size: 1.25rem;\n}\n\n[mol_section_title]:where(h4) {\n\tfont-size: 1.25rem;\n\tfont-style: italic;\n}\n\n[mol_section_title]:where(h5) {\n\tfont-size: 1rem;\n}\n\n[mol_section_title]:where(h6) {\n\tfont-size: 1rem;\n\tfont-style: italic;\n}\n");
})($ || ($ = {}));

;
	($.$mol_button_major) = class $mol_button_major extends ($.$mol_button_minor) {
		theme(){
			return "$mol_theme_base";
		}
	};


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/button/major/major.view.css", "[mol_button_major] {\n\tbackground-color: var(--mol_theme_back);\n\tcolor: var(--mol_theme_text);\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_labeler) = class $mol_labeler extends ($.$mol_list) {
		label(){
			return [(this.title())];
		}
		Label(){
			const obj = new this.$.$mol_view();
			(obj.minimal_height) = () => (32);
			(obj.sub) = () => ((this.label()));
			return obj;
		}
		content(){
			return [];
		}
		Content(){
			const obj = new this.$.$mol_view();
			(obj.minimal_height) = () => (24);
			(obj.sub) = () => ((this.content()));
			return obj;
		}
		rows(){
			return [(this.Label()), (this.Content())];
		}
	};
	($mol_mem(($.$mol_labeler.prototype), "Label"));
	($mol_mem(($.$mol_labeler.prototype), "Content"));


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/labeler/labeler.view.css", "[mol_labeler] {\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: stretch;\n\tcursor: inherit;\n}\n\n[mol_labeler_label] {\n\tmin-height: 2rem;\n\tcolor: var(--mol_theme_shade);\n\tpadding: .5rem .75rem 0;\n\tgap: 0 var(--mol_gap_block);\n\tflex-wrap: wrap;\n}\n\n[mol_labeler_content] {\n\tdisplay: flex;\n\tpadding: var(--mol_gap_text);\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_icon_account) = class $mol_icon_account extends ($.$mol_icon) {
		path(){
			return "M12,4A4,4 0 0,1 16,8A4,4 0 0,1 12,12A4,4 0 0,1 8,8A4,4 0 0,1 12,4M12,14C16.42,14 20,15.79 20,18V20H4V18C4,15.79 7.58,14 12,14Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_account_group) = class $mol_icon_account_group extends ($.$mol_icon) {
		path(){
			return "M12,5.5A3.5,3.5 0 0,1 15.5,9A3.5,3.5 0 0,1 12,12.5A3.5,3.5 0 0,1 8.5,9A3.5,3.5 0 0,1 12,5.5M5,8C5.56,8 6.08,8.15 6.53,8.42C6.38,9.85 6.8,11.27 7.66,12.38C7.16,13.34 6.16,14 5,14A3,3 0 0,1 2,11A3,3 0 0,1 5,8M19,8A3,3 0 0,1 22,11A3,3 0 0,1 19,14C17.84,14 16.84,13.34 16.34,12.38C17.2,11.27 17.62,9.85 17.47,8.42C17.92,8.15 18.44,8 19,8M5.5,18.25C5.5,16.18 8.41,14.5 12,14.5C15.59,14.5 18.5,16.18 18.5,18.25V20H5.5V18.25M0,20V18.5C0,17.11 1.89,15.94 4.45,15.6C3.86,16.28 3.5,17.22 3.5,18.25V20H0M24,20H20.5V18.25C20.5,17.22 20.14,16.28 19.55,15.6C22.11,15.94 24,17.11 24,18.5V20Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_account_group_outline) = class $mol_icon_account_group_outline extends ($.$mol_icon) {
		path(){
			return "M12,5A3.5,3.5 0 0,0 8.5,8.5A3.5,3.5 0 0,0 12,12A3.5,3.5 0 0,0 15.5,8.5A3.5,3.5 0 0,0 12,5M12,7A1.5,1.5 0 0,1 13.5,8.5A1.5,1.5 0 0,1 12,10A1.5,1.5 0 0,1 10.5,8.5A1.5,1.5 0 0,1 12,7M5.5,8A2.5,2.5 0 0,0 3,10.5C3,11.44 3.53,12.25 4.29,12.68C4.65,12.88 5.06,13 5.5,13C5.94,13 6.35,12.88 6.71,12.68C7.08,12.47 7.39,12.17 7.62,11.81C6.89,10.86 6.5,9.7 6.5,8.5C6.5,8.41 6.5,8.31 6.5,8.22C6.2,8.08 5.86,8 5.5,8M18.5,8C18.14,8 17.8,8.08 17.5,8.22C17.5,8.31 17.5,8.41 17.5,8.5C17.5,9.7 17.11,10.86 16.38,11.81C16.5,12 16.63,12.15 16.78,12.3C16.94,12.45 17.1,12.58 17.29,12.68C17.65,12.88 18.06,13 18.5,13C18.94,13 19.35,12.88 19.71,12.68C20.47,12.25 21,11.44 21,10.5A2.5,2.5 0 0,0 18.5,8M12,14C9.66,14 5,15.17 5,17.5V19H19V17.5C19,15.17 14.34,14 12,14M4.71,14.55C2.78,14.78 0,15.76 0,17.5V19H3V17.07C3,16.06 3.69,15.22 4.71,14.55M19.29,14.55C20.31,15.22 21,16.06 21,17.07V19H24V17.5C24,15.76 21.22,14.78 19.29,14.55M12,16C13.53,16 15.24,16.5 16.23,17H7.77C8.76,16.5 10.47,16 12,16Z";
		}
	};


;
"use strict";

;
	($.$shm_hitalama_group_search) = class $shm_hitalama_group_search extends ($.$mol_view) {
		search_title(){
			return "Введите ссылку на сообщество";
		}
		search_label(){
			return [(this.search_title())];
		}
		search_value(next){
			if(next !== undefined) return next;
			return "smmblog";
		}
		Group_id(){
			const obj = new this.$.$mol_string();
			(obj.value) = (next) => ((this.search_value(next)));
			return obj;
		}
		search(next){
			if(next !== undefined) return next;
			return null;
		}
		Search(){
			const obj = new this.$.$mol_button_major();
			(obj.title) = () => ("Поиск");
			(obj.click) = (next) => ((this.search(next)));
			(obj.hint) = () => ("https://vk.com/smmblog");
			return obj;
		}
		Search_label(){
			const obj = new this.$.$mol_labeler();
			(obj.label) = () => ((this.search_label()));
			(obj.content) = () => ([(this.Group_id()), (this.Search())]);
			return obj;
		}
		photo_uri(){
			return "";
		}
		Photo(){
			const obj = new this.$.$mol_image();
			(obj.uri) = () => ((this.photo_uri()));
			return obj;
		}
		name(){
			return "";
		}
		Name(){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.name()));
			return obj;
		}
		Members_count_icon(){
			const obj = new this.$.$mol_icon_account_group_outline();
			return obj;
		}
		members_count(next){
			if(next !== undefined) return next;
			return "";
		}
		Members_count(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Members_count_icon()), (this.members_count())]);
			return obj;
		}
		Name_block(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Name()), (this.Members_count())]);
			return obj;
		}
		buttons(){
			return [];
		}
		Group(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([
				(this.Photo()), 
				(this.Name_block()), 
				...(this.buttons())
			]);
			return obj;
		}
		search_result_view(){
			return [(this.Group())];
		}
		error_message(){
			return "";
		}
		token_str(){
			return "";
		}
		group_id(){
			return "";
		}
		owner_id(){
			return "";
		}
		search_result(next){
			if(next !== undefined) return next;
			return null;
		}
		reset(){
			return null;
		}
		dto(){
			return null;
		}
		search_click(){
			return null;
		}
		sub(){
			return [(this.Search_label()), ...(this.search_result_view())];
		}
		Search_error(){
			const obj = new this.$.$mol_text();
			(obj.text) = () => ((this.error_message()));
			return obj;
		}
	};
	($mol_mem(($.$shm_hitalama_group_search.prototype), "search_value"));
	($mol_mem(($.$shm_hitalama_group_search.prototype), "Group_id"));
	($mol_mem(($.$shm_hitalama_group_search.prototype), "search"));
	($mol_mem(($.$shm_hitalama_group_search.prototype), "Search"));
	($mol_mem(($.$shm_hitalama_group_search.prototype), "Search_label"));
	($mol_mem(($.$shm_hitalama_group_search.prototype), "Photo"));
	($mol_mem(($.$shm_hitalama_group_search.prototype), "Name"));
	($mol_mem(($.$shm_hitalama_group_search.prototype), "Members_count_icon"));
	($mol_mem(($.$shm_hitalama_group_search.prototype), "members_count"));
	($mol_mem(($.$shm_hitalama_group_search.prototype), "Members_count"));
	($mol_mem(($.$shm_hitalama_group_search.prototype), "Name_block"));
	($mol_mem(($.$shm_hitalama_group_search.prototype), "Group"));
	($mol_mem(($.$shm_hitalama_group_search.prototype), "search_result"));
	($mol_mem(($.$shm_hitalama_group_search.prototype), "Search_error"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_group_search extends $.$shm_hitalama_group_search {
            search_result(next) {
                return next ?? null;
            }
            reset() {
                this.search_result(null);
            }
            dto() {
                return this.search_result()?.response?.[0] ?? null;
            }
            members_count() {
                return String(this.dto()?.members_count) ?? '';
            }
            name() {
                return this.dto()?.name ?? '';
            }
            group_id() {
                return this.dto()?.id ?? '';
            }
            photo_uri() {
                return this.dto()?.photo_50 ?? '';
            }
            owner_id() {
                return this.group_id() ? '-' + this.group_id() : '';
            }
            error_message() {
                return this.search_result()?.error?.error_msg ?? '';
            }
            search() {
                const group_id = this.search_value().replace(/http\w*:\/\/vk\.(com|ru)\//, '');
                const code = 'return API.groups.getById({"group_id":"' + group_id + '","fields":"members_count"});';
                $shm_hitalama_jsonp.vk_execute(this.token_str(), code, this.search_result.bind(this));
                this.search_click();
            }
            search_result_view() {
                return this.search_result()?.response?.[0]
                    ? super.search_result_view()
                    : this.search_result()?.error
                        ? [this.Search_error()] : [];
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_group_search.prototype, "search_result", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_group_search.prototype, "reset", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_group_search.prototype, "dto", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_group_search.prototype, "members_count", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_group_search.prototype, "name", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_group_search.prototype, "group_id", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_group_search.prototype, "photo_uri", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_group_search.prototype, "owner_id", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_group_search.prototype, "error_message", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_group_search.prototype, "search", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_group_search.prototype, "search_result_view", null);
        $$.$shm_hitalama_group_search = $shm_hitalama_group_search;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_group_search, {
            Search_label: {
                Content: {
                    gap: $mol_gap.block,
                },
                flex: {
                    grow: 1,
                },
            },
            Group: {
                padding: $mol_gap.text,
                gap: $mol_gap.block,
            },
            Name_block: {
                flex: {
                    direction: 'column',
                },
            },
            Members_count: {
                gap: $mol_gap.block,
            },
            Members_count_icon: {
                width: '1.25rem',
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_table) = class $shm_hitalama_table extends ($.$mol_view) {
		head(){
			return [];
		}
		Head(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ((this.head()));
			return obj;
		}
		rows(){
			return [];
		}
		Body(){
			const obj = new this.$.$mol_list();
			(obj.sub) = () => ((this.rows()));
			return obj;
		}
		sub(){
			return [(this.Head()), (this.Body())];
		}
	};
	($mol_mem(($.$shm_hitalama_table.prototype), "Head"));
	($mol_mem(($.$shm_hitalama_table.prototype), "Body"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_table, {
            display: 'block',
            lineHeight: '1.15',
            background: {
                color: $mol_theme.back,
            },
            Head: {
                position: 'sticky',
                top: 0,
                display: 'table-header-group',
                box: {
                    shadow: [['inset', 0, '-1px', 0, 0, $mol_theme.line]],
                },
                background: {
                    color: $mol_theme.back,
                    image: 'none',
                },
                color: $mol_theme.shade,
                '>': {
                    $mol_view: {
                        display: 'table-cell',
                        padding: {
                            bottom: '0.5rem',
                            left: '0.5rem',
                            right: '0.5rem',
                        },
                    },
                },
            },
            Body: {
                display: 'table-row-group',
                '>': {
                    $mol_view: {
                        display: 'table-row',
                        ':first-child': {
                            '>': {
                                $mol_view: {
                                    padding: {
                                        top: '0.25rem',
                                    },
                                },
                            },
                        },
                        '>': {
                            $mol_view: {
                                display: 'table-cell',
                                padding: {
                                    top: '0.625rem',
                                    left: '0.5rem',
                                    right: '0.5rem',
                                },
                                verticalAlign: 'middle',
                            },
                        },
                    },
                },
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_analysis_summary) = class $shm_hitalama_analysis_summary extends ($.$shm_hitalama_table) {
		Head_photo(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([""]);
			return obj;
		}
		Head_name(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => (["Название"]);
			return obj;
		}
		Head_members_count(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => (["Подписчики"]);
			return obj;
		}
		Head_posts_counts(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => (["Посты"]);
			return obj;
		}
		Head_views(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => (["Просмотры"]);
			return obj;
		}
		Head_likes(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => (["Лайки"]);
			return obj;
		}
		Head_reposts(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => (["Репосты"]);
			return obj;
		}
		Head_comments(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => (["Комментарии"]);
			return obj;
		}
		Head_ERv(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => (["ER.v, %"]);
			return obj;
		}
		photo(id){
			return "";
		}
		owner_id(id){
			return "";
		}
		Photo(id){
			const obj = new this.$.$mol_image();
			(obj.uri) = () => ((this.photo(id)));
			(obj.title) = () => ((this.owner_id(id)));
			return obj;
		}
		name(id){
			return "";
		}
		Name(id){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.name(id)));
			return obj;
		}
		members_count(id){
			return "";
		}
		Member_counts(id){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.members_count(id)));
			return obj;
		}
		posts_counts(id){
			return "";
		}
		Posts_counts(id){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.posts_counts(id)));
			return obj;
		}
		views(id){
			return "";
		}
		Views(id){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.views(id)));
			return obj;
		}
		likes(id){
			return "";
		}
		Likes(id){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.likes(id)));
			return obj;
		}
		reposts(id){
			return "";
		}
		Reposts(id){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.reposts(id)));
			return obj;
		}
		comments(id){
			return "";
		}
		Comments(id){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.comments(id)));
			return obj;
		}
		erv(id){
			return "";
		}
		ERv(id){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.erv(id)));
			return obj;
		}
		sum_photo(){
			return "";
		}
		Sum_photo(){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.sum_photo()));
			return obj;
		}
		sum_name(){
			return "Итого";
		}
		Sum_name(){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.sum_name()));
			return obj;
		}
		sum_members_count(){
			return "";
		}
		Sum_members_count(){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.sum_members_count()));
			return obj;
		}
		sum_posts_counts(){
			return "";
		}
		Sum_posts_counts(){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.sum_posts_counts()));
			return obj;
		}
		sum_views(){
			return "";
		}
		Sum_views(){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.sum_views()));
			return obj;
		}
		sum_likes(){
			return "";
		}
		Sum_likes(){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.sum_likes()));
			return obj;
		}
		sum_reposts(){
			return "";
		}
		Sum_reposts(){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.sum_reposts()));
			return obj;
		}
		sum_comments(){
			return "";
		}
		Sum_comments(){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.sum_comments()));
			return obj;
		}
		Sum_ERv(){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ("");
			return obj;
		}
		token_str(){
			return "";
		}
		owner_ids(){
			return [];
		}
		groups_dtos(next){
			if(next !== undefined) return next;
			return null;
		}
		posts_dto_by_owner(id){
			return null;
		}
		head(){
			return [
				(this.Head_photo()), 
				(this.Head_name()), 
				(this.Head_members_count()), 
				(this.Head_posts_counts()), 
				(this.Head_views()), 
				(this.Head_likes()), 
				(this.Head_reposts()), 
				(this.Head_comments()), 
				(this.Head_ERv())
			];
		}
		Row(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([
				(this.Photo(id)), 
				(this.Name(id)), 
				(this.Member_counts(id)), 
				(this.Posts_counts(id)), 
				(this.Views(id)), 
				(this.Likes(id)), 
				(this.Reposts(id)), 
				(this.Comments(id)), 
				(this.ERv(id))
			]);
			return obj;
		}
		Sum_row(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([
				(this.Sum_photo()), 
				(this.Sum_name()), 
				(this.Sum_members_count()), 
				(this.Sum_posts_counts()), 
				(this.Sum_views()), 
				(this.Sum_likes()), 
				(this.Sum_reposts()), 
				(this.Sum_comments()), 
				(this.Sum_ERv())
			]);
			return obj;
		}
	};
	($mol_mem(($.$shm_hitalama_analysis_summary.prototype), "Head_photo"));
	($mol_mem(($.$shm_hitalama_analysis_summary.prototype), "Head_name"));
	($mol_mem(($.$shm_hitalama_analysis_summary.prototype), "Head_members_count"));
	($mol_mem(($.$shm_hitalama_analysis_summary.prototype), "Head_posts_counts"));
	($mol_mem(($.$shm_hitalama_analysis_summary.prototype), "Head_views"));
	($mol_mem(($.$shm_hitalama_analysis_summary.prototype), "Head_likes"));
	($mol_mem(($.$shm_hitalama_analysis_summary.prototype), "Head_reposts"));
	($mol_mem(($.$shm_hitalama_analysis_summary.prototype), "Head_comments"));
	($mol_mem(($.$shm_hitalama_analysis_summary.prototype), "Head_ERv"));
	($mol_mem_key(($.$shm_hitalama_analysis_summary.prototype), "Photo"));
	($mol_mem_key(($.$shm_hitalama_analysis_summary.prototype), "Name"));
	($mol_mem_key(($.$shm_hitalama_analysis_summary.prototype), "Member_counts"));
	($mol_mem_key(($.$shm_hitalama_analysis_summary.prototype), "Posts_counts"));
	($mol_mem_key(($.$shm_hitalama_analysis_summary.prototype), "Views"));
	($mol_mem_key(($.$shm_hitalama_analysis_summary.prototype), "Likes"));
	($mol_mem_key(($.$shm_hitalama_analysis_summary.prototype), "Reposts"));
	($mol_mem_key(($.$shm_hitalama_analysis_summary.prototype), "Comments"));
	($mol_mem_key(($.$shm_hitalama_analysis_summary.prototype), "ERv"));
	($mol_mem(($.$shm_hitalama_analysis_summary.prototype), "Sum_photo"));
	($mol_mem(($.$shm_hitalama_analysis_summary.prototype), "Sum_name"));
	($mol_mem(($.$shm_hitalama_analysis_summary.prototype), "Sum_members_count"));
	($mol_mem(($.$shm_hitalama_analysis_summary.prototype), "Sum_posts_counts"));
	($mol_mem(($.$shm_hitalama_analysis_summary.prototype), "Sum_views"));
	($mol_mem(($.$shm_hitalama_analysis_summary.prototype), "Sum_likes"));
	($mol_mem(($.$shm_hitalama_analysis_summary.prototype), "Sum_reposts"));
	($mol_mem(($.$shm_hitalama_analysis_summary.prototype), "Sum_comments"));
	($mol_mem(($.$shm_hitalama_analysis_summary.prototype), "Sum_ERv"));
	($mol_mem(($.$shm_hitalama_analysis_summary.prototype), "groups_dtos"));
	($mol_mem_key(($.$shm_hitalama_analysis_summary.prototype), "Row"));
	($mol_mem(($.$shm_hitalama_analysis_summary.prototype), "Sum_row"));


;
	($.$mol_ghost) = class $mol_ghost extends ($.$mol_view) {
		Sub(){
			const obj = new this.$.$mol_view();
			return obj;
		}
	};
	($mol_mem(($.$mol_ghost.prototype), "Sub"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_ghost extends $.$mol_ghost {
            dom_node_external(next) {
                return this.Sub().dom_node(next);
            }
            dom_node_actual() {
                this.dom_node();
                const node = this.Sub().dom_node_actual();
                const attr = this.attr();
                const style = this.style();
                const fields = this.field();
                $mol_dom_render_attributes(node, attr);
                $mol_dom_render_styles(node, style);
                $mol_dom_render_fields(node, fields);
                return node;
            }
            dom_tree() {
                const Sub = this.Sub();
                const node = Sub.dom_tree();
                try {
                    this.dom_node_actual();
                    this.auto();
                }
                catch (error) {
                    $mol_fail_log(error);
                }
                return node;
            }
            title() {
                return this.Sub().title();
            }
            minimal_width() {
                return this.Sub().minimal_width();
            }
            minimal_height() {
                return this.Sub().minimal_height();
            }
        }
        __decorate([
            $mol_mem
        ], $mol_ghost.prototype, "dom_node_actual", null);
        $$.$mol_ghost = $mol_ghost;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_posts) = class $shm_hitalama_posts extends ($.$mol_ghost) {
		token_str(){
			return "";
		}
		owner_id(){
			return "";
		}
		posts_data(next){
			if(next !== undefined) return next;
			return null;
		}
		dto(){
			return null;
		}
		collect(){
			return null;
		}
		pending(next){
			if(next !== undefined) return next;
			return false;
		}
		post_id(id){
			return "";
		}
		post_date(id){
			return "";
		}
		post_likes(id){
			return "";
		}
		post_reposts(id){
			return "";
		}
		post_comments(id){
			return "";
		}
		post_views(id){
			return "";
		}
	};
	($mol_mem(($.$shm_hitalama_posts.prototype), "posts_data"));
	($mol_mem(($.$shm_hitalama_posts.prototype), "pending"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_posts extends $.$shm_hitalama_posts {
            _posts_data = null;
            posts_data(next) {
                if (next) {
                    this._posts_data = next;
                    this.pending(false);
                    const owner_id = this.owner_id();
                    console.log('owner_id', owner_id, false);
                }
                return next ?? this._posts_data;
            }
            dto() {
                return this.posts_data()?.response ?? null;
            }
            post_id(n) {
                return String(this.dto()?.[1][n]) ?? '';
            }
            post_date(n) {
                const dto = this.dto();
                return dto ? new $mol_time_moment(dto[0][n] * 1000).toString('DD.MM.YYYY hh:mm') : '-';
            }
            post_likes(n) {
                return String(this.dto()?.[2][n] ?? 0);
            }
            post_reposts(n) {
                return String(this.dto()?.[3][n] ?? 0);
            }
            post_comments(n) {
                return String(this.dto()?.[4][n] ?? 0);
            }
            post_views(n) {
                return String(this.dto()?.[5][n] ?? 0);
            }
            collect() {
                this.pending(true);
                const owner_id = this.owner_id();
                console.log('owner_id', owner_id, true);
                $shm_hitalama_jsonp.vk_newFuncWall({ access_token: this.token_str(), owner_id, offset: '0', count_execute: '0' }, this.posts_data.bind(this));
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_posts.prototype, "posts_data", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_posts.prototype, "dto", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_posts.prototype, "post_id", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_posts.prototype, "post_date", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_posts.prototype, "post_likes", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_posts.prototype, "post_reposts", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_posts.prototype, "post_comments", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_posts.prototype, "post_views", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_posts.prototype, "collect", null);
        $$.$shm_hitalama_posts = $shm_hitalama_posts;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_analysis_summary extends $.$shm_hitalama_analysis_summary {
            groups_dtos(next) {
                if (next === undefined) {
                    const groups_id = this.owner_ids().map(id => id.slice(1)).join(',');
                    $mol_wire_async($shm_hitalama_jsonp).vk_groups_getById({ access_token: this.token_str(), groups_id }, this.groups_dtos.bind(this));
                    return;
                }
                const groups = new Map;
                this.owner_ids().forEach(id => {
                    const match = next?.response.find((g) => g.id == id.slice(1));
                    if (match)
                        groups.set(id, match);
                });
                return groups;
            }
            rows() {
                const rows = this.owner_ids().map(id => this.Row(id));
                return rows.length > 1 ? [...rows, this.Sum_row()] : rows;
            }
            photo(owner_id) {
                const group = this.groups_dtos()?.get(owner_id);
                return group?.photo_50 ?? '';
            }
            owner_id(owner_id) {
                return owner_id;
            }
            name(owner_id) {
                const group = this.groups_dtos()?.get(owner_id);
                return group?.name ?? '';
            }
            members_count(owner_id) {
                const group = this.groups_dtos()?.get(owner_id);
                return group?.members_count ?? '';
            }
            posts_counts(owner_id) {
                return String(this.posts_dto_by_owner(owner_id)?.[0].length) ?? '';
            }
            views(owner_id) {
                return String(sum(this.posts_dto_by_owner(owner_id)?.[5]) ?? '');
            }
            likes(owner_id) {
                return String(sum(this.posts_dto_by_owner(owner_id)?.[2]) ?? '');
            }
            reposts(owner_id) {
                return String(sum(this.posts_dto_by_owner(owner_id)?.[3]) ?? '');
            }
            comments(owner_id) {
                return String(sum(this.posts_dto_by_owner(owner_id)?.[4]) ?? '');
            }
            erv(owner_id) {
                return '1';
            }
            sum_members_count() {
                const arr = this.owner_ids().map(id => Number(this.members_count(id)));
                return String(sum(arr) ?? '');
            }
            sum_posts_counts() {
                const arr = this.owner_ids().map(id => Number(this.posts_counts(id)));
                return String(sum(arr) ?? '');
            }
            sum_views() {
                const arr = this.owner_ids().map(id => Number(this.views(id)));
                return String(sum(arr) ?? '');
            }
            sum_likes() {
                const arr = this.owner_ids().map(id => Number(this.likes(id)));
                return String(sum(arr) ?? '');
            }
            sum_reposts() {
                const arr = this.owner_ids().map(id => Number(this.reposts(id)));
                return String(sum(arr) ?? '');
            }
            sum_comments() {
                const arr = this.owner_ids().map(id => Number(this.comments(id)));
                return String(sum(arr) ?? '');
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_analysis_summary.prototype, "groups_dtos", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_analysis_summary.prototype, "photo", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_analysis_summary.prototype, "owner_id", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_analysis_summary.prototype, "name", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_analysis_summary.prototype, "members_count", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_analysis_summary.prototype, "posts_counts", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_analysis_summary.prototype, "views", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_analysis_summary.prototype, "likes", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_analysis_summary.prototype, "reposts", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_analysis_summary.prototype, "comments", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_analysis_summary.prototype, "erv", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_analysis_summary.prototype, "sum_members_count", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_analysis_summary.prototype, "sum_posts_counts", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_analysis_summary.prototype, "sum_views", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_analysis_summary.prototype, "sum_likes", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_analysis_summary.prototype, "sum_reposts", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_analysis_summary.prototype, "sum_comments", null);
        $$.$shm_hitalama_analysis_summary = $shm_hitalama_analysis_summary;
        function sum(arr) {
            return arr?.reduce((acc, v) => acc + v, 0);
        }
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_posts_multi) = class $shm_hitalama_posts_multi extends ($.$mol_ghost) {
		token_str(){
			return "";
		}
		owner_id(id, next){
			if(next !== undefined) return next;
			return "";
		}
		collect(id, next){
			return (this.Posts_by_owner(id).collect(next));
		}
		dto_by_owner(id){
			return (this.Posts_by_owner(id).dto());
		}
		posts_pending(id){
			return (this.Posts_by_owner(id).pending());
		}
		owner_ids(){
			return [];
		}
		Posts_by_owner(id){
			const obj = new this.$.$shm_hitalama_posts();
			(obj.token_str) = () => ((this.token_str()));
			(obj.owner_id) = (next) => ((this.owner_id(id)));
			return obj;
		}
		post_id(id){
			return "";
		}
		post_date(id){
			return "";
		}
		post_likes(id){
			return "";
		}
		post_reposts(id){
			return "";
		}
		post_comments(id){
			return "";
		}
		post_views(id){
			return "";
		}
	};
	($mol_mem_key(($.$shm_hitalama_posts_multi.prototype), "owner_id"));
	($mol_mem_key(($.$shm_hitalama_posts_multi.prototype), "Posts_by_owner"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_posts_multi extends $.$shm_hitalama_posts_multi {
            post_id([dto_i, i]) {
                return this.Posts_by_owner(dto_i).post_id(i);
            }
            post_date([dto_i, i]) {
                return this.Posts_by_owner(dto_i).post_date(i);
            }
            post_likes([dto_i, i]) {
                return this.Posts_by_owner(dto_i).post_likes(i);
            }
            post_reposts([dto_i, i]) {
                return this.Posts_by_owner(dto_i).post_reposts(i);
            }
            post_comments([dto_i, i]) {
                return this.Posts_by_owner(dto_i).post_comments(i);
            }
            post_views([dto_i, i]) {
                return this.Posts_by_owner(dto_i).post_views(i);
            }
        }
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_posts_multi.prototype, "post_id", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_posts_multi.prototype, "post_date", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_posts_multi.prototype, "post_likes", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_posts_multi.prototype, "post_reposts", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_posts_multi.prototype, "post_comments", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_posts_multi.prototype, "post_views", null);
        $$.$shm_hitalama_posts_multi = $shm_hitalama_posts_multi;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_posts_table) = class $shm_hitalama_posts_table extends ($.$shm_hitalama_posts_multi) {
		Head_id(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => (["Id"]);
			return obj;
		}
		Head_date(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => (["Дата и время"]);
			return obj;
		}
		Head_likes(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => (["Лайки"]);
			return obj;
		}
		Head_reposts(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => (["Репосты"]);
			return obj;
		}
		Head_comments(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => (["Комментарии"]);
			return obj;
		}
		Head_views(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => (["Просмотры"]);
			return obj;
		}
		Post_id(id){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.post_id(id)));
			return obj;
		}
		Post_date(id){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.post_date(id)));
			return obj;
		}
		Post_likes(id){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.post_likes(id)));
			return obj;
		}
		Post_reposts(id){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.post_reposts(id)));
			return obj;
		}
		Post_comments(id){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.post_comments(id)));
			return obj;
		}
		Post_views(id){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.post_views(id)));
			return obj;
		}
		Post_row(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([
				(this.Post_id(id)), 
				(this.Post_date(id)), 
				(this.Post_likes(id)), 
				(this.Post_reposts(id)), 
				(this.Post_comments(id)), 
				(this.Post_views(id))
			]);
			return obj;
		}
		posts_rows(){
			return [(this.Post_row("0"))];
		}
		Table(){
			const obj = new this.$.$shm_hitalama_table();
			(obj.head) = () => ([
				(this.Head_id()), 
				(this.Head_date()), 
				(this.Head_likes()), 
				(this.Head_reposts()), 
				(this.Head_comments()), 
				(this.Head_views())
			]);
			(obj.rows) = () => ((this.posts_rows()));
			return obj;
		}
		Sub(){
			return (this.Table());
		}
	};
	($mol_mem(($.$shm_hitalama_posts_table.prototype), "Head_id"));
	($mol_mem(($.$shm_hitalama_posts_table.prototype), "Head_date"));
	($mol_mem(($.$shm_hitalama_posts_table.prototype), "Head_likes"));
	($mol_mem(($.$shm_hitalama_posts_table.prototype), "Head_reposts"));
	($mol_mem(($.$shm_hitalama_posts_table.prototype), "Head_comments"));
	($mol_mem(($.$shm_hitalama_posts_table.prototype), "Head_views"));
	($mol_mem_key(($.$shm_hitalama_posts_table.prototype), "Post_id"));
	($mol_mem_key(($.$shm_hitalama_posts_table.prototype), "Post_date"));
	($mol_mem_key(($.$shm_hitalama_posts_table.prototype), "Post_likes"));
	($mol_mem_key(($.$shm_hitalama_posts_table.prototype), "Post_reposts"));
	($mol_mem_key(($.$shm_hitalama_posts_table.prototype), "Post_comments"));
	($mol_mem_key(($.$shm_hitalama_posts_table.prototype), "Post_views"));
	($mol_mem_key(($.$shm_hitalama_posts_table.prototype), "Post_row"));
	($mol_mem(($.$shm_hitalama_posts_table.prototype), "Table"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_posts_table extends $.$shm_hitalama_posts_table {
            posts_rows() {
                return this.owner_ids().flatMap(owner_id => {
                    const dto = this.dto_by_owner(owner_id);
                    return dto?.[0].map((_, i) => this.Post_row([owner_id, i])) ?? [];
                });
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_posts_table.prototype, "posts_rows", null);
        $$.$shm_hitalama_posts_table = $shm_hitalama_posts_table;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_gallery) = class $mol_gallery extends ($.$mol_view) {
		items(){
			return [];
		}
		side_size(id){
			return "1";
		}
		side_items(id){
			return [];
		}
		sub(){
			return (this.items());
		}
		Side(id){
			const obj = new this.$.$mol_gallery();
			(obj.style) = () => ({"flexGrow": (this.side_size(id))});
			(obj.items) = () => ((this.side_items(id)));
			return obj;
		}
	};
	($mol_mem_key(($.$mol_gallery.prototype), "Side"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_gallery extends $.$mol_gallery {
            sub() {
                const items = this.items();
                if (items.length <= 3)
                    return items;
                return [
                    this.Side(0),
                    this.Side(1),
                ];
            }
            side_items(id) {
                const items = this.items();
                const middle = items.length % 2
                    ? Math.ceil(items.length / 3)
                    : items.length / 2;
                return id
                    ? items.slice(middle)
                    : items.slice(0, middle);
            }
            side_size(id) {
                return String(this.side_items(id).length);
            }
        }
        __decorate([
            $mol_mem
        ], $mol_gallery.prototype, "sub", null);
        __decorate([
            $mol_mem_key
        ], $mol_gallery.prototype, "side_items", null);
        $$.$mol_gallery = $mol_gallery;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/gallery/gallery.view.css", "[mol_gallery] {\n\tflex-wrap: wrap;\n\tflex: 1 1 auto;\n\talign-items: stretch;\n    align-content: stretch;\n}\n");
})($ || ($ = {}));

;
	($.$mol_chart_legend) = class $mol_chart_legend extends ($.$mol_scroll) {
		graph_legends(){
			return [];
		}
		Gallery(){
			const obj = new this.$.$mol_gallery();
			(obj.items) = () => ((this.graph_legends()));
			return obj;
		}
		Graph_sample(id){
			return null;
		}
		Graph_sample_box(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Graph_sample(id))]);
			return obj;
		}
		graph_title(id){
			return "";
		}
		Graph_title(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.graph_title(id))]);
			return obj;
		}
		graphs(){
			return [];
		}
		graphs_front(){
			return [];
		}
		sub(){
			return [(this.Gallery())];
		}
		Graph_legend(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Graph_sample_box(id)), (this.Graph_title(id))]);
			return obj;
		}
	};
	($mol_mem(($.$mol_chart_legend.prototype), "Gallery"));
	($mol_mem_key(($.$mol_chart_legend.prototype), "Graph_sample_box"));
	($mol_mem_key(($.$mol_chart_legend.prototype), "Graph_title"));
	($mol_mem_key(($.$mol_chart_legend.prototype), "Graph_legend"));


;
	($.$mol_svg_group) = class $mol_svg_group extends ($.$mol_svg) {
		dom_name(){
			return "g";
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    class $mol_vector extends Array {
        get length() {
            return super.length;
        }
        constructor(...values) { super(...values); }
        map(convert, self) {
            return super.map(convert, self);
        }
        merged(patches, combine) {
            return this.map((value, index) => combine(value, patches[index]));
        }
        limited(limits) {
            return this.merged(limits, (value, [min, max]) => (value < min) ? min : (value > max) ? max : value);
        }
        added0(diff) {
            return this.map(value => value + diff);
        }
        added1(diff) {
            return this.merged(diff, (a, b) => a + b);
        }
        multed0(mult) {
            return this.map(value => value * mult);
        }
        multed1(mults) {
            return this.merged(mults, (a, b) => a * b);
        }
        powered0(mult) {
            return this.map(value => value ** mult);
        }
        expanded1(point) {
            return this.merged(point, (range, value) => range.expanded0(value));
        }
        expanded2(point) {
            return this.merged(point, (range1, range2) => {
                let next = range1;
                const Range = range1.constructor;
                if (range1[0] > range2[0])
                    next = new Range(range2[0], next.max);
                if (range1[1] < range2[1])
                    next = new Range(next.min, range2[1]);
                return next;
            });
        }
        center() {
            const Result = this[0].constructor;
            return new Result(...this[0].map((_, i) => this.reduce((sum, point) => sum + point[i], 0) / this.length));
        }
        distance() {
            let distance = 0;
            for (let i = 1; i < this.length; ++i) {
                distance += this[i - 1].reduce((sum, min, j) => sum + (min - this[i][j]) ** 2, 0) ** (1 / this[i].length);
            }
            return distance;
        }
        transponed() {
            return this[0].map((_, i) => this.map(row => row[i]));
        }
        get x() { return this[0]; }
        set x(next) { this[0] = next; }
        get y() { return this[1]; }
        set y(next) { this[1] = next; }
        get z() { return this[2]; }
        set z(next) { this[2] = next; }
    }
    $.$mol_vector = $mol_vector;
    class $mol_vector_1d extends $mol_vector {
    }
    $.$mol_vector_1d = $mol_vector_1d;
    class $mol_vector_2d extends $mol_vector {
    }
    $.$mol_vector_2d = $mol_vector_2d;
    class $mol_vector_3d extends $mol_vector {
    }
    $.$mol_vector_3d = $mol_vector_3d;
    class $mol_vector_range extends $mol_vector {
        0;
        1;
        constructor(min, max = min) {
            super(min, max);
            this[0] = min;
            this[1] = max;
        }
        get min() { return this[0]; }
        set min(next) { this[0] = next; }
        get max() { return this[1]; }
        set max(next) { this[1] = next; }
        get inversed() {
            return new this.constructor(this.max, this.min);
        }
        expanded0(value) {
            const Range = this.constructor;
            let range = this;
            if (value > range.max)
                range = new Range(range.min, value);
            if (value < range.min)
                range = new Range(value, range.max);
            return range;
        }
    }
    $.$mol_vector_range = $mol_vector_range;
    $.$mol_vector_range_full = new $mol_vector_range(Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY);
    class $mol_vector_matrix extends $mol_vector {
        added2(diff) {
            return this.merged(diff, (a, b) => a.map((a2, index) => a2 + b[index]));
        }
        multed2(diff) {
            return this.merged(diff, (a, b) => a.map((a2, index) => a2 * b[index]));
        }
    }
    $.$mol_vector_matrix = $mol_vector_matrix;
})($ || ($ = {}));

;
	($.$mol_svg_title) = class $mol_svg_title extends ($.$mol_svg) {
		dom_name(){
			return "title";
		}
		sub(){
			return [(this.title())];
		}
	};


;
"use strict";

;
	($.$mol_plot_graph) = class $mol_plot_graph extends ($.$mol_svg_group) {
		type(){
			return "solid";
		}
		color(){
			return "";
		}
		viewport_x(){
			const obj = new this.$.$mol_vector_range(Infinity, -Infinity);
			return obj;
		}
		viewport_y(){
			const obj = new this.$.$mol_vector_range(Infinity, -Infinity);
			return obj;
		}
		dimensions_pane_x(){
			const obj = new this.$.$mol_vector_range(Infinity, -Infinity);
			return obj;
		}
		dimensions_pane_y(){
			const obj = new this.$.$mol_vector_range(Infinity, -Infinity);
			return obj;
		}
		dimensions_x(){
			const obj = new this.$.$mol_vector_range(Infinity, -Infinity);
			return obj;
		}
		dimensions_y(){
			const obj = new this.$.$mol_vector_range(Infinity, -Infinity);
			return obj;
		}
		gap_x(){
			const obj = new this.$.$mol_vector_range(0, 0);
			return obj;
		}
		gap_y(){
			const obj = new this.$.$mol_vector_range(0, 0);
			return obj;
		}
		title(){
			return "";
		}
		hint(){
			return (this.title());
		}
		series_x(){
			return [];
		}
		series_y(){
			return [];
		}
		attr(){
			return {...(super.attr()), "mol_plot_graph_type": (this.type())};
		}
		style(){
			return {...(super.style()), "color": (this.color())};
		}
		viewport(){
			const obj = new this.$.$mol_vector_2d((this.viewport_x()), (this.viewport_y()));
			return obj;
		}
		shift(){
			return [0, 0];
		}
		scale(){
			return [1, 1];
		}
		cursor_position(){
			const obj = new this.$.$mol_vector_2d(NaN, NaN);
			return obj;
		}
		dimensions_pane(){
			const obj = new this.$.$mol_vector_2d((this.dimensions_pane_x()), (this.dimensions_pane_y()));
			return obj;
		}
		dimensions(){
			const obj = new this.$.$mol_vector_2d((this.dimensions_x()), (this.dimensions_y()));
			return obj;
		}
		size_real(){
			const obj = new this.$.$mol_vector_2d(0, 0);
			return obj;
		}
		gap(){
			const obj = new this.$.$mol_vector_2d((this.gap_x()), (this.gap_y()));
			return obj;
		}
		repos_x(id){
			return 0;
		}
		repos_y(id){
			return 0;
		}
		indexes(){
			return [];
		}
		points(){
			return [];
		}
		front(){
			return [];
		}
		back(){
			return [];
		}
		Hint(){
			const obj = new this.$.$mol_svg_title();
			(obj.title) = () => ((this.hint()));
			return obj;
		}
		hue(next){
			if(next !== undefined) return next;
			return +NaN;
		}
		Sample(){
			return null;
		}
	};
	($mol_mem(($.$mol_plot_graph.prototype), "viewport_x"));
	($mol_mem(($.$mol_plot_graph.prototype), "viewport_y"));
	($mol_mem(($.$mol_plot_graph.prototype), "dimensions_pane_x"));
	($mol_mem(($.$mol_plot_graph.prototype), "dimensions_pane_y"));
	($mol_mem(($.$mol_plot_graph.prototype), "dimensions_x"));
	($mol_mem(($.$mol_plot_graph.prototype), "dimensions_y"));
	($mol_mem(($.$mol_plot_graph.prototype), "gap_x"));
	($mol_mem(($.$mol_plot_graph.prototype), "gap_y"));
	($mol_mem(($.$mol_plot_graph.prototype), "viewport"));
	($mol_mem(($.$mol_plot_graph.prototype), "cursor_position"));
	($mol_mem(($.$mol_plot_graph.prototype), "dimensions_pane"));
	($mol_mem(($.$mol_plot_graph.prototype), "dimensions"));
	($mol_mem(($.$mol_plot_graph.prototype), "size_real"));
	($mol_mem(($.$mol_plot_graph.prototype), "gap"));
	($mol_mem(($.$mol_plot_graph.prototype), "Hint"));
	($mol_mem(($.$mol_plot_graph.prototype), "hue"));
	($.$mol_plot_graph_sample) = class $mol_plot_graph_sample extends ($.$mol_view) {
		type(){
			return "solid";
		}
		color(){
			return "black";
		}
		attr(){
			return {...(super.attr()), "mol_plot_graph_type": (this.type())};
		}
		style(){
			return {...(super.style()), "color": (this.color())};
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_plot_graph extends $.$mol_plot_graph {
            viewport() {
                const size = this.size_real();
                return new this.$.$mol_vector_2d(new this.$.$mol_vector_range(0, size.x), new this.$.$mol_vector_range(0, size.y));
            }
            indexes() {
                return this.series_x().map((_, i) => i);
            }
            repos_x(val) {
                return val;
            }
            repos_y(val) {
                return val;
            }
            points() {
                const [shift_x, shift_y] = this.shift();
                const [scale_x, scale_y] = this.scale();
                const series_x = this.series_x();
                const series_y = this.series_y();
                return this.indexes().map(index => {
                    let point_x = Math.round(shift_x + this.repos_x(series_x[index]) * scale_x);
                    let point_y = Math.round(shift_y + this.repos_y(series_y[index]) * scale_y);
                    point_x = Math.max(Number.MIN_SAFE_INTEGER, Math.min(point_x, Number.MAX_SAFE_INTEGER));
                    point_y = Math.max(Number.MIN_SAFE_INTEGER, Math.min(point_y, Number.MAX_SAFE_INTEGER));
                    return [point_x, point_y];
                });
            }
            series_x() {
                return this.series_y().map((val, index) => index);
            }
            dimensions() {
                let next = new this.$.$mol_vector_2d($mol_vector_range_full.inversed, $mol_vector_range_full.inversed);
                const series_x = this.series_x();
                const series_y = this.series_y();
                for (let i = 0; i < series_x.length; i++) {
                    if (series_x[i] > next.x.max)
                        next.x.max = this.repos_x(series_x[i]);
                    if (series_x[i] < next.x.min)
                        next.x.min = this.repos_x(series_x[i]);
                    if (series_y[i] > next.y.max)
                        next.y.max = this.repos_y(series_y[i]);
                    if (series_y[i] < next.y.min)
                        next.y.min = this.repos_y(series_y[i]);
                }
                return next;
            }
            color() {
                const hue = this.hue();
                return hue ? `hsl( ${hue} , 100% , 35% )` : '';
            }
            front() {
                return [this];
            }
        }
        __decorate([
            $mol_mem
        ], $mol_plot_graph.prototype, "indexes", null);
        __decorate([
            $mol_mem
        ], $mol_plot_graph.prototype, "series_x", null);
        __decorate([
            $mol_mem
        ], $mol_plot_graph.prototype, "dimensions", null);
        $$.$mol_plot_graph = $mol_plot_graph;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/plot/graph/graph.view.css", "[mol_plot_graph] {\n\tstroke: currentColor;\n}\n\n[mol_plot_graph_sample] {\n\tborder-width: 0;\n\tborder-style: solid;\n}\n\n[mol_plot_graph_type=\"dashed\"] {\n\tstroke-dasharray: 4 4;\n\tborder-style: dashed;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_chart_legend extends $.$mol_chart_legend {
            graphs_front() {
                return this.graphs().filter(graph => graph.Sample());
            }
            graph_legends() {
                return this.graphs_front().map((graph, index) => this.Graph_legend(index));
            }
            graph_title(index) {
                return this.graphs_front()[index].title();
            }
            Graph_sample(index) {
                return this.graphs_front()[index].Sample();
            }
        }
        __decorate([
            $mol_mem
        ], $mol_chart_legend.prototype, "graphs_front", null);
        $$.$mol_chart_legend = $mol_chart_legend;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/chart/legend/legend.view.css", "[mol_chart_legend] {\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tflex-direction: row;\n\tflex: 0 1 auto;\n}\n\n[mol_chart_legend_graph_legend] {\n\tdisplay: flex;\n\tjustify-content: flex-start;\n\tflex: 1 1 8rem;\n\tpadding: .5rem;\n}\n\n[mol_chart_legend_graph_title] {\n\tmargin: 0 .25rem;\n\tflex: 1 1 auto;\n}\n\n[mol_chart_legend_graph_sample_box] {\n\tposition: relative;\n\twidth: 1.5rem;\n\tflex: none;\n}\n");
})($ || ($ = {}));

;
	($.$mol_touch) = class $mol_touch extends ($.$mol_plugin) {
		event_start(next){
			if(next !== undefined) return next;
			return null;
		}
		event_move(next){
			if(next !== undefined) return next;
			return null;
		}
		event_end(next){
			if(next !== undefined) return next;
			return null;
		}
		event_leave(next){
			if(next !== undefined) return next;
			return null;
		}
		event_wheel(next){
			if(next !== undefined) return next;
			return null;
		}
		start_zoom(next){
			if(next !== undefined) return next;
			return 0;
		}
		start_distance(next){
			if(next !== undefined) return next;
			return 0;
		}
		zoom(next){
			if(next !== undefined) return next;
			return 1;
		}
		allow_draw(){
			return true;
		}
		allow_pan(){
			return true;
		}
		allow_zoom(){
			return true;
		}
		action_type(next){
			if(next !== undefined) return next;
			return "";
		}
		action_point(next){
			if(next !== undefined) return next;
			const obj = new this.$.$mol_vector_2d(NaN, NaN);
			return obj;
		}
		start_pan(next){
			if(next !== undefined) return next;
			return [0, 0];
		}
		pan(next){
			if(next !== undefined) return next;
			const obj = new this.$.$mol_vector_2d(0, 0);
			return obj;
		}
		pointer_center(){
			const obj = new this.$.$mol_vector_2d(NaN, NaN);
			return obj;
		}
		start_pos(next){
			if(next !== undefined) return next;
			return null;
		}
		swipe_precision(){
			return 16;
		}
		swipe_right(next){
			if(next !== undefined) return next;
			return null;
		}
		swipe_bottom(next){
			if(next !== undefined) return next;
			return null;
		}
		swipe_left(next){
			if(next !== undefined) return next;
			return null;
		}
		swipe_top(next){
			if(next !== undefined) return next;
			return null;
		}
		swipe_from_right(next){
			if(next !== undefined) return next;
			return null;
		}
		swipe_from_bottom(next){
			if(next !== undefined) return next;
			return null;
		}
		swipe_from_left(next){
			if(next !== undefined) return next;
			return null;
		}
		swipe_from_top(next){
			if(next !== undefined) return next;
			return null;
		}
		swipe_to_right(next){
			if(next !== undefined) return next;
			return null;
		}
		swipe_to_bottom(next){
			if(next !== undefined) return next;
			return null;
		}
		swipe_to_left(next){
			if(next !== undefined) return next;
			return null;
		}
		swipe_to_top(next){
			if(next !== undefined) return next;
			return null;
		}
		draw_start(next){
			if(next !== undefined) return next;
			return null;
		}
		draw(next){
			if(next !== undefined) return next;
			return null;
		}
		draw_end(next){
			if(next !== undefined) return next;
			return null;
		}
		style(){
			return {
				...(super.style()), 
				"touch-action": "none", 
				"overscroll-behavior": "none"
			};
		}
		event(){
			return {
				...(super.event()), 
				"pointerdown": (next) => (this.event_start(next)), 
				"pointermove": (next) => (this.event_move(next)), 
				"pointerup": (next) => (this.event_end(next)), 
				"pointerleave": (next) => (this.event_leave(next)), 
				"wheel": (next) => (this.event_wheel(next))
			};
		}
	};
	($mol_mem(($.$mol_touch.prototype), "event_start"));
	($mol_mem(($.$mol_touch.prototype), "event_move"));
	($mol_mem(($.$mol_touch.prototype), "event_end"));
	($mol_mem(($.$mol_touch.prototype), "event_leave"));
	($mol_mem(($.$mol_touch.prototype), "event_wheel"));
	($mol_mem(($.$mol_touch.prototype), "start_zoom"));
	($mol_mem(($.$mol_touch.prototype), "start_distance"));
	($mol_mem(($.$mol_touch.prototype), "zoom"));
	($mol_mem(($.$mol_touch.prototype), "action_type"));
	($mol_mem(($.$mol_touch.prototype), "action_point"));
	($mol_mem(($.$mol_touch.prototype), "start_pan"));
	($mol_mem(($.$mol_touch.prototype), "pan"));
	($mol_mem(($.$mol_touch.prototype), "pointer_center"));
	($mol_mem(($.$mol_touch.prototype), "start_pos"));
	($mol_mem(($.$mol_touch.prototype), "swipe_right"));
	($mol_mem(($.$mol_touch.prototype), "swipe_bottom"));
	($mol_mem(($.$mol_touch.prototype), "swipe_left"));
	($mol_mem(($.$mol_touch.prototype), "swipe_top"));
	($mol_mem(($.$mol_touch.prototype), "swipe_from_right"));
	($mol_mem(($.$mol_touch.prototype), "swipe_from_bottom"));
	($mol_mem(($.$mol_touch.prototype), "swipe_from_left"));
	($mol_mem(($.$mol_touch.prototype), "swipe_from_top"));
	($mol_mem(($.$mol_touch.prototype), "swipe_to_right"));
	($mol_mem(($.$mol_touch.prototype), "swipe_to_bottom"));
	($mol_mem(($.$mol_touch.prototype), "swipe_to_left"));
	($mol_mem(($.$mol_touch.prototype), "swipe_to_top"));
	($mol_mem(($.$mol_touch.prototype), "draw_start"));
	($mol_mem(($.$mol_touch.prototype), "draw"));
	($mol_mem(($.$mol_touch.prototype), "draw_end"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_touch extends $.$mol_touch {
            auto() {
                this.pointer_events();
                this.start_pan();
                this.start_pos();
                this.start_distance();
                this.start_zoom();
                this.action_type();
                this.view_rect();
            }
            pointer_events(next = []) {
                return next;
            }
            pointer_coords() {
                const events = this.pointer_events();
                const touches = events.filter(e => e.pointerType === 'touch');
                const pens = events.filter(e => e.pointerType === 'pen');
                const mouses = events.filter(e => !e.pointerType || e.pointerType === 'mouse');
                const choosen = touches.length ? touches : pens.length ? pens : mouses;
                return new $mol_vector(...choosen.map(event => this.event_coords(event)));
            }
            pointer_center() {
                const coords = this.pointer_coords();
                return coords.length ? coords.center() : new $mol_vector_2d(NaN, NaN);
            }
            event_coords(event) {
                const { left, top } = this.view_rect();
                return new $mol_vector_2d(Math.round(event.pageX - left), Math.round(event.pageY - top));
            }
            action_point() {
                const coord = this.pointer_center();
                if (!coord)
                    return null;
                const zoom = this.zoom();
                const pan = this.pan();
                return new $mol_vector_2d((coord.x - pan.x) / zoom, (coord.y - pan.y) / zoom);
            }
            event_eat(event) {
                if (event instanceof PointerEvent) {
                    const events = this.pointer_events()
                        .filter(e => e instanceof PointerEvent)
                        .filter(e => e.pointerId !== event.pointerId);
                    if (event.type !== 'pointerup' && event.type !== 'pointerleave')
                        events.push(event);
                    this.pointer_events(events);
                    const touch_count = events.filter(e => e.pointerType === 'touch').length;
                    if (this.allow_zoom() && touch_count === 2) {
                        return this.action_type('zoom');
                    }
                    if (this.action_type() === 'zoom' && touch_count === 1) {
                        return this.action_type('zoom');
                    }
                    let button;
                    (function (button) {
                        button[button["left"] = 1] = "left";
                        button[button["right"] = 2] = "right";
                        button[button["middle"] = 4] = "middle";
                    })(button || (button = {}));
                    if (events.length > 0) {
                        if (event.ctrlKey && this.allow_zoom())
                            return this.action_type('zoom');
                        if (event.buttons === button.left && this.allow_draw())
                            return this.action_type('draw');
                        if (event.buttons && this.allow_pan())
                            return this.action_type('pan');
                    }
                    return this.action_type('');
                }
                if (event instanceof WheelEvent) {
                    this.pointer_events([event]);
                    if (event.shiftKey)
                        return this.action_type('pan');
                    return this.action_type('zoom');
                }
                return this.action_type('');
            }
            event_start(event) {
                if (event.defaultPrevented)
                    return;
                this.start_pan(this.pan());
                const action_type = this.event_eat(event);
                if (!action_type)
                    return;
                const coords = this.pointer_coords();
                this.start_pos(coords.center());
                if (action_type === 'draw') {
                    this.draw_start(event);
                    return;
                }
                this.start_distance(coords.distance());
                this.start_zoom(this.zoom());
            }
            event_move(event) {
                if (event.defaultPrevented)
                    return;
                const rect = this.view_rect();
                if (!rect)
                    return;
                const start_pan = this.start_pan();
                const action_type = this.event_eat(event);
                const start_pos = this.start_pos();
                let pos = this.pointer_center();
                if (!action_type)
                    return;
                if (!start_pos)
                    return;
                if (action_type === 'draw') {
                    const distance = new $mol_vector(start_pos, pos).distance();
                    if (distance >= 4) {
                        this.draw(event);
                    }
                    return;
                }
                if (action_type === 'pan') {
                    this.dom_node().setPointerCapture(event.pointerId);
                    this.pan(new $mol_vector_2d(start_pan[0] + pos[0] - start_pos[0], start_pan[1] + pos[1] - start_pos[1]));
                }
                const precision = this.swipe_precision();
                if ((this.swipe_right !== $mol_touch.prototype.swipe_right
                    || this.swipe_from_left !== $mol_touch.prototype.swipe_from_left
                    || this.swipe_to_right !== $mol_touch.prototype.swipe_to_right)
                    && pos[0] - start_pos[0] > precision * 2
                    && Math.abs(pos[1] - start_pos[1]) < precision) {
                    this.swipe_right(event);
                }
                if ((this.swipe_left !== $mol_touch.prototype.swipe_left
                    || this.swipe_from_right !== $mol_touch.prototype.swipe_from_right
                    || this.swipe_to_left !== $mol_touch.prototype.swipe_to_left)
                    && start_pos[0] - pos[0] > precision * 2
                    && Math.abs(pos[1] - start_pos[1]) < precision) {
                    this.swipe_left(event);
                }
                if ((this.swipe_bottom !== $mol_touch.prototype.swipe_bottom
                    || this.swipe_from_top !== $mol_touch.prototype.swipe_from_top
                    || this.swipe_to_bottom !== $mol_touch.prototype.swipe_to_bottom)
                    && pos[1] - start_pos[1] > precision * 2
                    && Math.abs(pos[0] - start_pos[0]) < precision) {
                    this.swipe_bottom(event);
                }
                if ((this.swipe_top !== $mol_touch.prototype.swipe_top
                    || this.swipe_from_bottom !== $mol_touch.prototype.swipe_from_bottom
                    || this.swipe_to_top !== $mol_touch.prototype.swipe_to_top)
                    && start_pos[1] - pos[1] > precision * 2
                    && Math.abs(pos[0] - start_pos[0]) < precision) {
                    this.swipe_top(event);
                }
                if (action_type === 'zoom') {
                    const coords = this.pointer_coords();
                    const distance = coords.distance();
                    const start_distance = this.start_distance();
                    const center = coords.center();
                    const start_zoom = this.start_zoom();
                    let mult = Math.abs(distance - start_distance) < 32 ? 1 : distance / start_distance;
                    this.zoom(start_zoom * mult);
                    const pan = new $mol_vector_2d((start_pan[0] - center[0] + pos[0] - start_pos[0]) * mult + center[0], (start_pan[1] - center[1] + pos[1] - start_pos[1]) * mult + center[1]);
                    this.pan(pan);
                }
            }
            event_end(event) {
                const action = this.action_type();
                if (action === 'draw') {
                    this.draw_end(event);
                }
                this.event_leave(event);
            }
            event_leave(event) {
                this.event_eat(event);
                this.dom_node().releasePointerCapture(event.pointerId);
                this.start_pos(null);
            }
            swipe_left(event) {
                if (this.view_rect().right - this.start_pos()[0] < this.swipe_precision() * 2)
                    this.swipe_from_right(event);
                else
                    this.swipe_to_left(event);
                this.event_end(event);
            }
            swipe_right(event) {
                if (this.start_pos()[0] - this.view_rect().left < this.swipe_precision() * 2)
                    this.swipe_from_left(event);
                else
                    this.swipe_to_right(event);
                this.event_end(event);
            }
            swipe_top(event) {
                if (this.view_rect().bottom - this.start_pos()[1] < this.swipe_precision() * 2)
                    this.swipe_from_bottom(event);
                else
                    this.swipe_to_top(event);
                this.event_end(event);
            }
            swipe_bottom(event) {
                if (this.start_pos()[1] - this.view_rect().top < this.swipe_precision() * 2)
                    this.swipe_from_top(event);
                else
                    this.swipe_to_bottom(event);
                this.event_end(event);
            }
            event_wheel(event) {
                if (event.defaultPrevented)
                    return;
                if (this.pan === $mol_touch.prototype.pan && this.zoom === $mol_touch.prototype.zoom)
                    return;
                if (this.pan !== $mol_touch.prototype.pan) {
                    event.preventDefault();
                }
                const action_type = this.event_eat(event);
                if (action_type === 'zoom') {
                    const zoom_prev = this.zoom() || 0.001;
                    const zoom_next = zoom_prev * (1 - .001 * Math.min(event.deltaY, 100));
                    const mult = zoom_next / zoom_prev;
                    this.zoom(zoom_next);
                    const pan_prev = this.pan();
                    const center = this.pointer_center();
                    const pan_next = pan_prev.multed0(mult).added1(center.multed0(1 - mult));
                    this.pan(pan_next);
                }
                if (action_type === 'pan') {
                    const pan_prev = this.pan();
                    const pan_next = new $mol_vector_2d(pan_prev.x - event.deltaX, pan_prev.y - event.deltaY);
                    this.pan(pan_next);
                }
            }
        }
        __decorate([
            $mol_mem
        ], $mol_touch.prototype, "pointer_events", null);
        __decorate([
            $mol_mem
        ], $mol_touch.prototype, "pointer_coords", null);
        __decorate([
            $mol_mem
        ], $mol_touch.prototype, "pointer_center", null);
        __decorate([
            $mol_mem
        ], $mol_touch.prototype, "action_point", null);
        $$.$mol_touch = $mol_touch;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_plot_pane) = class $mol_plot_pane extends ($.$mol_svg_root) {
		gap_x(){
			const obj = new this.$.$mol_vector_range((this.gap_left()), (this.gap_right()));
			return obj;
		}
		gap_y(){
			const obj = new this.$.$mol_vector_range((this.gap_bottom()), (this.gap_top()));
			return obj;
		}
		shift_limit_x(){
			const obj = new this.$.$mol_vector_range(0, 0);
			return obj;
		}
		shift_limit_y(){
			const obj = new this.$.$mol_vector_range(0, 0);
			return obj;
		}
		scale_limit_x(){
			const obj = new this.$.$mol_vector_range(0, Infinity);
			return obj;
		}
		scale_limit_y(){
			const obj = new this.$.$mol_vector_range(0, -Infinity);
			return obj;
		}
		dimensions_x(){
			const obj = new this.$.$mol_vector_range(Infinity, -Infinity);
			return obj;
		}
		dimensions_y(){
			const obj = new this.$.$mol_vector_range(Infinity, -Infinity);
			return obj;
		}
		dimensions_viewport_x(){
			const obj = new this.$.$mol_vector_range(Infinity, -Infinity);
			return obj;
		}
		dimensions_viewport_y(){
			const obj = new this.$.$mol_vector_range(Infinity, -Infinity);
			return obj;
		}
		graphs_sorted(){
			return [];
		}
		graphs(){
			return [];
		}
		graphs_positioned(){
			return (this.graphs());
		}
		graphs_visible(){
			return (this.graphs_positioned());
		}
		zoom(next){
			if(next !== undefined) return next;
			return 1;
		}
		cursor_position(){
			return (this.Touch().pointer_center());
		}
		allow_draw(){
			return true;
		}
		allow_pan(){
			return true;
		}
		allow_zoom(){
			return true;
		}
		action_type(){
			return (this.Touch().action_type());
		}
		action_point(){
			return (this.Touch().action_point());
		}
		draw_start(next){
			if(next !== undefined) return next;
			return null;
		}
		draw(next){
			if(next !== undefined) return next;
			return null;
		}
		draw_end(next){
			if(next !== undefined) return next;
			return null;
		}
		Touch(){
			const obj = new this.$.$mol_touch();
			(obj.zoom) = (next) => ((this.zoom(next)));
			(obj.pan) = (next) => ((this.shift(next)));
			(obj.allow_draw) = () => ((this.allow_draw()));
			(obj.allow_pan) = () => ((this.allow_pan()));
			(obj.allow_zoom) = () => ((this.allow_zoom()));
			(obj.draw_start) = (next) => ((this.draw_start(next)));
			(obj.draw) = (next) => ((this.draw(next)));
			(obj.draw_end) = (next) => ((this.draw_end(next)));
			return obj;
		}
		aspect(){
			return "none";
		}
		hue_base(next){
			if(next !== undefined) return next;
			return +NaN;
		}
		hue_shift(next){
			if(next !== undefined) return next;
			return 111;
		}
		gap_hor(){
			return 48;
		}
		gap_vert(){
			return 24;
		}
		gap_left(){
			return (this.gap_hor());
		}
		gap_right(){
			return (this.gap_hor());
		}
		gap_top(){
			return (this.gap_vert());
		}
		gap_bottom(){
			return (this.gap_vert());
		}
		gap(){
			const obj = new this.$.$mol_vector_2d((this.gap_x()), (this.gap_y()));
			return obj;
		}
		shift_limit(){
			const obj = new this.$.$mol_vector_2d((this.shift_limit_x()), (this.shift_limit_y()));
			return obj;
		}
		shift_default(){
			const obj = new this.$.$mol_vector_2d(0, 0);
			return obj;
		}
		shift(next){
			if(next !== undefined) return next;
			const obj = new this.$.$mol_vector_2d(0, 0);
			return obj;
		}
		scale_limit(){
			const obj = new this.$.$mol_vector_2d((this.scale_limit_x()), (this.scale_limit_y()));
			return obj;
		}
		scale_default(){
			const obj = new this.$.$mol_vector_2d(0, 0);
			return obj;
		}
		scale(next){
			if(next !== undefined) return next;
			const obj = new this.$.$mol_vector_2d(1, -1);
			return obj;
		}
		scale_x(next){
			if(next !== undefined) return next;
			return 1;
		}
		scale_y(next){
			if(next !== undefined) return next;
			return -1;
		}
		size(){
			const obj = new this.$.$mol_vector_2d(0, 0);
			return obj;
		}
		size_real(){
			const obj = new this.$.$mol_vector_2d(1, 1);
			return obj;
		}
		dimensions(){
			const obj = new this.$.$mol_vector_2d((this.dimensions_x()), (this.dimensions_y()));
			return obj;
		}
		dimensions_viewport(){
			const obj = new this.$.$mol_vector_2d((this.dimensions_viewport_x()), (this.dimensions_viewport_y()));
			return obj;
		}
		sub(){
			return (this.graphs_sorted());
		}
		graphs_colored(){
			return (this.graphs_visible());
		}
		plugins(){
			return [...(super.plugins()), (this.Touch())];
		}
	};
	($mol_mem(($.$mol_plot_pane.prototype), "gap_x"));
	($mol_mem(($.$mol_plot_pane.prototype), "gap_y"));
	($mol_mem(($.$mol_plot_pane.prototype), "shift_limit_x"));
	($mol_mem(($.$mol_plot_pane.prototype), "shift_limit_y"));
	($mol_mem(($.$mol_plot_pane.prototype), "scale_limit_x"));
	($mol_mem(($.$mol_plot_pane.prototype), "scale_limit_y"));
	($mol_mem(($.$mol_plot_pane.prototype), "dimensions_x"));
	($mol_mem(($.$mol_plot_pane.prototype), "dimensions_y"));
	($mol_mem(($.$mol_plot_pane.prototype), "dimensions_viewport_x"));
	($mol_mem(($.$mol_plot_pane.prototype), "dimensions_viewport_y"));
	($mol_mem(($.$mol_plot_pane.prototype), "zoom"));
	($mol_mem(($.$mol_plot_pane.prototype), "draw_start"));
	($mol_mem(($.$mol_plot_pane.prototype), "draw"));
	($mol_mem(($.$mol_plot_pane.prototype), "draw_end"));
	($mol_mem(($.$mol_plot_pane.prototype), "Touch"));
	($mol_mem(($.$mol_plot_pane.prototype), "hue_base"));
	($mol_mem(($.$mol_plot_pane.prototype), "hue_shift"));
	($mol_mem(($.$mol_plot_pane.prototype), "gap"));
	($mol_mem(($.$mol_plot_pane.prototype), "shift_limit"));
	($mol_mem(($.$mol_plot_pane.prototype), "shift_default"));
	($mol_mem(($.$mol_plot_pane.prototype), "shift"));
	($mol_mem(($.$mol_plot_pane.prototype), "scale_limit"));
	($mol_mem(($.$mol_plot_pane.prototype), "scale_default"));
	($mol_mem(($.$mol_plot_pane.prototype), "scale"));
	($mol_mem(($.$mol_plot_pane.prototype), "scale_x"));
	($mol_mem(($.$mol_plot_pane.prototype), "scale_y"));
	($mol_mem(($.$mol_plot_pane.prototype), "size"));
	($mol_mem(($.$mol_plot_pane.prototype), "size_real"));
	($mol_mem(($.$mol_plot_pane.prototype), "dimensions"));
	($mol_mem(($.$mol_plot_pane.prototype), "dimensions_viewport"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_plot_pane extends $.$mol_plot_pane {
            dimensions() {
                const graphs = this.graphs();
                let next = new this.$.$mol_vector_2d($mol_vector_range_full.inversed, $mol_vector_range_full.inversed);
                for (let graph of graphs) {
                    next = next.expanded2(graph.dimensions());
                }
                return next;
            }
            size() {
                const dims = this.dimensions();
                return new this.$.$mol_vector_2d((dims.x.max - dims.x.min) || 1, (dims.y.max - dims.y.min) || 1);
            }
            graph_hue(index) {
                return (360 + (this.hue_base() + this.hue_shift() * index) % 360) % 360;
            }
            graphs_colored() {
                const graphs = this.graphs_visible();
                for (let index = 0; index < graphs.length; index++) {
                    graphs[index].hue(this.graph_hue(index));
                }
                return graphs;
            }
            size_real() {
                const rect = this.view_rect();
                if (!rect)
                    return new this.$.$mol_vector_2d(1, 1);
                return new this.$.$mol_vector_2d(rect.width, rect.height);
            }
            view_box() {
                const size = this.size_real();
                return `0 0 ${size.x} ${size.y}`;
            }
            scale_limit() {
                const { x: { max: right }, y: { max: top } } = super.scale_limit();
                const gap = this.gap();
                const size = this.size();
                const real = this.size_real();
                const left = +(real.x - gap.x.min - gap.x.max) / size.x;
                const bottom = -(real.y - gap.y.max - gap.y.min) / size.y;
                return new this.$.$mol_vector_2d(new this.$.$mol_vector_range(left, right), new this.$.$mol_vector_range(top, bottom));
            }
            scale_default() {
                const limits = this.scale_limit();
                return new $mol_vector_2d(limits.x.min, limits.y.max);
            }
            scale(next) {
                if (next === undefined) {
                    if (!this.graph_touched)
                        return this.scale_default();
                    next = $mol_mem_cached(() => this.scale()) ?? this.scale_default();
                }
                this.graph_touched = true;
                return next.limited(this.scale_limit());
            }
            scale_x(next) {
                return this.scale(next === undefined
                    ? undefined
                    : new $mol_vector_2d(next, this.scale().y)).x;
            }
            scale_y(next) {
                return this.scale(next === undefined
                    ? undefined
                    : new $mol_vector_2d(this.scale().x, next)).y;
            }
            shift_limit() {
                const dims = this.dimensions();
                const [scale_x, scale_y] = this.scale();
                const size = this.size_real();
                const gap = this.gap();
                const left = gap.x.min - dims.x.min * scale_x;
                const right = size.x - gap.x.max - dims.x.max * scale_x;
                const top = gap.y.max - dims.y.max * scale_y;
                const bottom = size.y - gap.y.min - dims.y.min * scale_y;
                return new this.$.$mol_vector_2d(new this.$.$mol_vector_range(right, left), new this.$.$mol_vector_range(bottom, top));
            }
            shift_default() {
                const limits = this.shift_limit();
                return new $mol_vector_2d(limits.x.min, limits.y.min);
            }
            graph_touched = false;
            shift(next) {
                if (next === undefined) {
                    if (!this.graph_touched)
                        return this.shift_default();
                    next = $mol_mem_cached(() => this.shift()) ?? this.shift_default();
                }
                this.graph_touched = true;
                return next.limited(this.shift_limit());
            }
            reset(event) {
                this.graph_touched = false;
                this.scale(this.scale_default());
                this.shift(this.shift_default());
            }
            graphs_visible() {
                const viewport = this.dimensions_viewport();
                const size_real = this.size_real();
                const max_x = (viewport.x.max - viewport.x.min) / size_real.x;
                const max_y = (viewport.y.max - viewport.y.min) / size_real.y;
                return this.graphs_positioned().filter(graph => {
                    const dims = graph.dimensions();
                    if (dims.x.min > dims.x.max)
                        return true;
                    if (dims.y.min > dims.y.max)
                        return true;
                    const size_x = dims.x.max - dims.x.min;
                    const size_y = dims.y.max - dims.y.min;
                    if ((size_x || size_y) && size_x < max_x && size_y < max_y)
                        return false;
                    if (dims.x.min > viewport.x.max)
                        return false;
                    if (dims.x.max < viewport.x.min)
                        return false;
                    if (dims.y.min > viewport.y.max)
                        return false;
                    if (dims.y.max < viewport.y.min)
                        return false;
                    return true;
                });
            }
            graphs_positioned() {
                const graphs = this.graphs();
                for (let graph of graphs) {
                    graph.shift = () => this.shift();
                    graph.scale = () => this.scale();
                    graph.dimensions_pane = () => this.dimensions_viewport();
                    graph.viewport = () => this.viewport();
                    graph.size_real = () => this.size_real();
                    graph.cursor_position = () => this.cursor_position();
                    graph.gap = () => this.gap();
                }
                return graphs;
            }
            dimensions_viewport() {
                const shift = this.shift().multed0(-1);
                const scale = this.scale().powered0(-1);
                return this.viewport().map((range, i) => range.added0(shift[i]).multed0(scale[i]).sort((a, b) => a - b));
            }
            viewport() {
                const size = this.size_real();
                return new this.$.$mol_vector_2d(new this.$.$mol_vector_range(0, size.x), new this.$.$mol_vector_range(0, size.y));
            }
            graphs_sorted() {
                const graphs = this.graphs_colored();
                const sorted = [];
                for (let graph of graphs)
                    sorted.push(...graph.back());
                for (let graph of graphs)
                    sorted.push(...graph.front());
                return sorted;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_plot_pane.prototype, "dimensions", null);
        __decorate([
            $mol_mem
        ], $mol_plot_pane.prototype, "size", null);
        __decorate([
            $mol_mem
        ], $mol_plot_pane.prototype, "graphs_colored", null);
        __decorate([
            $mol_mem
        ], $mol_plot_pane.prototype, "scale_limit", null);
        __decorate([
            $mol_mem
        ], $mol_plot_pane.prototype, "scale", null);
        __decorate([
            $mol_mem
        ], $mol_plot_pane.prototype, "shift_limit", null);
        __decorate([
            $mol_mem
        ], $mol_plot_pane.prototype, "shift_default", null);
        __decorate([
            $mol_mem
        ], $mol_plot_pane.prototype, "shift", null);
        __decorate([
            $mol_mem
        ], $mol_plot_pane.prototype, "graphs_visible", null);
        __decorate([
            $mol_mem
        ], $mol_plot_pane.prototype, "graphs_positioned", null);
        __decorate([
            $mol_mem
        ], $mol_plot_pane.prototype, "dimensions_viewport", null);
        __decorate([
            $mol_mem
        ], $mol_plot_pane.prototype, "viewport", null);
        __decorate([
            $mol_mem
        ], $mol_plot_pane.prototype, "graphs_sorted", null);
        $$.$mol_plot_pane = $mol_plot_pane;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/plot/pane/pane.view.css", "[mol_plot_pane] {\n\tcolor: var(--mol_theme_control);\n\tflex: 1 1 auto;\n\talign-self: stretch;\n\tstroke-width: 2px;\n\tuser-select: none;\n}\n");
})($ || ($ = {}));

;
	($.$mol_chart) = class $mol_chart extends ($.$mol_view) {
		Legend(){
			const obj = new this.$.$mol_chart_legend();
			(obj.graphs) = () => ((this.graphs_colored()));
			return obj;
		}
		zoom(next){
			return (this.Plot().scale_x(next));
		}
		graphs_colored(){
			return (this.Plot().graphs_colored());
		}
		hue_base(){
			return 210;
		}
		hue_shift(){
			return 163;
		}
		Plot(){
			const obj = new this.$.$mol_plot_pane();
			(obj.zoom) = (next) => ((this.zoom(next)));
			(obj.gap_left) = () => ((this.gap_left()));
			(obj.gap_right) = () => ((this.gap_right()));
			(obj.gap_bottom) = () => ((this.gap_bottom()));
			(obj.gap_top) = () => ((this.gap_top()));
			(obj.graphs) = () => ((this.graphs()));
			(obj.hue_base) = () => ((this.hue_base()));
			(obj.hue_shift) = () => ((this.hue_shift()));
			return obj;
		}
		gap_hor(){
			return 48;
		}
		gap_vert(){
			return 24;
		}
		gap_left(){
			return (this.gap_hor());
		}
		gap_right(){
			return (this.gap_hor());
		}
		gap_bottom(){
			return (this.gap_vert());
		}
		gap_top(){
			return (this.gap_vert());
		}
		graphs(){
			return [];
		}
		sub(){
			return [(this.Legend()), (this.Plot())];
		}
	};
	($mol_mem(($.$mol_chart.prototype), "Legend"));
	($mol_mem(($.$mol_chart.prototype), "Plot"));


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/chart/chart.view.css", "[mol_chart] {\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-self: stretch;\n\tflex: 1 1 auto;\n}\n\n[mol_chart_plot] {\n\tflex: 1 0 50%;\n\tmargin: .5rem;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_plot_line) = class $mol_plot_line extends ($.$mol_plot_graph) {
		curve(){
			return "";
		}
		threshold(){
			return 1;
		}
		spacing(){
			return 2;
		}
		color_fill(){
			return "none";
		}
		dom_name(){
			return "path";
		}
		attr(){
			return {...(super.attr()), "d": (this.curve())};
		}
		sub(){
			return [(this.Hint())];
		}
		Sample(){
			const obj = new this.$.$mol_plot_graph_sample();
			(obj.color) = () => ((this.color()));
			(obj.type) = () => ((this.type()));
			return obj;
		}
	};
	($mol_mem(($.$mol_plot_line.prototype), "Sample"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_plot_line extends $.$mol_plot_line {
            sub() {
                return this.hint() ? super.sub() : [];
            }
            indexes() {
                const threshold = this.threshold();
                const { x: { min: viewport_left, max: viewport_right }, y: { min: viewport_bottom, max: viewport_top }, } = this.viewport();
                const [shift_x, shift_y] = this.shift();
                const [scale_x, scale_y] = this.scale();
                const indexes = [];
                let last = new $mol_vector_2d(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);
                let last_zone = new $mol_vector_2d(0, 0);
                const series_x = this.series_x();
                const series_y = this.series_y();
                const zone_of = (point) => new $mol_vector_2d(point.x < viewport_left ? -1
                    : point.x > viewport_right ? 1
                        : 0, point.y < viewport_bottom ? -1
                    : point.y > viewport_top ? 1
                        : 0);
                for (let i = 0; i < series_x.length - 1; i++) {
                    const scaled = new $mol_vector_2d(Math.round(shift_x + this.repos_x(series_x[i]) * scale_x), Math.round(shift_y + this.repos_y(series_y[i]) * scale_y));
                    if (Math.abs(scaled.x - last.x) < threshold
                        && Math.abs(scaled.y - last.y) < threshold)
                        continue;
                    const zone = zone_of(scaled);
                    last = scaled;
                    if (zone.x !== 0 && zone.x === last_zone.x || zone.y !== 0 && zone.y === last_zone.y) {
                        continue;
                    }
                    if (last_zone.x !== 0 || last_zone.y !== 0) {
                        indexes.push(i - 1);
                    }
                    last_zone = zone;
                    indexes.push(i);
                }
                indexes.push(series_x.length - 1);
                return indexes;
            }
            curve() {
                const points = this.points();
                if (points.length === 0)
                    return '';
                const main = points.map(point => `L ${point.join(' ')}`).join(' ');
                return `M ${points[0].join(' ')} ${main}`;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_plot_line.prototype, "indexes", null);
        $$.$mol_plot_line = $mol_plot_line;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/plot/line/line.view.css", "[mol_plot_line] {\n\tfill: none;\n\tstroke-linejoin: round;\n}\n\n[mol_plot_line_sample] {\n\theight: 0;\n\tleft: 0;\n\tright: 0;\n\tbottom: 0;\n\tborder-width: 2px 0 0;\n\tposition: absolute;\n\ttop: .75em;\n\ttransform: translateY(-50%);\n}\n");
})($ || ($ = {}));

;
	($.$mol_plot_dot) = class $mol_plot_dot extends ($.$mol_plot_graph) {
		diameter(){
			return 8;
		}
		curve(){
			return "";
		}
		Curve(){
			const obj = new this.$.$mol_svg_path();
			(obj.geometry) = () => ((this.curve()));
			return obj;
		}
		points_max(){
			return +Infinity;
		}
		aspect(){
			return 1;
		}
		style(){
			return {...(super.style()), "stroke-width": (this.diameter())};
		}
		sub(){
			return [(this.Hint()), (this.Curve())];
		}
		Sample(){
			const obj = new this.$.$mol_plot_graph_sample();
			(obj.color) = () => ((this.color()));
			return obj;
		}
	};
	($mol_mem(($.$mol_plot_dot.prototype), "Curve"));
	($mol_mem(($.$mol_plot_dot.prototype), "Sample"));


;
"use strict";
var $;
(function ($) {
    const mask = 0b11111_11111_11111;
    function $mol_coord_pack(high, low) {
        return (high << 17 >>> 2) | (low & mask);
    }
    $.$mol_coord_pack = $mol_coord_pack;
    function $mol_coord_high(pack) {
        return pack << 2 >> 17;
    }
    $.$mol_coord_high = $mol_coord_high;
    function $mol_coord_low(pack) {
        return (pack << 17) >> 17;
    }
    $.$mol_coord_low = $mol_coord_low;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_plot_dot extends $.$mol_plot_dot {
            filled() {
                return new Set();
            }
            indexes() {
                const radius = this.diameter() / 2;
                const points_max = this.points_max();
                const viewport = this.viewport();
                const viewport_left = viewport.x.min - radius;
                const viewport_right = viewport.x.max + radius;
                const viewport_bottom = viewport.y.min - radius;
                const viewport_top = viewport.y.max + radius;
                const [shift_x, shift_y] = this.shift();
                const [scale_x, scale_y] = this.scale();
                let last_x = Number.NEGATIVE_INFINITY;
                let last_y = Number.NEGATIVE_INFINITY;
                let spacing = 0;
                let filled = this.filled();
                let indexes;
                const series_x = this.series_x();
                const series_y = this.series_y();
                do {
                    indexes = [];
                    for (let i = 0; i < series_x.length; i++) {
                        const point_x = this.repos_x(series_x[i]);
                        const point_y = this.repos_y(series_y[i]);
                        const scaled_x = Math.round(shift_x + point_x * scale_x);
                        const scaled_y = Math.round(shift_y + point_y * scale_y);
                        if (Math.abs(scaled_x - last_x) < radius
                            && Math.abs(scaled_y - last_y) < radius)
                            continue;
                        last_x = scaled_x;
                        last_y = scaled_y;
                        if (scaled_x < viewport_left)
                            continue;
                        if (scaled_y < viewport_bottom)
                            continue;
                        if (scaled_x > viewport_right)
                            continue;
                        if (scaled_y > viewport_top)
                            continue;
                        if (spacing !== 0) {
                            const key = $mol_coord_pack(Math.round(point_x * scale_x / spacing) * spacing, Math.round(point_y * scale_y / spacing) * spacing);
                            if (filled.has(key))
                                continue;
                            filled.add(key);
                        }
                        indexes.push(i);
                        if (indexes.length > points_max)
                            break;
                    }
                    spacing += Math.ceil(radius);
                    filled.clear();
                } while (indexes.length > points_max);
                return indexes;
            }
            curve() {
                const points = this.points();
                if (points.length === 0)
                    return '';
                const diameter = this.diameter();
                const aspect = this.aspect();
                const shift_y = Math.max(0, Math.floor((aspect - 1) * diameter / 2));
                const shift_x = Math.max(0, Math.floor((1 / aspect - 1) * diameter / 2));
                const size_y = Math.max(0, Math.ceil((aspect - 1) * diameter));
                const size_x = Math.max(0, Math.ceil((1 / aspect - 1) * diameter));
                return points.map(point => `M ${point[0] - shift_x} ${point[1] - shift_y} l ${size_x} ${size_y}`).join(' ');
            }
        }
        __decorate([
            $mol_mem
        ], $mol_plot_dot.prototype, "filled", null);
        __decorate([
            $mol_mem
        ], $mol_plot_dot.prototype, "indexes", null);
        $$.$mol_plot_dot = $mol_plot_dot;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/plot/dot/dot.view.css", "[mol_plot_dot] {\n\tstroke-linecap: round;\n\tfill: none;\n}\n\n[mol_plot_dot_sample] {\n\twidth: .5rem;\n\theight: .5rem;\n\tborder-radius: 1rem;\n\tbackground: currentColor;\n\tposition: absolute;\n\ttop: .75em;\n\tleft: 50%;\n\ttransform: translate(-50%, -50%);\n}\n");
})($ || ($ = {}));

;
	($.$mol_plot_group) = class $mol_plot_group extends ($.$mol_plot_graph) {
		graphs(){
			return [];
		}
		graphs_enriched(){
			return (this.graphs());
		}
		graph_samples(){
			return [];
		}
		sub(){
			return (this.graphs_enriched());
		}
		Sample(){
			const obj = new this.$.$mol_plot_graph_sample();
			(obj.sub) = () => ((this.graph_samples()));
			return obj;
		}
	};
	($mol_mem(($.$mol_plot_group.prototype), "Sample"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_plot_group extends $.$mol_plot_group {
            graphs_enriched() {
                const graphs = this.graphs();
                for (let graph of graphs) {
                    graph.shift = () => this.shift();
                    graph.scale = () => this.scale();
                    graph.size_real = () => this.size_real();
                    graph.hue = () => this.hue();
                    graph.series_x = () => this.series_x();
                    graph.series_y = () => this.series_y();
                    graph.dimensions_pane = () => this.dimensions_pane();
                    graph.viewport = () => this.viewport();
                    graph.cursor_position = () => this.cursor_position();
                    graph.gap = () => this.gap();
                    graph.title = () => this.title();
                    graph.repos_x = val => this.repos_x(val);
                    graph.repos_y = val => this.repos_y(val);
                }
                return graphs;
            }
            dimensions() {
                const graphs = this.graphs_enriched();
                let next = new this.$.$mol_vector_2d($mol_vector_range_full.inversed, $mol_vector_range_full.inversed);
                for (let graph of graphs) {
                    next = next.expanded2(graph.dimensions());
                }
                return next;
            }
            graph_samples() {
                return this.graphs_enriched().map(graph => graph.Sample());
            }
            back() {
                const graphs = this.graphs_enriched();
                const next = [];
                for (let graph of graphs)
                    next.push(...graph.back());
                return next;
            }
            front() {
                const graphs = this.graphs_enriched();
                const next = [];
                for (let graph of graphs)
                    next.push(...graph.front());
                return next;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_plot_group.prototype, "graphs_enriched", null);
        __decorate([
            $mol_mem
        ], $mol_plot_group.prototype, "dimensions", null);
        __decorate([
            $mol_mem
        ], $mol_plot_group.prototype, "graph_samples", null);
        $$.$mol_plot_group = $mol_plot_group;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_svg_rect) = class $mol_svg_rect extends ($.$mol_svg) {
		width(){
			return "0";
		}
		height(){
			return "0";
		}
		pos_x(){
			return "";
		}
		pos_y(){
			return "";
		}
		dom_name(){
			return "rect";
		}
		pos(){
			return [];
		}
		attr(){
			return {
				...(super.attr()), 
				"width": (this.width()), 
				"height": (this.height()), 
				"x": (this.pos_x()), 
				"y": (this.pos_y())
			};
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_svg_rect extends $.$mol_svg_rect {
            pos_x() {
                return this.pos()[0];
            }
            pos_y() {
                return this.pos()[1];
            }
        }
        $$.$mol_svg_rect = $mol_svg_rect;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_svg_text) = class $mol_svg_text extends ($.$mol_svg) {
		pos_x(){
			return "";
		}
		pos_y(){
			return "";
		}
		align(){
			return "middle";
		}
		align_hor(){
			return (this.align());
		}
		align_vert(){
			return "baseline";
		}
		text(){
			return "";
		}
		dom_name(){
			return "text";
		}
		pos(){
			return [];
		}
		attr(){
			return {
				...(super.attr()), 
				"x": (this.pos_x()), 
				"y": (this.pos_y()), 
				"text-anchor": (this.align_hor()), 
				"alignment-baseline": (this.align_vert())
			};
		}
		sub(){
			return [(this.text())];
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_svg_text extends $.$mol_svg_text {
            pos_x() {
                return this.pos()[0];
            }
            pos_y() {
                return this.pos()[1];
            }
        }
        $$.$mol_svg_text = $mol_svg_text;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/svg/text/text.view.css", "[mol_svg_text] {\n\tfill: currentColor;\n\tstroke: none;\n}\n");
})($ || ($ = {}));

;
	($.$mol_plot_ruler) = class $mol_plot_ruler extends ($.$mol_plot_graph) {
		background_x(){
			return "0";
		}
		background_y(){
			return "0";
		}
		background_width(){
			return "100%";
		}
		background_height(){
			return "14";
		}
		Background(){
			const obj = new this.$.$mol_svg_rect();
			(obj.pos_x) = () => ((this.background_x()));
			(obj.pos_y) = () => ((this.background_y()));
			(obj.width) = () => ((this.background_width()));
			(obj.height) = () => ((this.background_height()));
			return obj;
		}
		curve(){
			return "";
		}
		Curve(){
			const obj = new this.$.$mol_svg_path();
			(obj.geometry) = () => ((this.curve()));
			return obj;
		}
		labels_formatted(){
			return [];
		}
		title_pos_x(){
			return "0";
		}
		title_pos_y(){
			return "100%";
		}
		title_align(){
			return "start";
		}
		Title(){
			const obj = new this.$.$mol_svg_text();
			(obj.pos_x) = () => ((this.title_pos_x()));
			(obj.pos_y) = () => ((this.title_pos_y()));
			(obj.align) = () => ((this.title_align()));
			(obj.text) = () => ((this.title()));
			return obj;
		}
		label_pos_x(id){
			return "";
		}
		label_pos_y(id){
			return "";
		}
		label_pos(id){
			return [(this.label_pos_x(id)), (this.label_pos_y(id))];
		}
		label_text(id){
			return "";
		}
		label_align(){
			return "";
		}
		step(){
			return 0;
		}
		scale_axis(){
			return 1;
		}
		scale_step(){
			return 1;
		}
		shift_axis(){
			return 1;
		}
		dimensions_axis(){
			const obj = new this.$.$mol_vector_range(Infinity, -Infinity);
			return obj;
		}
		viewport_axis(){
			const obj = new this.$.$mol_vector_range(Infinity, -Infinity);
			return obj;
		}
		axis_points(){
			return [];
		}
		normalize(next){
			if(next !== undefined) return next;
			return 0;
		}
		precision(){
			return 1;
		}
		sub(){
			return [
				(this.Background()), 
				(this.Curve()), 
				(this.labels_formatted()), 
				(this.Title())
			];
		}
		Label(id){
			const obj = new this.$.$mol_svg_text();
			(obj.pos) = () => ((this.label_pos(id)));
			(obj.text) = () => ((this.label_text(id)));
			(obj.align) = () => ((this.label_align()));
			return obj;
		}
	};
	($mol_mem(($.$mol_plot_ruler.prototype), "Background"));
	($mol_mem(($.$mol_plot_ruler.prototype), "Curve"));
	($mol_mem(($.$mol_plot_ruler.prototype), "Title"));
	($mol_mem(($.$mol_plot_ruler.prototype), "dimensions_axis"));
	($mol_mem(($.$mol_plot_ruler.prototype), "viewport_axis"));
	($mol_mem(($.$mol_plot_ruler.prototype), "normalize"));
	($mol_mem_key(($.$mol_plot_ruler.prototype), "Label"));


;
"use strict";
var $;
(function ($) {
    function $mol_math_round_expand(val, gap = 1) {
        if (val === 0)
            return 0;
        const val_abs = Math.abs(val);
        const val_sign = val ? Math.round(val / val_abs) : 0;
        const digits = Math.floor(Math.log(val_abs) / Math.log(10));
        const precission = Math.pow(10, digits - gap);
        const val_expanded = precission * Math.ceil(val_abs / precission);
        return val_sign * val_expanded;
    }
    $.$mol_math_round_expand = $mol_math_round_expand;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_plot_ruler extends $.$mol_plot_ruler {
            labels_formatted() {
                return this.axis_points().map((point, index) => this.Label(index));
            }
            step() {
                const scale = Math.abs(this.scale_step());
                const dims = this.dimensions_axis();
                const range = dims.max - dims.min;
                const min_width = (Math.abs(Math.log10(range)) + 2) * 15;
                const size = $mol_math_round_expand(range, -1);
                const count = Math.max(1, Math.pow(10, Math.floor(Math.log(size * scale / min_width) / Math.log(10))));
                let step = size / count;
                const step_max = min_width * 2 / scale;
                if (step > step_max)
                    step /= 2;
                if (step > step_max)
                    step /= 2;
                return Math.max(step, Math.abs(dims.min) / 1e10, Math.abs(dims.max) / 1e10);
            }
            snap_to_grid(coord) {
                const viewport = this.viewport_axis();
                const scale = this.scale_axis();
                const shift = this.shift_axis();
                const step = this.step();
                const val = Math.round(coord / step) * step;
                if (scale == 0)
                    return val;
                const step_scaled = step * scale;
                const scaled = val * scale + shift;
                let count = 0;
                if (scaled < viewport.min)
                    count = (scaled - viewport.min) / step_scaled;
                if (scaled > viewport.max)
                    count = (scaled - viewport.max) / step_scaled;
                return val - Math.floor(count) * step;
            }
            axis_points() {
                const dims = this.dimensions_axis();
                const start = this.snap_to_grid(dims.min);
                const end = this.snap_to_grid(dims.max);
                const step = this.step();
                const next = [];
                for (let val = start; val <= end; val += step) {
                    next.push(val);
                }
                return next;
            }
            precision() {
                const step = this.step();
                return Math.max(0, Math.min(15, (step - Math.floor(step)).toString().length - 2));
            }
            label_text(index) {
                const point = this.axis_points()[index];
                return point.toFixed(this.precision());
            }
            font_size() {
                return this.Background().font_size();
            }
            back() {
                return [this.Curve()];
            }
            front() {
                return [
                    ...this.labels_formatted(),
                    this.Title()
                ];
            }
        }
        __decorate([
            $mol_mem
        ], $mol_plot_ruler.prototype, "step", null);
        __decorate([
            $mol_mem
        ], $mol_plot_ruler.prototype, "axis_points", null);
        __decorate([
            $mol_mem
        ], $mol_plot_ruler.prototype, "precision", null);
        $$.$mol_plot_ruler = $mol_plot_ruler;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/plot/ruler/ruler.view.css", "[mol_plot_ruler_curve] {\n\tcolor: var(--mol_theme_line);\n\tstroke-width: 1px;\n\tstroke: currentColor;\n}\n\n[mol_plot_ruler_label] {\n\tcolor: var(--mol_theme_text);\n\ttext-shadow: 0 -1px var(--mol_theme_back), 0px 1px var(--mol_theme_back);\n}\n\n[mol_plot_ruler_title] {\n\tcolor: var(--mol_theme_shade);\n\tbackground-color: var(--mol_theme_back);\n\ttext-shadow: 0 -1px var(--mol_theme_back), 0px 1px var(--mol_theme_back);\n}\n\n[mol_plot_ruler_background] {\n\tstroke: none;\n\tfill: var(--mol_theme_back);\n\topacity: 0.8;\n}\n");
})($ || ($ = {}));

;
	($.$mol_plot_ruler_vert) = class $mol_plot_ruler_vert extends ($.$mol_plot_ruler) {
		title_align(){
			return "end";
		}
		label_align(){
			return "end";
		}
		title_pos_y(){
			return "14";
		}
		label_pos_x(id){
			return (this.title_pos_x());
		}
		background_height(){
			return "100%";
		}
		background_width(){
			return (this.title_pos_x());
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_plot_ruler_vert extends $.$mol_plot_ruler_vert {
            dimensions_axis() {
                return this.dimensions_pane().y;
            }
            viewport_axis() {
                return new this.$.$mol_vector_range(0, this.size_real().y);
            }
            scale_axis() {
                return this.scale()[1];
            }
            scale_step() {
                return -this.scale()[1];
            }
            shift_axis() {
                return this.shift()[1];
            }
            curve() {
                const [, shift] = this.shift();
                const [, scale] = this.scale();
                return this.axis_points().map(point => {
                    let scaled = Math.round(point * scale + shift);
                    scaled = Math.max(Number.MIN_SAFE_INTEGER, Math.min(scaled, Number.MAX_SAFE_INTEGER));
                    return `M 0 ${scaled} H 2000`;
                }).join(' ');
            }
            title_pos_x() {
                return String(this.gap().x.min);
            }
            label_pos_y(index) {
                return (this.axis_points()[index] * this.scale()[1] + this.shift()[1]).toFixed(3);
            }
        }
        $$.$mol_plot_ruler_vert = $mol_plot_ruler_vert;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/plot/ruler/vert/vert.view.css", "[mol_plot_ruler_vert_label] {\n\ttransform: translateY( 4px );\n}\n");
})($ || ($ = {}));

;
	($.$mol_plot_ruler_hor) = class $mol_plot_ruler_hor extends ($.$mol_plot_ruler) {
		title_align(){
			return "start";
		}
		label_align(){
			return "middle";
		}
		title_pos_x(){
			return "0";
		}
		title_pos_y(){
			return "100%";
		}
		label_pos_y(id){
			return (this.title_pos_y());
		}
		background_width(){
			return "100%";
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_plot_ruler_hor extends $.$mol_plot_ruler_hor {
            dimensions_axis() {
                return this.dimensions_pane().x;
            }
            viewport_axis() {
                return new this.$.$mol_vector_range(0, this.size_real().x);
            }
            scale_axis() {
                return this.scale()[0];
            }
            scale_step() {
                return this.scale()[0];
            }
            shift_axis() {
                return this.shift()[0];
            }
            curve() {
                const [shift] = this.shift();
                const [scale] = this.scale();
                return this.axis_points().map(point => {
                    let scaled = Math.round(point * scale + shift);
                    scaled = Math.max(Number.MIN_SAFE_INTEGER, Math.min(scaled, Number.MAX_SAFE_INTEGER));
                    return `M ${scaled} 1000 V 0`;
                }).join(' ');
            }
            label_pos_x(index) {
                return (this.axis_points()[index] * this.scale()[0] + this.shift()[0]).toFixed(3);
            }
            background_y() {
                return String(this.size_real()[1] - this.font_size());
            }
            title_pos_y() {
                return String(this.size_real()[1]);
            }
            background_height() {
                return String(this.font_size());
            }
        }
        $$.$mol_plot_ruler_hor = $mol_plot_ruler_hor;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/plot/ruler/hor/hor.view.css", "[mol_plot_ruler_hor_label] {\n\ttransform: translateY( -4px );\n}\n\n[mol_plot_ruler_hor_title] {\n\ttransform: translateY( -4px );\n}\n");
})($ || ($ = {}));

;
	($.$mol_plot_mark_hor) = class $mol_plot_mark_hor extends ($.$mol_plot_ruler_hor) {
		labels(){
			return [];
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_plot_mark_hor extends $.$mol_plot_mark_hor {
            series_x() {
                return this.labels().map((val, index) => index);
            }
            labels() {
                return this.series_x().map(val => String(val));
            }
            visible_indexes() {
                const series_x = this.series_x();
                const labels = this.labels();
                const [shift_x,] = this.shift();
                const [scale_x,] = this.scale();
                let step = this.step() * scale_x;
                const [[viewport_left, viewport_right]] = this.viewport();
                const size_x = viewport_right - viewport_left;
                const font_size = this.font_size();
                let indexes;
                let labels_width;
                do {
                    indexes = [];
                    labels_width = 0;
                    let last = 0;
                    let current = 0;
                    for (let i = 0; i < series_x.length; i++) {
                        const point_x = series_x[i];
                        const scaled_x = (shift_x + point_x * scale_x);
                        if (scaled_x < viewport_left)
                            continue;
                        if (scaled_x > viewport_right)
                            continue;
                        if (current === 0)
                            current = scaled_x;
                        if (scaled_x < current) {
                            last = i;
                            continue;
                        }
                        indexes.push(i);
                        current += step;
                        last = 0;
                        labels_width += font_size * (labels[i].length + 1);
                        if (labels_width > size_x)
                            break;
                    }
                    if (last !== 0) {
                        indexes.push(last);
                        labels_width += font_size * (labels[last].length + 1);
                    }
                    step *= 1.5;
                } while (labels_width > size_x && indexes.length > 2);
                return indexes;
            }
            curve() {
                const [shift] = this.shift();
                const [scale] = this.scale();
                const series_x = this.series_x();
                return this.visible_indexes().map(index => {
                    const scaled = series_x[index] * scale + shift;
                    return `M ${scaled.toFixed(3)} 1000 V 0`;
                }).join(' ');
            }
            label_text(index) {
                return this.labels()[index];
            }
            labels_formatted() {
                return this.visible_indexes().map(index => this.Label(index));
            }
            label_pos_x(index) {
                return (this.series_x()[index] * this.scale()[0] + this.shift()[0]).toFixed(3);
            }
            label_pos_y(index) {
                return this.title_pos_y();
            }
        }
        __decorate([
            $mol_mem
        ], $mol_plot_mark_hor.prototype, "series_x", null);
        __decorate([
            $mol_mem
        ], $mol_plot_mark_hor.prototype, "labels", null);
        __decorate([
            $mol_mem
        ], $mol_plot_mark_hor.prototype, "visible_indexes", null);
        $$.$mol_plot_mark_hor = $mol_plot_mark_hor;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/plot/mark/hor/hor.view.css", "[mol_plot_mark_hor_curve] {\n\tcolor: var(--mol_theme_line);\n\tstroke-width: .1%;\n\tstroke: currentColor;\n\tpointer-events: none;\n}\n\n[mol_plot_mark_hor_label] {\n\tcolor: var(--mol_theme_text);\n\ttransform: translateY( -4px );\n}\n\n[mol_plot_mark_hor_title] {\n\tcolor: var(--mol_theme_shade);\n\ttransform: translateY( -4px );\n}\n");
})($ || ($ = {}));

;
	($.$mol_svg_text_box) = class $mol_svg_text_box extends ($.$mol_svg_group) {
		box_width(){
			return "0.5rem";
		}
		box_height(){
			return "1rem";
		}
		box_pos_x(){
			return (this.pos_x());
		}
		box_pos_y(){
			return "0";
		}
		Back(){
			const obj = new this.$.$mol_svg_rect();
			(obj.width) = () => ((this.box_width()));
			(obj.height) = () => ((this.box_height()));
			(obj.pos) = () => ([(this.box_pos_x()), (this.box_pos_y())]);
			return obj;
		}
		pos_x(){
			return "0";
		}
		pos_y(){
			return "100%";
		}
		align(){
			return "start";
		}
		text(){
			return "";
		}
		Text(){
			const obj = new this.$.$mol_svg_text();
			(obj.pos) = () => ([(this.pos_x()), (this.pos_y())]);
			(obj.align) = () => ((this.align()));
			(obj.sub) = () => ([(this.text())]);
			return obj;
		}
		font_size(){
			return 16;
		}
		width(){
			return 0;
		}
		sub(){
			return [(this.Back()), (this.Text())];
		}
	};
	($mol_mem(($.$mol_svg_text_box.prototype), "Back"));
	($mol_mem(($.$mol_svg_text_box.prototype), "Text"));


;
"use strict";
var $;
(function ($) {
    let canvas;
    function $mol_font_canvas(next = canvas) {
        if (!next)
            next = $mol_dom_context.document.createElement('canvas').getContext('2d');
        return canvas = next;
    }
    $.$mol_font_canvas = $mol_font_canvas;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_font_measure(font, text) {
        const canvas = $mol_font_canvas();
        canvas.font = font;
        return canvas.measureText(text).width;
    }
    $.$mol_font_measure = $mol_font_measure;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_svg_text_box extends $.$mol_svg_text_box {
            box_width() {
                return `${this.width()}px`;
            }
            width() {
                return $mol_font_measure(this.font_size() + 'px ' + this.font_family(), this.text());
            }
            box_pos_x() {
                const align = this.align();
                if (align === 'end')
                    return `calc(${this.pos_x()} - ${this.width()})`;
                if (align === 'middle')
                    return `calc(${this.pos_x()} - ${Math.round(this.width() / 2)})`;
                return this.pos_x();
            }
            box_pos_y() {
                return `calc(${this.pos_y()} - ${this.font_size() - 2})`;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_svg_text_box.prototype, "width", null);
        $$.$mol_svg_text_box = $mol_svg_text_box;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/svg/text/box/box.view.css", "[mol_svg_text_box_back] {\n\tstroke: none;\n\tfill: var(--mol_theme_back);\n\ttransition: none;\n}\n");
})($ || ($ = {}));

;
	($.$mol_plot_mark_cross) = class $mol_plot_mark_cross extends ($.$mol_plot_graph) {
		dimensions_x(){
			const obj = new this.$.$mol_vector_range(Infinity, -Infinity);
			return obj;
		}
		dimensions_y(){
			const obj = new this.$.$mol_vector_range(Infinity, -Infinity);
			return obj;
		}
		curve(){
			return "";
		}
		Curve(){
			const obj = new this.$.$mol_svg_path();
			(obj.geometry) = () => ((this.curve()));
			return obj;
		}
		title_x_pos_x(){
			return "0";
		}
		title_x_pos_y(){
			return "100%";
		}
		title_x(){
			return "";
		}
		Label_x(){
			const obj = new this.$.$mol_svg_text_box();
			(obj.pos_x) = () => ((this.title_x_pos_x()));
			(obj.pos_y) = () => ((this.title_x_pos_y()));
			(obj.text) = () => ((this.title_x()));
			return obj;
		}
		title_y_pos_x(){
			return "0";
		}
		title_y_pos_y(){
			return "0";
		}
		title_y(){
			return "";
		}
		Label_y(){
			const obj = new this.$.$mol_svg_text_box();
			(obj.pos_x) = () => ((this.title_y_pos_x()));
			(obj.pos_y) = () => ((this.title_y_pos_y()));
			(obj.text) = () => ((this.title_y()));
			return obj;
		}
		labels(){
			return [];
		}
		title_x_gap(){
			return 4;
		}
		title_y_gap(){
			return 22;
		}
		threshold(){
			return 16;
		}
		graphs(){
			return [];
		}
		dimensions(){
			const obj = new this.$.$mol_vector_2d((this.dimensions_x()), (this.dimensions_y()));
			return obj;
		}
		sub(){
			return [
				(this.Curve()), 
				(this.Label_x()), 
				(this.Label_y())
			];
		}
	};
	($mol_mem(($.$mol_plot_mark_cross.prototype), "dimensions_x"));
	($mol_mem(($.$mol_plot_mark_cross.prototype), "dimensions_y"));
	($mol_mem(($.$mol_plot_mark_cross.prototype), "Curve"));
	($mol_mem(($.$mol_plot_mark_cross.prototype), "Label_x"));
	($mol_mem(($.$mol_plot_mark_cross.prototype), "Label_y"));
	($mol_mem(($.$mol_plot_mark_cross.prototype), "dimensions"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_plot_mark_cross extends $.$mol_plot_mark_cross {
            nearest() {
                let delta = this.threshold() ** 2;
                const [cursor_x, cursor_y] = this.cursor_position();
                if (Number.isNaN(cursor_x) || Number.isNaN(cursor_y))
                    return null;
                const graphs = this.graphs();
                let index = 0;
                let graph = null;
                const [shift_x, shift_y] = this.shift();
                const [scale_x, scale_y] = this.scale();
                for (let current of graphs) {
                    const indexes = current.indexes();
                    const series_x = current.series_x();
                    const series_y = current.series_y();
                    for (let i of indexes) {
                        const point_x = shift_x + series_x[i] * scale_x;
                        const point_y = shift_y + series_y[i] * scale_y;
                        const diff = (point_x - cursor_x) ** 2 + (point_y - cursor_y) ** 2;
                        if (diff < delta) {
                            delta = diff;
                            index = i;
                            graph = current;
                        }
                    }
                }
                if (!graph)
                    return null;
                const value = new $mol_vector_2d(graph.series_x()[index], graph.series_y()[index]);
                const scaled = new $mol_vector_2d(shift_x + value.x * scale_x, shift_y + value.y * scale_y);
                return { value, scaled, index };
            }
            curve() {
                const nearest = this.nearest();
                if (!nearest)
                    return '';
                return `M ${nearest.scaled.x.toFixed(3)} 1000 V 0 M 0 ${nearest.scaled.y.toFixed(3)} H 2000`;
            }
            title_x() {
                const nearest = this.nearest();
                if (!nearest)
                    return '';
                const labels = this.labels();
                if (labels.length > nearest.index)
                    return labels[nearest.index];
                return String(nearest.value.x);
            }
            title_x_pos_x() {
                const nearest = this.nearest();
                if (!nearest)
                    return '0';
                const width = this.Label_x().width();
                return (nearest.scaled.x - width / 2).toFixed(3);
            }
            title_x_pos_y() {
                const nearest = this.nearest();
                if (!nearest)
                    return '0';
                const pos = this.size_real().y - this.title_x_gap();
                return pos.toFixed(3);
            }
            title_y() {
                const nearest = this.nearest();
                if (!nearest)
                    return '';
                return String(nearest.value.y);
            }
            title_y_pos_y() {
                const nearest = this.nearest();
                if (!nearest)
                    return '0';
                return nearest.scaled.y.toFixed(3);
            }
            title_y_pos_x() {
                const nearest = this.nearest();
                if (!nearest)
                    return '0';
                const pos = this.title_y_gap();
                return pos.toFixed(3);
            }
        }
        __decorate([
            $mol_mem
        ], $mol_plot_mark_cross.prototype, "nearest", null);
        $$.$mol_plot_mark_cross = $mol_plot_mark_cross;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/plot/mark/cross/cross.view.css", "[mol_plot_mark_cross_curve] {\n\tcolor: var(--mol_theme_focus);\n\tstroke-width: 1px;\n\tstroke: currentColor;\n\tpointer-events: none;\n}\n\n[mol_plot_mark_cross_label_x], [mol_plot_mark_cross_label_y] {\n\tcolor: var(--mol_theme_focus);\n\tpointer-events: none;\n}\n\n[mol_plot_mark_cross_label_y] {\n\ttransform: translateY( 4px );\n}\n");
})($ || ($ = {}));

;
	($.$shm_hitalama_posts_plots_chart) = class $shm_hitalama_posts_plots_chart extends ($.$mol_chart) {
		Title(){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.title()));
			return obj;
		}
		group_name(id){
			return "";
		}
		series_y(id){
			return [];
		}
		Line(id){
			const obj = new this.$.$mol_plot_line();
			return obj;
		}
		Dot(id){
			const obj = new this.$.$mol_plot_dot();
			return obj;
		}
		Group(id){
			const obj = new this.$.$mol_plot_group();
			(obj.title) = () => ((this.group_name(id)));
			(obj.series_y) = () => ((this.series_y(id)));
			(obj.graphs) = () => ([(this.Line(id)), (this.Dot(id))]);
			return obj;
		}
		groups(){
			return [(this.Group("0"))];
		}
		Vert_ruler(){
			const obj = new this.$.$mol_plot_ruler_vert();
			return obj;
		}
		labels(){
			return [];
		}
		Marker_hor(){
			const obj = new this.$.$mol_plot_mark_hor();
			(obj.labels) = () => ((this.labels()));
			return obj;
		}
		Marker_cross(){
			const obj = new this.$.$mol_plot_mark_cross();
			(obj.labels) = () => ((this.labels()));
			(obj.graphs) = () => ([(this.Line())]);
			return obj;
		}
		group_ids(){
			return [];
		}
		sub(){
			return [
				(this.Title()), 
				(this.Legend()), 
				(this.Plot())
			];
		}
		graphs(){
			return [
				...(this.groups()), 
				(this.Vert_ruler()), 
				(this.Marker_hor()), 
				(this.Marker_cross())
			];
		}
	};
	($mol_mem(($.$shm_hitalama_posts_plots_chart.prototype), "Title"));
	($mol_mem_key(($.$shm_hitalama_posts_plots_chart.prototype), "Line"));
	($mol_mem_key(($.$shm_hitalama_posts_plots_chart.prototype), "Dot"));
	($mol_mem_key(($.$shm_hitalama_posts_plots_chart.prototype), "Group"));
	($mol_mem(($.$shm_hitalama_posts_plots_chart.prototype), "Vert_ruler"));
	($mol_mem(($.$shm_hitalama_posts_plots_chart.prototype), "Marker_hor"));
	($mol_mem(($.$shm_hitalama_posts_plots_chart.prototype), "Marker_cross"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_posts_plots_chart extends $.$shm_hitalama_posts_plots_chart {
            groups() {
                return this.group_ids().flatMap(owner_id => this.Group(owner_id));
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_posts_plots_chart.prototype, "groups", null);
        $$.$shm_hitalama_posts_plots_chart = $shm_hitalama_posts_plots_chart;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_posts_plots_chart, {
            flex: {
                basis: '30rem',
            },
            Title: {
                padding: $mol_gap.text,
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_posts_plots) = class $shm_hitalama_posts_plots extends ($.$shm_hitalama_posts_multi) {
		group_name(id){
			return "";
		}
		views(id){
			return [];
		}
		labels(){
			return [];
		}
		Views(){
			const obj = new this.$.$shm_hitalama_posts_plots_chart();
			(obj.title) = () => ("Количество просмотров");
			(obj.group_ids) = () => ((this.owner_ids()));
			(obj.group_name) = (id) => ((this.group_name(id)));
			(obj.series_y) = (id) => ((this.views(id)));
			(obj.labels) = () => ((this.labels()));
			return obj;
		}
		posts(id){
			return [];
		}
		Posts(){
			const obj = new this.$.$shm_hitalama_posts_plots_chart();
			(obj.title) = () => ("Количество постов");
			(obj.group_ids) = () => ((this.owner_ids()));
			(obj.group_name) = (id) => ((this.group_name(id)));
			(obj.series_y) = (id) => ((this.posts(id)));
			(obj.labels) = () => ((this.labels()));
			return obj;
		}
		likes(id){
			return [];
		}
		Likes(){
			const obj = new this.$.$shm_hitalama_posts_plots_chart();
			(obj.title) = () => ("Количество лайков");
			(obj.group_ids) = () => ((this.owner_ids()));
			(obj.group_name) = (id) => ((this.group_name(id)));
			(obj.series_y) = (id) => ((this.likes(id)));
			(obj.labels) = () => ((this.labels()));
			return obj;
		}
		reposts(id){
			return [];
		}
		Reposts(){
			const obj = new this.$.$shm_hitalama_posts_plots_chart();
			(obj.title) = () => ("Количество репостов");
			(obj.group_ids) = () => ((this.owner_ids()));
			(obj.group_name) = (id) => ((this.group_name(id)));
			(obj.series_y) = (id) => ((this.reposts(id)));
			(obj.labels) = () => ((this.labels()));
			return obj;
		}
		comments(id){
			return [];
		}
		Comments(){
			const obj = new this.$.$shm_hitalama_posts_plots_chart();
			(obj.title) = () => ("Количество комментариев");
			(obj.group_ids) = () => ((this.owner_ids()));
			(obj.group_name) = (id) => ((this.group_name(id)));
			(obj.series_y) = (id) => ((this.comments(id)));
			(obj.labels) = () => ((this.labels()));
			return obj;
		}
		Charts(){
			const obj = new this.$.$mol_list();
			(obj.sub) = () => ([
				(this.Views()), 
				(this.Posts()), 
				(this.Likes()), 
				(this.Reposts()), 
				(this.Comments())
			]);
			return obj;
		}
		Sub(){
			return (this.Charts());
		}
	};
	($mol_mem(($.$shm_hitalama_posts_plots.prototype), "Views"));
	($mol_mem(($.$shm_hitalama_posts_plots.prototype), "Posts"));
	($mol_mem(($.$shm_hitalama_posts_plots.prototype), "Likes"));
	($mol_mem(($.$shm_hitalama_posts_plots.prototype), "Reposts"));
	($mol_mem(($.$shm_hitalama_posts_plots.prototype), "Comments"));
	($mol_mem(($.$shm_hitalama_posts_plots.prototype), "Charts"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_posts_plots extends $.$shm_hitalama_posts_plots {
            traversed() {
                let min = new $mol_time_moment().valueOf() / 1000;
                const indexes = new Map;
                const posts_count = new Map;
                this.owner_ids().forEach(id => {
                    const dto = this.dto_by_owner(id);
                    dto?.[0].forEach((time, index) => {
                        const time_str = (new $mol_time_moment(time * 1000)).toString('DD.MM.YY');
                        indexes.set(id + ':' + time_str, index);
                        posts_count.set(id + ':' + time_str, (posts_count.get(id + ':' + time_str) ?? 0) + 1);
                        if (time < min) {
                            min = time;
                        }
                    });
                });
                const moments = [];
                let max = (new $mol_time_moment().valueOf() / 1000);
                for (let time = min; time < max; time += 86400) {
                    moments.push((new $mol_time_moment(time * 1000)).toString('DD.MM.YY'));
                }
                return { indexes, moments, posts_count };
            }
            moments() {
                return this.traversed().moments;
            }
            labels() {
                return this.moments();
            }
            likes(owner_id) {
                const indexes = this.traversed().indexes;
                const dto = this.dto_by_owner(owner_id);
                return this.traversed().moments.map(t => {
                    return dto?.[2]?.[indexes.get(owner_id + ':' + t)] ?? 0;
                });
            }
            posts(owner_id) {
                const posts_count = this.traversed().posts_count;
                return this.traversed().moments.map(t => posts_count.get(owner_id + ':' + t));
            }
            reposts(owner_id) {
                const indexes = this.traversed().indexes;
                const dto = this.dto_by_owner(owner_id);
                return this.traversed().moments.map(t => dto?.[3]?.[indexes.get(owner_id + ':' + t)] ?? 0);
            }
            comments(owner_id) {
                const indexes = this.traversed().indexes;
                const dto = this.dto_by_owner(owner_id);
                return this.traversed().moments.map(t => dto?.[4]?.[indexes.get(owner_id + ':' + t)] ?? 0);
            }
            views(owner_id) {
                const indexes = this.traversed().indexes;
                const dto = this.dto_by_owner(owner_id);
                return this.traversed().moments.map(t => dto?.[5]?.[indexes.get(owner_id + ':' + t)] ?? 0);
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_posts_plots.prototype, "traversed", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_posts_plots.prototype, "moments", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_posts_plots.prototype, "labels", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_posts_plots.prototype, "likes", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_posts_plots.prototype, "posts", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_posts_plots.prototype, "reposts", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_posts_plots.prototype, "comments", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_posts_plots.prototype, "views", null);
        $$.$shm_hitalama_posts_plots = $shm_hitalama_posts_plots;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_posts_plots, {
            Charts: {
                gap: '1rem',
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_deck) = class $mol_deck extends ($.$mol_list) {
		current(next){
			if(next !== undefined) return next;
			return "0";
		}
		switch_options(){
			return {};
		}
		Switch(){
			const obj = new this.$.$mol_switch();
			(obj.value) = (next) => ((this.current(next)));
			(obj.options) = () => ((this.switch_options()));
			return obj;
		}
		Content(){
			const obj = new this.$.$mol_view();
			return obj;
		}
		items(){
			return [];
		}
		rows(){
			return [(this.Switch()), (this.Content())];
		}
	};
	($mol_mem(($.$mol_deck.prototype), "current"));
	($mol_mem(($.$mol_deck.prototype), "Switch"));
	($mol_mem(($.$mol_deck.prototype), "Content"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_deck extends $.$mol_deck {
            current(next) {
                return $mol_state_session.value(`${this}.current()`, next) || '0';
            }
            switch_options() {
                let options = {};
                this.items().forEach((item, index) => {
                    options[String(index)] = item.title();
                });
                return options;
            }
            Content() {
                return this.items()[Number(this.current())];
            }
        }
        __decorate([
            $mol_mem
        ], $mol_deck.prototype, "Content", null);
        $$.$mol_deck = $mol_deck;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_analysis) = class $shm_hitalama_analysis extends ($.$mol_list) {
		auto_collect(){
			return null;
		}
		Section(){
			const obj = new this.$.$mol_section();
			(obj.title) = () => ((this.title()));
			return obj;
		}
		search_reset(){
			return (this.Search().reset());
		}
		search_title(){
			return "Введите ссылку на сообщество";
		}
		lists_dict(){
			return {};
		}
		selected_list_ref(next){
			if(next !== undefined) return next;
			return "";
		}
		List_select(){
			const obj = new this.$.$mol_select();
			(obj.trigger_content) = () => (["выберите список"]);
			(obj.dictionary) = () => ((this.lists_dict()));
			(obj.value) = (next) => ((this.selected_list_ref(next)));
			return obj;
		}
		cancel_select_list(){
			return null;
		}
		search_owner_id(){
			return (this.Search().owner_id());
		}
		search_dto(){
			return (this.Search().dto());
		}
		collect(next){
			if(next !== undefined) return next;
			return null;
		}
		Collect(){
			const obj = new this.$.$mol_button_major();
			(obj.title) = () => ("Собрать посты");
			(obj.click) = (next) => ((this.collect(next)));
			return obj;
		}
		collect_cancel(next){
			if(next !== undefined) return next;
			return null;
		}
		Cancel(){
			const obj = new this.$.$mol_button_major();
			(obj.title) = () => ("Отмена");
			(obj.click) = (next) => ((this.collect_cancel(next)));
			return obj;
		}
		collect_button(){
			return [(this.Collect()), (this.Cancel())];
		}
		Search(){
			const obj = new this.$.$shm_hitalama_group_search();
			(obj.search_label) = () => ([(this.search_title()), (this.List_select())]);
			(obj.search_click) = () => ((this.cancel_select_list()));
			(obj.token_str) = () => ((this.token_str()));
			(obj.buttons) = () => ([...(this.collect_button())]);
			return obj;
		}
		selected_list_name(){
			return "";
		}
		List_name(){
			const obj = new this.$.$mol_text();
			(obj.text) = () => ((this.selected_list_name()));
			return obj;
		}
		List(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.List_name()), ...(this.collect_button())]);
			return obj;
		}
		list_view(){
			return [(this.List())];
		}
		Collect_block(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Search()), ...(this.list_view())]);
			return obj;
		}
		owner_ids(){
			return [];
		}
		Summary(){
			const obj = new this.$.$shm_hitalama_analysis_summary();
			(obj.token_str) = () => ((this.token_str()));
			(obj.owner_ids) = () => ((this.owner_ids()));
			(obj.posts_dto_by_owner) = (id) => ((this.posts_dto_by_owner(id)));
			return obj;
		}
		Summary_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Сводные показатели");
			(obj.content) = () => ([(this.Summary())]);
			return obj;
		}
		Posts_table(){
			const obj = new this.$.$shm_hitalama_posts_table();
			(obj.title) = () => ("Таблица постов");
			(obj.owner_ids) = () => ((this.owner_ids()));
			(obj.Posts_by_owner) = (id) => ((this.Posts_by_owner(id)));
			return obj;
		}
		group_name(id){
			return "";
		}
		Plots(){
			const obj = new this.$.$shm_hitalama_posts_plots();
			(obj.title) = () => ("Графики");
			(obj.owner_ids) = () => ((this.owner_ids()));
			(obj.group_name) = (id) => ((this.group_name(id)));
			(obj.Posts_by_owner) = (id) => ((this.Posts_by_owner(id)));
			return obj;
		}
		Posts_deck(){
			const obj = new this.$.$mol_deck();
			(obj.items) = () => ([(this.Posts_table()), (this.Plots())]);
			return obj;
		}
		analysis(){
			return [(this.Summary_label()), (this.Posts_deck())];
		}
		group_body(){
			return [(this.Collect_block()), ...(this.analysis())];
		}
		loader_message(id){
			return "Идет сбор постов";
		}
		Loader_message(id){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.loader_message(id)));
			return obj;
		}
		Loader(id){
			const obj = new this.$.$mol_list();
			(obj.sub) = () => ([(this.Loader_message(id))]);
			return obj;
		}
		owner_id(id, next){
			if(next !== undefined) return next;
			return "";
		}
		collect_by_owner(id, next){
			return (this.Posts_by_owner(id).collect(next));
		}
		posts_dto_by_owner(id){
			return (this.Posts_by_owner(id).dto());
		}
		posts_pending(id){
			return (this.Posts_by_owner(id).pending());
		}
		title(){
			return "Сбор и анализ постов";
		}
		token(){
			return null;
		}
		token_str(){
			return "";
		}
		No_auth_message(){
			const obj = new this.$.$mol_text();
			(obj.text) = () => ("Выберите пользователя");
			return obj;
		}
		collect_queue(next){
			if(next !== undefined) return next;
			return [];
		}
		auto(){
			return [(this.auto_collect())];
		}
		collect_pending(){
			return false;
		}
		sub(){
			return [(this.Section()), ...(this.group_body())];
		}
		Loaders(){
			const obj = new this.$.$mol_list();
			(obj.sub) = () => ([(this.Loader("0"))]);
			return obj;
		}
		Posts_by_owner(id){
			const obj = new this.$.$shm_hitalama_posts();
			(obj.token_str) = () => ((this.token_str()));
			(obj.owner_id) = (next) => ((this.owner_id(id)));
			return obj;
		}
	};
	($mol_mem(($.$shm_hitalama_analysis.prototype), "Section"));
	($mol_mem(($.$shm_hitalama_analysis.prototype), "selected_list_ref"));
	($mol_mem(($.$shm_hitalama_analysis.prototype), "List_select"));
	($mol_mem(($.$shm_hitalama_analysis.prototype), "collect"));
	($mol_mem(($.$shm_hitalama_analysis.prototype), "Collect"));
	($mol_mem(($.$shm_hitalama_analysis.prototype), "collect_cancel"));
	($mol_mem(($.$shm_hitalama_analysis.prototype), "Cancel"));
	($mol_mem(($.$shm_hitalama_analysis.prototype), "Search"));
	($mol_mem(($.$shm_hitalama_analysis.prototype), "List_name"));
	($mol_mem(($.$shm_hitalama_analysis.prototype), "List"));
	($mol_mem(($.$shm_hitalama_analysis.prototype), "Collect_block"));
	($mol_mem(($.$shm_hitalama_analysis.prototype), "Summary"));
	($mol_mem(($.$shm_hitalama_analysis.prototype), "Summary_label"));
	($mol_mem(($.$shm_hitalama_analysis.prototype), "Posts_table"));
	($mol_mem(($.$shm_hitalama_analysis.prototype), "Plots"));
	($mol_mem(($.$shm_hitalama_analysis.prototype), "Posts_deck"));
	($mol_mem_key(($.$shm_hitalama_analysis.prototype), "Loader_message"));
	($mol_mem_key(($.$shm_hitalama_analysis.prototype), "Loader"));
	($mol_mem_key(($.$shm_hitalama_analysis.prototype), "owner_id"));
	($mol_mem(($.$shm_hitalama_analysis.prototype), "No_auth_message"));
	($mol_mem(($.$shm_hitalama_analysis.prototype), "collect_queue"));
	($mol_mem(($.$shm_hitalama_analysis.prototype), "Loaders"));
	($mol_mem_key(($.$shm_hitalama_analysis.prototype), "Posts_by_owner"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_analysis extends $.$shm_hitalama_analysis {
            token_str() {
                return this.token()?.Token()?.val() || '';
            }
            group_body() {
                return this.token_str() ? super.group_body() : [this.No_auth_message()];
            }
            list_view() {
                return this.selected_list_ref() ? super.list_view() : [];
            }
            selected_list_ref(next) {
                if (next)
                    this.search_reset();
                return next ?? '';
            }
            cancel_select_list() {
                this.selected_list_ref('');
            }
            owner_ids() {
                const list = this.selected_list();
                if (!list)
                    return [this.search_owner_id()];
                return list.Groups()?.remote_list().map(g => g.Owner_id()?.val()) ?? [];
            }
            analysis() {
                if (this.search_owner_id()) {
                    return this.posts_pending(this.search_owner_id()) ? [this.Loaders()]
                        : this.posts_dto_by_owner(this.search_owner_id()) ? super.analysis() : [];
                }
                const list = this.selected_list();
                if (!list)
                    return [];
                const pending = list.Groups()?.remote_list().forEach(g => {
                    this.posts_pending(g.Owner_id()?.val());
                });
                return pending ? [this.Loaders()] : super.analysis();
            }
            lists_dict() {
                const lists = this.$.$shm_hitalama_profile.current()?.Groups_lists()?.remote_list() ?? [];
                const dict = Object.fromEntries(lists.map(l => [l.ref().description, l.Name()?.val()]));
                return dict;
            }
            selected_list() {
                return this.selected_list_ref()
                    ? this.$.$hyoo_crus_glob.Node($hyoo_crus_ref(this.selected_list_ref()), $shm_hitalama_list)
                    : null;
            }
            selected_list_name() {
                return this.selected_list()?.Name()?.val() ?? '';
            }
            owner_id(id) {
                return id;
            }
            collect_pending() {
                return this.collect_queue().length > 0 || this.owner_ids().some(id => this.posts_pending(id));
            }
            collect_button() {
                return this.collect_pending() ? [this.Cancel()] : [this.Collect()];
            }
            collect_interval = 340;
            auto_collect() {
                if (this.collect_queue().length == 0)
                    return;
                this.queue_eat();
                $mol_state_time.now(this.collect_interval);
            }
            queue_eat() {
                const [owner, ...next] = this.collect_queue();
                this.collect_by_owner(owner);
                this.collect_queue(next);
            }
            collect() {
                this.collect_queue(this.owner_ids());
                this.queue_eat();
            }
            collect_cancel() {
                this.collect_queue([]);
            }
            group_name(owner_id) {
                const list = this.selected_list();
                if (!list)
                    return '';
                return list.Groups()?.remote_list()?.find(g => g.Owner_id()?.val() == owner_id)?.Name()?.val() || '';
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_analysis.prototype, "token_str", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_analysis.prototype, "group_body", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_analysis.prototype, "list_view", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_analysis.prototype, "selected_list_ref", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_analysis.prototype, "owner_ids", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_analysis.prototype, "analysis", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_analysis.prototype, "lists_dict", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_analysis.prototype, "selected_list", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_analysis.prototype, "selected_list_name", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_analysis.prototype, "collect_pending", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_analysis.prototype, "auto_collect", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_analysis.prototype, "queue_eat", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_analysis.prototype, "group_name", null);
        $$.$shm_hitalama_analysis = $shm_hitalama_analysis;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_analysis, {
            transition: 'none',
            gap: $mol_gap.block,
            Collect_block: {
                flex: {
                    direction: 'column',
                },
                width: '30rem',
            },
            Collect: {
                margin: {
                    left: 'auto',
                },
                align: {
                    self: 'flex-start',
                },
            },
            Cancel: {
                margin: {
                    left: 'auto',
                },
                align: {
                    self: 'flex-start',
                },
            },
            Summary_label: {
                Label: {
                    padding: $mol_gap.text,
                },
                Content: {
                    padding: 0,
                },
            },
            Summary: {
                padding: $mol_gap.text,
                flex: {
                    grow: 1,
                },
            },
            List: {
                padding: $mol_gap.text,
            },
            List_select: {
                margin: {
                    top: '-0.5rem',
                    bottom: '-0.5rem',
                },
                Trigger: {
                    padding: {
                        left: '0.5rem',
                        right: '0.5rem',
                    },
                },
            },
            Posts_table: {
                padding: $mol_gap.text,
            },
            Search: {
                flex: {
                    direction: 'column',
                },
            },
            Loaders: {
                padding: $mol_gap.text,
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_lists_creating) = class $shm_hitalama_lists_creating extends ($.$mol_section) {
		cancel_arg(){
			return {};
		}
		Creating_cancel(){
			const obj = new this.$.$mol_link();
			(obj.title) = () => ("Отмена");
			(obj.arg) = () => ((this.cancel_arg()));
			return obj;
		}
		name(next){
			if(next !== undefined) return next;
			return "Список 1";
		}
		Name(){
			const obj = new this.$.$mol_string();
			(obj.value) = (next) => ((this.name(next)));
			return obj;
		}
		Name_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Введите название списка");
			(obj.content) = () => ([(this.Name())]);
			return obj;
		}
		token_str(){
			return "";
		}
		group_dto_current(){
			return (this.Search().dto());
		}
		add(next){
			if(next !== undefined) return next;
			return null;
		}
		Add(){
			const obj = new this.$.$mol_button_major();
			(obj.title) = () => ("Добавить в список");
			(obj.click) = (next) => ((this.add(next)));
			return obj;
		}
		Search(){
			const obj = new this.$.$shm_hitalama_group_search();
			(obj.token_str) = () => ((this.token_str()));
			(obj.buttons) = () => ([(this.Add())]);
			return obj;
		}
		Add_block(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Search())]);
			return obj;
		}
		photo_uri(id){
			return "";
		}
		Photo(id){
			const obj = new this.$.$mol_image();
			(obj.uri) = () => ((this.photo_uri(id)));
			return obj;
		}
		Remove_icon(id){
			const obj = new this.$.$mol_icon_close();
			return obj;
		}
		remove(id, next){
			if(next !== undefined) return next;
			return null;
		}
		Remove(id){
			const obj = new this.$.$mol_button_minor();
			(obj.sub) = () => ([(this.Remove_icon(id))]);
			(obj.click) = (next) => ((this.remove(id, next)));
			return obj;
		}
		Group(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Photo(id)), (this.Remove(id))]);
			return obj;
		}
		groups(){
			return [(this.Group(id))];
		}
		Creating_list(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ((this.groups()));
			return obj;
		}
		save(next){
			if(next !== undefined) return next;
			return null;
		}
		save_enabled(){
			return false;
		}
		Save(){
			const obj = new this.$.$mol_button_major();
			(obj.title) = () => ("Сохранить");
			(obj.click) = (next) => ((this.save(next)));
			(obj.enabled) = () => ((this.save_enabled()));
			return obj;
		}
		token(){
			return null;
		}
		title(){
			return "Создание списка";
		}
		param(){
			return "create";
		}
		groups_list(next){
			if(next !== undefined) return next;
			return [];
		}
		content(){
			return [
				(this.Creating_cancel()), 
				(this.Name_label()), 
				(this.Add_block()), 
				(this.Creating_list()), 
				(this.Save())
			];
		}
	};
	($mol_mem(($.$shm_hitalama_lists_creating.prototype), "Creating_cancel"));
	($mol_mem(($.$shm_hitalama_lists_creating.prototype), "name"));
	($mol_mem(($.$shm_hitalama_lists_creating.prototype), "Name"));
	($mol_mem(($.$shm_hitalama_lists_creating.prototype), "Name_label"));
	($mol_mem(($.$shm_hitalama_lists_creating.prototype), "add"));
	($mol_mem(($.$shm_hitalama_lists_creating.prototype), "Add"));
	($mol_mem(($.$shm_hitalama_lists_creating.prototype), "Search"));
	($mol_mem(($.$shm_hitalama_lists_creating.prototype), "Add_block"));
	($mol_mem_key(($.$shm_hitalama_lists_creating.prototype), "Photo"));
	($mol_mem_key(($.$shm_hitalama_lists_creating.prototype), "Remove_icon"));
	($mol_mem_key(($.$shm_hitalama_lists_creating.prototype), "remove"));
	($mol_mem_key(($.$shm_hitalama_lists_creating.prototype), "Remove"));
	($mol_mem_key(($.$shm_hitalama_lists_creating.prototype), "Group"));
	($mol_mem(($.$shm_hitalama_lists_creating.prototype), "Creating_list"));
	($mol_mem(($.$shm_hitalama_lists_creating.prototype), "save"));
	($mol_mem(($.$shm_hitalama_lists_creating.prototype), "Save"));
	($mol_mem(($.$shm_hitalama_lists_creating.prototype), "groups_list"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_lists_creating extends $.$shm_hitalama_lists_creating {
            token_str() {
                return this.token()?.Token()?.val() || '';
            }
            cancel_arg() {
                return { [this.param()]: null };
            }
            groups_map = new Map;
            add() {
                const owner_id = this.group_dto_current().id;
                this.groups_map.set(owner_id, this.group_dto_current());
                if (this.groups_list().includes(owner_id))
                    return;
                this.groups_list([...this.groups_list(), owner_id]);
            }
            remove(id) {
                this.groups_list([...this.groups_list().filter(i => i != id)]);
            }
            groups() {
                return this.groups_list().map(id => this.Group(id));
            }
            photo_uri(id) {
                return this.groups_map.get(id)?.photo_50 ?? '';
            }
            save_enabled() {
                return this.groups_list().length > 0;
            }
            save() {
                const list = this.$.$shm_hitalama_profile.current()?.Groups_lists(null)?.make({});
                list?.Name(null)?.val(this.name());
                this.groups_list().forEach(id => {
                    const group = list?.Groups(null)?.make(list.land());
                    group.fill(this.groups_map.get(id));
                });
                this.$.$mol_state_arg.value(this.param(), null);
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_lists_creating.prototype, "token_str", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_lists_creating.prototype, "add", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_lists_creating.prototype, "groups", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_lists_creating.prototype, "photo_uri", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_lists_creating.prototype, "save_enabled", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_lists_creating.prototype, "save", null);
        $$.$shm_hitalama_lists_creating = $shm_hitalama_lists_creating;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_lists_creating, {
            gap: $mol_gap.block,
            Content: {
                gap: $mol_gap.block,
                align: {
                    items: 'flex-start'
                },
            },
            Add_block: {
                align: {
                    items: 'flex-end'
                },
            },
            Add: {
                margin: $mol_gap.text,
            },
            Group: {
                position: 'relative',
            },
            Remove: {
                position: 'absolute',
                top: '-1.25rem',
                right: '-1.25rem',
                color: 'red'
            },
            Creating_list: {
                gap: $mol_gap.block,
                padding: $mol_gap.block,
            },
            Save: {
                margin: $mol_gap.block,
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_lists_editing) = class $shm_hitalama_lists_editing extends ($.$shm_hitalama_lists_creating) {
		title(){
			return "Редактирование списка";
		}
		param(){
			return "edit";
		}
		list(){
			const obj = new this.$.$shm_hitalama_list();
			return obj;
		}
	};
	($mol_mem(($.$shm_hitalama_lists_editing.prototype), "list"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_lists_editing extends $.$shm_hitalama_lists_editing {
            name(next) {
                return next ?? this.list().Name()?.val() ?? '';
            }
            groups_map = new Map;
            groups_list(next) {
                if (next === undefined) {
                    return this.list().Groups()?.remote_list()?.map(l => {
                        const owner_id = l.Owner_id()?.val();
                        this.groups_map.set(owner_id, {
                            id: owner_id.slice(1),
                            name: l.Name()?.val(),
                            members_count: l.Members_count()?.val(),
                            photo_50: l.Photo_url()?.val(),
                        });
                        return owner_id;
                    }) ?? [];
                }
                return next ?? [];
            }
            save() {
                const list = this.list();
                list?.Name(null)?.val(this.name());
                const next_groups = this.groups_list().map(id => {
                    const dto = this.groups_map.get(id);
                    const group = this.list()?.Groups(null)?.make(this.list().land());
                    group.fill(dto);
                    return group;
                });
                this.list()?.Groups(null)?.remote_list(next_groups);
                this.$.$mol_state_arg.value(this.param(), null);
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_lists_editing.prototype, "name", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_lists_editing.prototype, "groups_list", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_lists_editing.prototype, "save", null);
        $$.$shm_hitalama_lists_editing = $shm_hitalama_lists_editing;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_lists) = class $shm_hitalama_lists extends ($.$mol_list) {
		current_view(){
			return (this.Main());
		}
		Open_create(){
			const obj = new this.$.$mol_link();
			(obj.title) = () => ("Создать список");
			(obj.arg) = () => ({"create": true});
			return obj;
		}
		name(id){
			return "";
		}
		Name(id){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.name(id)));
			return obj;
		}
		ref_str(id){
			return "";
		}
		Edit(id){
			const obj = new this.$.$mol_link();
			(obj.title) = () => ("Редактировать");
			(obj.arg) = () => ({"edit": (this.ref_str(id))});
			return obj;
		}
		remove_list(id, next){
			if(next !== undefined) return next;
			return null;
		}
		Remove(id){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ("Удалить");
			(obj.click) = (next) => ((this.remove_list(id, next)));
			return obj;
		}
		List_head(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([
				(this.Name(id)), 
				(this.Edit(id)), 
				(this.Remove(id))
			]);
			return obj;
		}
		group_photo_uri(id){
			return "";
		}
		Photo(id){
			const obj = new this.$.$mol_image();
			(obj.uri) = () => ((this.group_photo_uri(id)));
			return obj;
		}
		Group(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Photo(id))]);
			return obj;
		}
		groups(id){
			return [(this.Group(id))];
		}
		Groups(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ((this.groups(id)));
			return obj;
		}
		List(id){
			const obj = new this.$.$mol_list();
			(obj.sub) = () => ([(this.List_head(id)), (this.Groups(id))]);
			return obj;
		}
		lists(){
			return [(this.List(id))];
		}
		Lists(){
			const obj = new this.$.$mol_list();
			(obj.sub) = () => ((this.lists()));
			return obj;
		}
		list_editing(){
			const obj = new this.$.$shm_hitalama_list();
			return obj;
		}
		title(){
			return "Списки сообществ";
		}
		token(){
			return null;
		}
		sub(){
			return [(this.current_view())];
		}
		Main(){
			const obj = new this.$.$mol_section();
			(obj.title) = () => ((this.title()));
			(obj.content) = () => ([(this.Open_create()), (this.Lists())]);
			return obj;
		}
		Creating(){
			const obj = new this.$.$shm_hitalama_lists_creating();
			(obj.token) = () => ((this.token()));
			return obj;
		}
		Editing(){
			const obj = new this.$.$shm_hitalama_lists_editing();
			(obj.token) = () => ((this.token()));
			(obj.list) = () => ((this.list_editing()));
			return obj;
		}
	};
	($mol_mem(($.$shm_hitalama_lists.prototype), "Open_create"));
	($mol_mem_key(($.$shm_hitalama_lists.prototype), "Name"));
	($mol_mem_key(($.$shm_hitalama_lists.prototype), "Edit"));
	($mol_mem_key(($.$shm_hitalama_lists.prototype), "remove_list"));
	($mol_mem_key(($.$shm_hitalama_lists.prototype), "Remove"));
	($mol_mem_key(($.$shm_hitalama_lists.prototype), "List_head"));
	($mol_mem_key(($.$shm_hitalama_lists.prototype), "Photo"));
	($mol_mem_key(($.$shm_hitalama_lists.prototype), "Group"));
	($mol_mem_key(($.$shm_hitalama_lists.prototype), "Groups"));
	($mol_mem_key(($.$shm_hitalama_lists.prototype), "List"));
	($mol_mem(($.$shm_hitalama_lists.prototype), "Lists"));
	($mol_mem(($.$shm_hitalama_lists.prototype), "list_editing"));
	($mol_mem(($.$shm_hitalama_lists.prototype), "Main"));
	($mol_mem(($.$shm_hitalama_lists.prototype), "Creating"));
	($mol_mem(($.$shm_hitalama_lists.prototype), "Editing"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_lists extends $.$shm_hitalama_lists {
            current_view() {
                return this.$.$mol_state_arg.value('create')
                    ? this.Creating()
                    : this.$.$mol_state_arg.value('edit')
                        ? this.Editing()
                        : this.Main();
            }
            token_str() {
                return this.token()?.Token()?.val() || '';
            }
            group_list(ref) {
                return this.$.$hyoo_crus_glob.Node(ref, $shm_hitalama_list);
            }
            name(ref) {
                return this.group_list(ref).Name()?.val() || '';
            }
            lists() {
                return this.$.$shm_hitalama_profile.current()?.Groups_lists()?.remote_list().map(l => this.List(l.ref())) ?? [];
            }
            groups(ref) {
                return this.group_list(ref).Groups()?.remote_list().map(g => this.Group(g.ref())) ?? [];
            }
            group_photo_uri(ref) {
                return this.$.$hyoo_crus_glob.Node(ref, $shm_hitalama_group).Photo_url()?.val() ?? '';
            }
            ref_str(ref) {
                return ref.description;
            }
            list_editing() {
                const ref_str = this.$.$mol_state_arg.value('edit');
                return this.$.$hyoo_crus_glob.Node($hyoo_crus_ref(ref_str), $shm_hitalama_list);
            }
            remove_list(ref) {
                this.$.$shm_hitalama_profile.current()?.Groups_lists()?.cut(ref);
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_lists.prototype, "current_view", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_lists.prototype, "token_str", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_lists.prototype, "group_list", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_lists.prototype, "name", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_lists.prototype, "lists", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_lists.prototype, "groups", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_lists.prototype, "group_photo_uri", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_lists.prototype, "ref_str", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_lists.prototype, "list_editing", null);
        $$.$shm_hitalama_lists = $shm_hitalama_lists;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_lists, {
            Remove: {
                color: 'red',
            },
            Groups: {
                gap: $mol_gap.block,
                padding: {
                    left: $mol_gap.block,
                },
            },
            Name: {
                padding: $mol_gap.text,
            },
            Main: {
                gap: $mol_gap.block,
                Content: {
                    gap: $mol_gap.block,
                    align: {
                        items: 'flex-start'
                    },
                },
            },
            List_head: {
                gap: $mol_gap.block,
            },
            List: {
                gap: $mol_gap.space,
            },
            Lists: {
                gap: '1.5rem',
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_icon_plus) = class $mol_icon_plus extends ($.$mol_icon) {
		path(){
			return "M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z";
		}
	};


;
"use strict";

;
	($.$mol_string_button) = class $mol_string_button extends ($.$mol_string) {};


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/string/button/button.view.css", "[mol_string_button]:not(:placeholder-shown):not(:focus):not(:hover):not(:disabled) {\n\tcolor: var(--mol_theme_control);\n\tbackground: transparent;\n\tbox-shadow: none;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$shm_hitalama_entity_page) = class $shm_hitalama_entity_page extends ($.$mol_page) {
		title(next){
			if(next !== undefined) return next;
			return "";
		}
		Title(){
			const obj = new this.$.$mol_string_button();
			(obj.value) = (next) => ((this.title(next)));
			return obj;
		}
		cut_title(){
			return "Удалить";
		}
		cut(next){
			if(next !== undefined) return next;
			return null;
		}
		Cut(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ((this.cut_title()));
			(obj.click) = (next) => ((this.cut(next)));
			return obj;
		}
		entity(){
			const obj = new this.$.$hyoo_crus_entity();
			return obj;
		}
		head(){
			return [(this.Title()), (this.Tools())];
		}
		tools(){
			return [(this.Cut())];
		}
	};
	($mol_mem(($.$shm_hitalama_entity_page.prototype), "title"));
	($mol_mem(($.$shm_hitalama_entity_page.prototype), "Title"));
	($mol_mem(($.$shm_hitalama_entity_page.prototype), "cut"));
	($mol_mem(($.$shm_hitalama_entity_page.prototype), "Cut"));
	($mol_mem(($.$shm_hitalama_entity_page.prototype), "entity"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_entity_page extends $.$shm_hitalama_entity_page {
            title(next) {
                return this.entity().title(next) ?? '';
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_entity_page.prototype, "title", null);
        $$.$shm_hitalama_entity_page = $shm_hitalama_entity_page;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_entity_page, {
            flex: {
                grow: 1,
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_entity_catalog) = class $shm_hitalama_entity_catalog extends ($.$mol_book2_catalog) {
		add(next){
			if(next !== undefined) return next;
			return null;
		}
		Add_icon(){
			const obj = new this.$.$mol_icon_plus();
			return obj;
		}
		Add(){
			const obj = new this.$.$mol_button_minor();
			(obj.hint) = () => ("Добавить");
			(obj.click) = (next) => ((this.add(next)));
			(obj.sub) = () => ([(this.Add_icon())]);
			return obj;
		}
		entity(id){
			const obj = new this.$.$hyoo_crus_entity();
			return obj;
		}
		cut(id){
			return null;
		}
		menu_title(){
			return "";
		}
		param(){
			return "";
		}
		list(){
			return null;
		}
		menu_tools(){
			return [(this.Add())];
		}
		title_default(){
			return "Новый";
		}
		entities(){
			return [];
		}
		Page(id){
			const obj = new this.$.$shm_hitalama_entity_page();
			(obj.entity) = () => ((this.entity(id)));
			(obj.cut) = () => ((this.cut(id)));
			return obj;
		}
	};
	($mol_mem(($.$shm_hitalama_entity_catalog.prototype), "add"));
	($mol_mem(($.$shm_hitalama_entity_catalog.prototype), "Add_icon"));
	($mol_mem(($.$shm_hitalama_entity_catalog.prototype), "Add"));
	($mol_mem_key(($.$shm_hitalama_entity_catalog.prototype), "entity"));
	($mol_mem_key(($.$shm_hitalama_entity_catalog.prototype), "Page"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_entity_catalog extends $.$shm_hitalama_entity_catalog {
            list() {
                return null;
            }
            add() {
                const entity = this.list()?.make({ '': $hyoo_crus_rank_read });
                entity?.title(this.title_default());
                this.spread(entity.ref().description);
                return entity;
            }
            cut(id) {
                this.list()?.cut($hyoo_crus_ref(id));
            }
            entity(id) {
                return $hyoo_crus_glob.Node($hyoo_crus_ref(id), $hyoo_crus_entity);
            }
            entities() {
                return this.list().remote_list();
            }
            spreads() {
                return Object.fromEntries(this.entities().map(entity => [
                    entity.ref().description,
                    this.Page(entity.ref().description),
                ]));
            }
            spread(next) {
                const arg = this.$.$mol_state_arg.value(this.param(), next) ?? undefined;
                return this.$.$mol_state_arg.value(this.param(), this.$.$mol_state_session.value(this.toString() + '.spread', arg)) ?? '';
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_entity_catalog.prototype, "list", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_entity_catalog.prototype, "add", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_entity_catalog.prototype, "cut", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_entity_catalog.prototype, "entity", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_entity_catalog.prototype, "entities", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_entity_catalog.prototype, "spreads", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_entity_catalog.prototype, "spread", null);
        $$.$shm_hitalama_entity_catalog = $shm_hitalama_entity_catalog;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_entity_catalog, {
            Menu: {
                flex: {
                    basis: '18rem',
                },
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_row) = class $mol_row extends ($.$mol_view) {};


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/row/row.view.css", "[mol_row] {\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\talign-items: flex-start;\n\talign-content: flex-start;\n\tjustify-content: flex-start;\n\tpadding: var(--mol_gap_block);\n\tgap: var(--mol_gap_block);\n\tflex: 0 0 auto;\n\tbox-sizing: border-box;\n\tmax-width: 100%;\n}\n\n[mol_row] > * {\n\tmax-width: 100%;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_icon_upload) = class $mol_icon_upload extends ($.$mol_icon) {
		path(){
			return "M9,16V10H5L12,3L19,10H15V16H9M5,20V18H19V20H5Z";
		}
	};


;
"use strict";

;
	($.$mol_button_open) = class $mol_button_open extends ($.$mol_button_minor) {
		Icon(){
			const obj = new this.$.$mol_icon_upload();
			return obj;
		}
		files(next){
			if(next !== undefined) return next;
			return [];
		}
		accept(){
			return "";
		}
		multiple(){
			return true;
		}
		Native(){
			const obj = new this.$.$mol_button_open_native();
			(obj.files) = (next) => ((this.files(next)));
			(obj.accept) = () => ((this.accept()));
			(obj.multiple) = () => ((this.multiple()));
			return obj;
		}
		sub(){
			return [(this.Icon()), (this.Native())];
		}
	};
	($mol_mem(($.$mol_button_open.prototype), "Icon"));
	($mol_mem(($.$mol_button_open.prototype), "files"));
	($mol_mem(($.$mol_button_open.prototype), "Native"));
	($.$mol_button_open_native) = class $mol_button_open_native extends ($.$mol_view) {
		accept(){
			return "";
		}
		multiple(){
			return true;
		}
		picked(next){
			if(next !== undefined) return next;
			return null;
		}
		dom_name(){
			return "input";
		}
		files(next){
			if(next !== undefined) return next;
			return [];
		}
		attr(){
			return {
				"type": "file", 
				"accept": (this.accept()), 
				"multiple": (this.multiple())
			};
		}
		event(){
			return {"change": (next) => (this.picked(next))};
		}
	};
	($mol_mem(($.$mol_button_open_native.prototype), "picked"));
	($mol_mem(($.$mol_button_open_native.prototype), "files"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_button_open_native extends $.$mol_button_open_native {
            dom_node() {
                return super.dom_node();
            }
            picked() {
                const files = this.dom_node().files;
                if (!files || !files.length)
                    return;
                this.files([...files]);
            }
        }
        $$.$mol_button_open_native = $mol_button_open_native;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/button/open/open.view.css", "[mol_button_open_native] {\n\tposition: absolute;\n\tleft: 0;\n\ttop: -100%;\n\twidth: 100%;\n\theight: 200%;\n\tcursor: pointer;\n\topacity: 0;\n}\n");
})($ || ($ = {}));

;
	($.$mol_attach) = class $mol_attach extends ($.$mol_view) {
		content(){
			return [];
		}
		Content(){
			const obj = new this.$.$mol_row();
			(obj.sub) = () => ((this.content()));
			return obj;
		}
		attach_title(){
			return "";
		}
		attach_new(next){
			if(next !== undefined) return next;
			return null;
		}
		item_drop(id, next){
			if(next !== undefined) return next;
			return null;
		}
		item_uri(id){
			return "";
		}
		Image(id){
			const obj = new this.$.$mol_image();
			(obj.title) = () => ("");
			(obj.uri) = () => ((this.item_uri(id)));
			return obj;
		}
		items(next){
			if(next !== undefined) return next;
			return [];
		}
		sub(){
			return [(this.Content())];
		}
		Add(){
			const obj = new this.$.$mol_button_open();
			(obj.title) = () => ((this.attach_title()));
			(obj.files) = (next) => ((this.attach_new(next)));
			return obj;
		}
		Item(id){
			const obj = new this.$.$mol_button_minor();
			(obj.click) = (next) => ((this.item_drop(id, next)));
			(obj.sub) = () => ([(this.Image(id))]);
			return obj;
		}
	};
	($mol_mem(($.$mol_attach.prototype), "Content"));
	($mol_mem(($.$mol_attach.prototype), "attach_new"));
	($mol_mem_key(($.$mol_attach.prototype), "item_drop"));
	($mol_mem_key(($.$mol_attach.prototype), "Image"));
	($mol_mem(($.$mol_attach.prototype), "items"));
	($mol_mem(($.$mol_attach.prototype), "Add"));
	($mol_mem_key(($.$mol_attach.prototype), "Item"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_attach extends $.$mol_attach {
            attach_new(files) {
                this.items([
                    ...this.items(),
                    ...files.map(file => URL.createObjectURL(file)),
                ]);
            }
            content() {
                return [...this.items().map((_, i) => this.Item(i)), this.Add()];
            }
            item_uri(index) {
                return this.items()[index];
            }
            item_drop(index, event) {
                const items = this.items();
                this.items([
                    ...items.slice(0, index),
                    ...items.slice(index + 1),
                ]);
            }
        }
        __decorate([
            $mol_mem
        ], $mol_attach.prototype, "content", null);
        $$.$mol_attach = $mol_attach;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/attach/attach.view.css", "[mol_attach_item] {\n\twidth: 6rem;\n\theight: 6rem;\n\tborder-radius: var(--mol_gap_round);\n\tpadding: 0;\n}\n\n[mol_attach_image] {\n\tbackground: var(--mol_theme_card);\n\twidth: 100%;\n\theight: 100%;\n}\n\n[mol_attach_add] {\n\tbackground: var(--mol_theme_card);\n\twidth: 6rem;\n\theight: 6rem;\n\talign-items: center;\n\tjustify-content: center;\n\toverflow: hidden;\n}\n\n[mol_attach_add_icon] {\n\twidth: 50%;\n\theight: 50%;\n}\n");
})($ || ($ = {}));

;
	($.$shm_hitalama_project_page) = class $shm_hitalama_project_page extends ($.$shm_hitalama_entity_page) {
		file_name(id){
			return "";
		}
		File_name(id){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.file_name(id)));
			return obj;
		}
		file_size(id){
			return "0 KB";
		}
		File_size(id){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.file_size(id)));
			return obj;
		}
		File(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.File_name(id)), (this.File_size(id))]);
			return obj;
		}
		files(){
			return [(this.File("0"))];
		}
		Files(){
			const obj = new this.$.$mol_list();
			(obj.sub) = () => ([...(this.files())]);
			return obj;
		}
		attach_new(next){
			if(next !== undefined) return next;
			return [];
		}
		Attach(){
			const obj = new this.$.$mol_attach();
			(obj.attach_new) = (next) => ((this.attach_new(next)));
			return obj;
		}
		files_clear(next){
			if(next !== undefined) return next;
			return null;
		}
		Files_clear(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ("Очистить");
			(obj.click) = (next) => ((this.files_clear(next)));
			return obj;
		}
		project(){
			const obj = new this.$.$shm_hitalama_project();
			return obj;
		}
		cut_title(){
			return "Удалить проект";
		}
		body(){
			return [
				(this.Files()), 
				(this.Attach()), 
				(this.Files_clear())
			];
		}
	};
	($mol_mem_key(($.$shm_hitalama_project_page.prototype), "File_name"));
	($mol_mem_key(($.$shm_hitalama_project_page.prototype), "File_size"));
	($mol_mem_key(($.$shm_hitalama_project_page.prototype), "File"));
	($mol_mem(($.$shm_hitalama_project_page.prototype), "Files"));
	($mol_mem(($.$shm_hitalama_project_page.prototype), "attach_new"));
	($mol_mem(($.$shm_hitalama_project_page.prototype), "Attach"));
	($mol_mem(($.$shm_hitalama_project_page.prototype), "files_clear"));
	($mol_mem(($.$shm_hitalama_project_page.prototype), "Files_clear"));
	($mol_mem(($.$shm_hitalama_project_page.prototype), "project"));


;
"use strict";
var $;
(function ($) {
    let $mol_si_prefix;
    (function ($mol_si_prefix) {
        $mol_si_prefix[$mol_si_prefix["y"] = -8] = "y";
        $mol_si_prefix[$mol_si_prefix["z"] = -7] = "z";
        $mol_si_prefix[$mol_si_prefix["a"] = -6] = "a";
        $mol_si_prefix[$mol_si_prefix["f"] = -5] = "f";
        $mol_si_prefix[$mol_si_prefix["p"] = -4] = "p";
        $mol_si_prefix[$mol_si_prefix["n"] = -3] = "n";
        $mol_si_prefix[$mol_si_prefix["\u00B5"] = -2] = "\u00B5";
        $mol_si_prefix[$mol_si_prefix["m"] = -1] = "m";
        $mol_si_prefix[$mol_si_prefix[""] = 0] = "";
        $mol_si_prefix[$mol_si_prefix["k"] = 1] = "k";
        $mol_si_prefix[$mol_si_prefix["M"] = 2] = "M";
        $mol_si_prefix[$mol_si_prefix["G"] = 3] = "G";
        $mol_si_prefix[$mol_si_prefix["T"] = 4] = "T";
        $mol_si_prefix[$mol_si_prefix["P"] = 5] = "P";
        $mol_si_prefix[$mol_si_prefix["E"] = 6] = "E";
        $mol_si_prefix[$mol_si_prefix["Z"] = 7] = "Z";
        $mol_si_prefix[$mol_si_prefix["Y"] = 8] = "Y";
    })($mol_si_prefix = $.$mol_si_prefix || ($.$mol_si_prefix = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    function $mol_si_short(numb, unit = '') {
        let magnitude = Math.floor(Math.log10(Math.abs(numb)) / 3);
        if (!Number.isFinite(magnitude)) {
            const prefix = isNaN(numb) ? `∅` : numb.toLocaleString();
            const suffix = unit ? ' ' + unit : '';
            return prefix + suffix;
        }
        let normal = numb / 10 ** (3 * magnitude);
        if (Math.round(Math.abs(normal)) === 1000) {
            normal /= 1000;
            ++magnitude;
        }
        const prefix = normal.toPrecision(3);
        if (unit) {
            return prefix + ' ' + $mol_si_prefix[magnitude] + unit;
        }
        else {
            return prefix + $mol_si_prefix[magnitude];
        }
    }
    $.$mol_si_short = $mol_si_short;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_project_page extends $.$shm_hitalama_project_page {
            project() {
                return this.entity().cast($shm_hitalama_project);
            }
            attach_new(files) {
                const file = this.project().Files(null)?.make({ '': $hyoo_crus_rank_read });
                file?.title(files[0].name);
                file?.Size(null)?.val(files[0].size);
                file?.File(null)?.ensure({ '': $hyoo_crus_rank_read })?.blob(files[0]);
                return files;
            }
            file(ref) {
                return $hyoo_crus_glob.Node(ref, $shm_hitalama_file);
            }
            file_name(ref) {
                return this.file(ref)?.title() ?? '';
            }
            file_size(ref) {
                return $mol_si_short(this.file(ref)?.Size()?.val() ?? 0, 'B');
            }
            files() {
                return this.project().Files()?.remote_list().map(f => this.File(f.ref())) ?? [];
            }
            files_clear() {
                this.project().Files()?.remote_list([]);
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_project_page.prototype, "project", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_project_page.prototype, "file", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_project_page.prototype, "file_name", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_project_page.prototype, "file_size", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_project_page.prototype, "files", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_project_page.prototype, "files_clear", null);
        $$.$shm_hitalama_project_page = $shm_hitalama_project_page;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_project_page, {
            Files: {
                padding: $mol_gap.block,
            },
            File: {
                gap: '1rem',
            },
            File_size: {
                color: $mol_theme.shade,
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_project_catalog) = class $shm_hitalama_project_catalog extends ($.$shm_hitalama_entity_catalog) {
		menu_title(){
			return "Проекты";
		}
		param(){
			return "project";
		}
		title_default(){
			return "Проект";
		}
		Page(id){
			const obj = new this.$.$shm_hitalama_project_page();
			(obj.entity) = () => ((this.entity(id)));
			(obj.cut) = () => ((this.cut(id)));
			return obj;
		}
	};
	($mol_mem_key(($.$shm_hitalama_project_catalog.prototype), "Page"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_project_catalog extends $.$shm_hitalama_project_catalog {
            list() {
                return $shm_hitalama_profile.current()?.Projects(null);
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_project_catalog.prototype, "list", null);
        $$.$shm_hitalama_project_catalog = $shm_hitalama_project_catalog;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_project_catalog, {
            Menu: {
                flex: {
                    basis: '18rem',
                },
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_icon_tick) = class $mol_icon_tick extends ($.$mol_icon) {
		path(){
			return "M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z";
		}
	};


;
"use strict";

;
	($.$mol_check_box) = class $mol_check_box extends ($.$mol_check) {
		Icon(){
			const obj = new this.$.$mol_icon_tick();
			return obj;
		}
	};
	($mol_mem(($.$mol_check_box.prototype), "Icon"));


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/check/box/box.view.css", "[mol_check_box_icon] {\n\tborder-radius: var(--mol_gap_round);\n\tbox-shadow: inset 0 0 0 1px var(--mol_theme_line);\n\tcolor: var(--mol_theme_shade);\n\theight: 1rem;\n\talign-self: center;\n}\n\n[mol_check]:not([mol_check_checked]) > [mol_check_box_icon] {\n\tfill: transparent;\n}\n\n[mol_check]:not([disabled]) > [mol_check_box_icon] {\n\tbackground: var(--mol_theme_field);\n\tcolor: var(--mol_theme_text);\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_textarea) = class $mol_textarea extends ($.$mol_stack) {
		clickable(next){
			if(next !== undefined) return next;
			return false;
		}
		sidebar_showed(){
			return false;
		}
		press(next){
			if(next !== undefined) return next;
			return null;
		}
		hover(next){
			if(next !== undefined) return next;
			return null;
		}
		value(next){
			if(next !== undefined) return next;
			return "";
		}
		hint(){
			return " ";
		}
		enabled(){
			return true;
		}
		spellcheck(){
			return true;
		}
		length_max(){
			return +Infinity;
		}
		selection(next){
			if(next !== undefined) return next;
			return [];
		}
		bring(){
			return (this.Edit().bring());
		}
		submit(next){
			if(next !== undefined) return next;
			return null;
		}
		submit_with_ctrl(){
			return true;
		}
		Edit(){
			const obj = new this.$.$mol_textarea_edit();
			(obj.value) = (next) => ((this.value(next)));
			(obj.hint) = () => ((this.hint()));
			(obj.enabled) = () => ((this.enabled()));
			(obj.spellcheck) = () => ((this.spellcheck()));
			(obj.length_max) = () => ((this.length_max()));
			(obj.selection) = (next) => ((this.selection(next)));
			(obj.submit) = (next) => ((this.submit(next)));
			(obj.submit_with_ctrl) = () => ((this.submit_with_ctrl()));
			return obj;
		}
		row_numb(id){
			return 0;
		}
		highlight(){
			return "";
		}
		syntax(){
			const obj = new this.$.$mol_syntax2();
			return obj;
		}
		View(){
			const obj = new this.$.$mol_text_code();
			(obj.text) = () => ((this.value()));
			(obj.render_visible_only) = () => (false);
			(obj.row_numb) = (id) => ((this.row_numb(id)));
			(obj.sidebar_showed) = () => ((this.sidebar_showed()));
			(obj.highlight) = () => ((this.highlight()));
			(obj.syntax) = () => ((this.syntax()));
			return obj;
		}
		attr(){
			return {
				...(super.attr()), 
				"mol_textarea_clickable": (this.clickable()), 
				"mol_textarea_sidebar_showed": (this.sidebar_showed())
			};
		}
		event(){
			return {"keydown": (next) => (this.press(next)), "pointermove": (next) => (this.hover(next))};
		}
		sub(){
			return [(this.Edit()), (this.View())];
		}
		symbols_alt(){
			return {
				"comma": "<", 
				"period": ">", 
				"dash": "−", 
				"equals": "≈", 
				"graveAccent": "́", 
				"forwardSlash": "÷", 
				"E": "€", 
				"V": "✔", 
				"X": "×", 
				"C": "©", 
				"P": "§", 
				"H": "₽", 
				"key0": "°", 
				"key8": "•", 
				"key2": "@", 
				"key3": "#", 
				"key4": "$", 
				"key6": "^", 
				"key7": "&", 
				"bracketOpen": "[", 
				"bracketClose": "]", 
				"slashBack": "|"
			};
		}
		symbols_alt_ctrl(){
			return {"space": " "};
		}
		symbols_alt_shift(){
			return {
				"V": "✅", 
				"X": "❌", 
				"O": "⭕", 
				"key1": "❗", 
				"key4": "💲", 
				"key7": "❓", 
				"comma": "«", 
				"period": "»", 
				"semicolon": "“", 
				"quoteSingle": "”", 
				"dash": "—", 
				"equals": "≠", 
				"graveAccent": "̱", 
				"bracketOpen": "{", 
				"bracketClose": "}"
			};
		}
	};
	($mol_mem(($.$mol_textarea.prototype), "clickable"));
	($mol_mem(($.$mol_textarea.prototype), "press"));
	($mol_mem(($.$mol_textarea.prototype), "hover"));
	($mol_mem(($.$mol_textarea.prototype), "value"));
	($mol_mem(($.$mol_textarea.prototype), "selection"));
	($mol_mem(($.$mol_textarea.prototype), "submit"));
	($mol_mem(($.$mol_textarea.prototype), "Edit"));
	($mol_mem(($.$mol_textarea.prototype), "syntax"));
	($mol_mem(($.$mol_textarea.prototype), "View"));
	($.$mol_textarea_edit) = class $mol_textarea_edit extends ($.$mol_string) {
		dom_name(){
			return "textarea";
		}
		enter(){
			return "enter";
		}
		field(){
			return {...(super.field()), "scrollTop": 0};
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_textarea extends $.$mol_textarea {
            indent_inc() {
                let text = this.value();
                let [from, to] = this.selection();
                const rows = text.split('\n');
                let start = 0;
                for (let i = 0; i < rows.length; ++i) {
                    let end = start + rows[i].length;
                    if (end >= from && start <= to) {
                        if (to === from || start !== to) {
                            rows[i] = '\t' + rows[i];
                            to += 1;
                            end += 1;
                        }
                    }
                    start = end + 1;
                }
                this.value(rows.join('\n'));
                this.selection([from + 1, to]);
            }
            indent_dec() {
                let text = this.value();
                let [from, to] = this.selection();
                const rows = text.split('\n');
                let start = 0;
                for (let i = 0; i < rows.length; ++i) {
                    const end = start + rows[i].length;
                    if (end >= from && start <= to && rows[i].startsWith('\t')) {
                        rows[i] = rows[i].slice(1);
                        to -= 1;
                        if (start < from)
                            from -= 1;
                    }
                    start = end + 1;
                }
                this.value(rows.join('\n'));
                this.selection([from, to]);
            }
            symbol_insert(event) {
                const symbol = event.shiftKey
                    ? this.symbols_alt_shift()[$mol_keyboard_code[event.keyCode]]
                    : event.ctrlKey
                        ? this.symbols_alt_ctrl()[$mol_keyboard_code[event.keyCode]]
                        : this.symbols_alt()[$mol_keyboard_code[event.keyCode]];
                if (!symbol)
                    return;
                event.preventDefault();
                document.execCommand('insertText', false, symbol);
            }
            clickable(next) {
                if (!this.enabled())
                    return true;
                return next ?? false;
            }
            hover(event) {
                this.clickable(event.ctrlKey);
            }
            press(event) {
                if (event.altKey) {
                    this.symbol_insert(event);
                }
                else {
                    switch (event.keyCode) {
                        case !event.shiftKey && $mol_keyboard_code.tab:
                            this.indent_inc();
                            break;
                        case event.shiftKey && $mol_keyboard_code.tab:
                            this.indent_dec();
                            break;
                        default: return;
                    }
                    event.preventDefault();
                }
            }
            row_numb(index) {
                return index;
            }
            syntax() {
                return this.$.$mol_syntax2_md_code;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_textarea.prototype, "clickable", null);
        $$.$mol_textarea = $mol_textarea;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/textarea/textarea.view.css", "[mol_textarea] {\n\tflex: 1 0 auto;\n\tflex-direction: column;\n\tvertical-align: top;\n\tmin-height: max-content;\n\twhite-space: pre-wrap;\n\tword-break: break-word;\n\tborder-radius: var(--mol_gap_round);\n\tfont-family: monospace;\n\tposition: relative;\n\ttab-size: 4;\n}\n\n[mol_textarea_view] {\n\tpointer-events: none;\n\twhite-space: inherit;\n\tfont-family: inherit;\n\ttab-size: inherit;\n\tuser-select: none;\n}\n\n[mol_textarea_view_copy] {\n\tpointer-events: all;\n}\n\n[mol_textarea_clickable] > [mol_textarea_view] {\n\tpointer-events: all;\n\tuser-select: auto;\n}\n\n[mol_textarea_clickable] > [mol_textarea_edit] {\n\tuser-select: none;\n}\n\n[mol_textarea_edit] {\n\tfont-family: inherit;\n\tpadding: var(--mol_gap_text);\n\tcolor: transparent !important;\n\tcaret-color: var(--mol_theme_text);\n\tresize: none;\n\ttext-align: inherit;\n\twhite-space: inherit;\n\tborder-radius: inherit;\n\toverflow-anchor: none;\n\tposition: absolute;\n\theight: 100%;\n\twidth: 100%;\n\ttab-size: inherit;\n}\n\n[mol_textarea_sidebar_showed] [mol_textarea_edit] {\n\tleft: 1.75rem;\n\twidth: calc( 100% - 1.75rem );\n}\n\n[mol_textarea_edit]:hover + [mol_textarea_view] {\n\tz-index: var(--mol_layer_hover);\n}\n\n[mol_textarea_edit]:focus + [mol_textarea_view] {\n\tz-index: var(--mol_layer_focus);\n}\n");
})($ || ($ = {}));

;
	($.$mol_dump_list) = class $mol_dump_list extends ($.$mol_view) {
		dump_value(id){
			return null;
		}
		dump_expanded(id, next){
			if(next !== undefined) return next;
			return false;
		}
		prototypes(){
			return false;
		}
		preview_show(){
			return true;
		}
		Dump(id){
			const obj = new this.$.$mol_dump_value();
			(obj.value) = () => ((this.dump_value(id)));
			(obj.expanded) = (next) => ((this.dump_expanded(id, next)));
			(obj.prototypes) = () => ((this.prototypes()));
			(obj.preview_show) = () => ((this.preview_show()));
			return obj;
		}
		values(){
			return [];
		}
		sub(){
			return [(this.Dump("0"))];
		}
	};
	($mol_mem_key(($.$mol_dump_list.prototype), "dump_expanded"));
	($mol_mem_key(($.$mol_dump_list.prototype), "Dump"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_dump_list extends $.$mol_dump_list {
            sub() {
                return this.values().map((_, index) => this.Dump(index));
            }
            dump_value(index) {
                return this.values()[index];
            }
            expand_all(event) {
                this.Dump(1).expanded(true);
            }
        }
        __decorate([
            $mol_mem
        ], $mol_dump_list.prototype, "sub", null);
        $$.$mol_dump_list = $mol_dump_list;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/dump/list/list.view.css", "[mol_dump_list] {\n\talign-items: flex-start;\n\tgap: var(--mol_gap_space);\n}\n\n[mol_dump_list_dump]:first-child {\n\tposition: sticky;\n\ttop: 0;\n}\n");
})($ || ($ = {}));

;
	($.$mol_dump_value) = class $mol_dump_value extends ($.$mol_view) {
		simple(){
			return "";
		}
		Simple(){
			const obj = new this.$.$mol_text_code();
			(obj.text) = () => ((this.simple()));
			return obj;
		}
		expanded(next){
			if(next !== undefined) return next;
			return false;
		}
		expandable(){
			return true;
		}
		expand_all(next){
			if(next !== undefined) return next;
			return null;
		}
		expand_title(){
			return "";
		}
		Expand_title(){
			const obj = new this.$.$mol_text_code();
			(obj.text) = () => ((this.expand_title()));
			return obj;
		}
		Expand_head(){
			const obj = new this.$.$mol_check_expand();
			(obj.minimal_height) = () => (24);
			(obj.minimal_width) = () => (24);
			(obj.expanded) = (next) => ((this.expanded(next)));
			(obj.expandable) = () => ((this.expandable()));
			(obj.clicks) = (next) => ((this.expand_all(next)));
			(obj.label) = () => ([(this.Expand_title())]);
			return obj;
		}
		preview_dom(){
			return null;
		}
		preview(){
			return null;
		}
		Preview_dom(){
			const obj = new this.$.$mol_view();
			(obj.dom_node) = () => ((this.preview_dom()));
			(obj.render) = () => ((this.preview()));
			return obj;
		}
		Preview(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Preview_dom())]);
			return obj;
		}
		row_values(id){
			return [];
		}
		prototypes(){
			return false;
		}
		Row(id){
			const obj = new this.$.$mol_dump_list();
			(obj.values) = () => ((this.row_values(id)));
			(obj.prototypes) = () => ((this.prototypes()));
			(obj.preview_show) = () => ((this.preview_show()));
			return obj;
		}
		expand_content(){
			return [(this.Preview()), (this.Row("0"))];
		}
		Expand(){
			const obj = new this.$.$mol_expander();
			(obj.expanded) = (next) => ((this.expanded(next)));
			(obj.Trigger) = () => ((this.Expand_head()));
			(obj.content) = () => ((this.expand_content()));
			return obj;
		}
		value(next){
			if(next !== undefined) return next;
			return null;
		}
		preview_show(next){
			if(next !== undefined) return next;
			return true;
		}
		sub(){
			return [(this.Simple()), (this.Expand())];
		}
	};
	($mol_mem(($.$mol_dump_value.prototype), "Simple"));
	($mol_mem(($.$mol_dump_value.prototype), "expanded"));
	($mol_mem(($.$mol_dump_value.prototype), "expand_all"));
	($mol_mem(($.$mol_dump_value.prototype), "Expand_title"));
	($mol_mem(($.$mol_dump_value.prototype), "Expand_head"));
	($mol_mem(($.$mol_dump_value.prototype), "Preview_dom"));
	($mol_mem(($.$mol_dump_value.prototype), "Preview"));
	($mol_mem_key(($.$mol_dump_value.prototype), "Row"));
	($mol_mem(($.$mol_dump_value.prototype), "Expand"));
	($mol_mem(($.$mol_dump_value.prototype), "value"));
	($mol_mem(($.$mol_dump_value.prototype), "preview_show"));


;
"use strict";
var $;
(function ($) {
    function $mol_try(handler) {
        try {
            return handler();
        }
        catch (error) {
            return error;
        }
    }
    $.$mol_try = $mol_try;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_dump_value extends $.$mol_dump_value {
            sub() {
                const value = this.value();
                if (!value)
                    return [this.Simple()];
                if (typeof value === 'object')
                    return [this.Expand()];
                if (typeof value === 'function')
                    return [this.Expand()];
                return [this.Simple()];
            }
            simple() {
                const value = this.value();
                if (typeof value === 'number')
                    return value.toLocaleString('en').replaceAll(',', '_');
                if (typeof value === 'bigint')
                    return value.toLocaleString('en').replaceAll(',', '_');
                return value ? String(value) : JSON.stringify(value) ?? 'undefined';
            }
            expand_title() {
                const value = this.value();
                if (typeof value === 'function') {
                    const name = Reflect.getOwnPropertyDescriptor(value, 'name')?.value;
                    const source = Function.prototype.toString.call(value);
                    const args = source.match(/^[^{=>]*?\(([\s\S]*?)\)/)?.[1] ?? source.match(/^([$\w]+)\s+=>/)?.[1] ?? '';
                    if (name)
                        return name + '(' + args + ')';
                }
                if (value instanceof RegExp)
                    return String(value);
                if (value instanceof Date)
                    return value.toISOString();
                const kind = Reflect.getOwnPropertyDescriptor(value, Symbol.toStringTag)?.value
                    ?? value.constructor.name
                    ?? 'Object';
                if (value instanceof Node) {
                    try {
                        switch (value.nodeType) {
                            case value.TEXT_NODE: return kind + ' ' + value.nodeValue?.trim();
                            case value.ELEMENT_NODE: return `<${value.localName}> ${value.id}`;
                            case value.DOCUMENT_NODE: return kind + ' ' + value.baseURI;
                        }
                    }
                    catch { }
                }
                return kind;
            }
            rows_values() {
                let value = this.value();
                const res = [];
                if (value instanceof Map) {
                    for (const [key, val] of value) {
                        res.push([key, '▶', val]);
                    }
                }
                if (value instanceof Set) {
                    for (const val of value) {
                        res.push([val]);
                    }
                }
                if (value instanceof Function) {
                    let source = Function.prototype.toString.call(value)
                        .replace(/^.*?\{\r?\n?/, '')
                        .replace(/}$/, '')
                        .trimEnd();
                    const indent = source.match(/^\s*/)[0];
                    source = source.replace(new RegExp(`^${indent}`, 'gm'), '\t');
                    res.push([source]);
                }
                if (value instanceof Element) {
                    try {
                        for (const kid of value.childNodes) {
                            res.push([kid]);
                        }
                        for (const attr of value.attributes) {
                            if (attr.nodeName === 'id')
                                continue;
                            res.push([attr.nodeName, '=', attr.nodeValue]);
                        }
                    }
                    catch { }
                }
                if (value && (typeof value === 'object' || typeof value === 'function')) {
                    for (const key of Reflect.ownKeys(value)) {
                        const prefix = String(key) + '∶';
                        const descr = Reflect.getOwnPropertyDescriptor(value, key);
                        if ('value' in descr) {
                            const line = [prefix, descr.value];
                            res.push(line);
                        }
                        else {
                            res.push([prefix, descr.get, descr.set]);
                        }
                    }
                    if (this.prototypes()) {
                        res.push(['__proto__:', Reflect.getPrototypeOf(value)]);
                    }
                }
                return res;
            }
            preview_dom() {
                const value = this.value();
                if (value instanceof Element) {
                    if ($mol_try(() => value.localName) instanceof Error)
                        return null;
                    if (value.isConnected)
                        return null;
                    return value;
                }
                return null;
            }
            expand_content() {
                return [
                    ...this.preview_show() && this.preview_dom() ? [this.Preview()] : [],
                    ...this.rows_values().map((_, index) => this.Row(index)),
                ];
            }
            expandable() {
                return this.expand_content().length > 0;
            }
            row_values(index) {
                return this.rows_values()[index];
            }
            expand_all(event) {
                this.expanded(true);
                for (const row of this.expand_content()) {
                    if (!(row instanceof $mol_dump_list))
                        continue;
                    if (row.values()[0] === '__proto__:')
                        continue;
                    row.expand_all(event);
                }
            }
        }
        __decorate([
            $mol_mem
        ], $mol_dump_value.prototype, "sub", null);
        __decorate([
            $mol_mem
        ], $mol_dump_value.prototype, "simple", null);
        __decorate([
            $mol_mem
        ], $mol_dump_value.prototype, "expand_title", null);
        __decorate([
            $mol_mem
        ], $mol_dump_value.prototype, "rows_values", null);
        __decorate([
            $mol_mem
        ], $mol_dump_value.prototype, "preview_dom", null);
        __decorate([
            $mol_mem
        ], $mol_dump_value.prototype, "expand_content", null);
        $$.$mol_dump_value = $mol_dump_value;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/dump/value/value.view.css", "[mol_dump_value] {\n\tmin-height: 2.5rem;\n\tmin-width: 2.5rem;\n}\n\n[mol_dump_value_simple] {\n\tpadding: 0;\n}\n\n[mol_dump_value_expand_content] {\n\tpadding-left: 1.5rem;\n\talign-items: flex-start;\n}\n\n[mol_dump_value_expand_title_rows],\n[mol_dump_value_simple_rows],\n[mol_dump_value_expand_head] {\n\tpadding: 0;\n\tgap: 0;\n}\n");
})($ || ($ = {}));

;
	($.$shm_hitalama_duckdb_page) = class $shm_hitalama_duckdb_page extends ($.$mol_book2) {
		remote_url(){
			return "https://hitalama.github.io/hitalama-mol/shm/hitalama/duckdb/parquet/demo.parquet";
		}
		project_id(next){
			if(next !== undefined) return next;
			return "";
		}
		projects_dict(){
			return {};
		}
		Project(){
			const obj = new this.$.$mol_select();
			(obj.value) = (next) => ((this.project_id(next)));
			(obj.dictionary) = () => ((this.projects_dict()));
			return obj;
		}
		Project_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Выберите проект");
			(obj.content) = () => ([(this.Project())]);
			return obj;
		}
		file_name(id){
			return "";
		}
		file_checked(id, next){
			if(next !== undefined) return next;
			return true;
		}
		File_check(id){
			const obj = new this.$.$mol_check_box();
			(obj.title) = () => ((this.file_name(id)));
			(obj.checked) = (next) => ((this.file_checked(id, next)));
			return obj;
		}
		query_default(id, next){
			if(next !== undefined) return next;
			return "";
		}
		Copy_icon(id){
			const obj = new this.$.$mol_icon_clipboard_outline();
			return obj;
		}
		File_name_copy(id){
			const obj = new this.$.$mol_button_copy();
			(obj.title) = () => ((this.query_default(id)));
			(obj.sub) = () => ([(this.Copy_icon(id))]);
			return obj;
		}
		File(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.File_check(id)), (this.File_name_copy(id))]);
			return obj;
		}
		file_views(){
			return [(this.File("0"))];
		}
		Files_list(){
			const obj = new this.$.$mol_list();
			(obj.sub) = () => ((this.file_views()));
			return obj;
		}
		Files_scroll(){
			const obj = new this.$.$mol_scroll();
			(obj.sub) = () => ([(this.Files_list())]);
			return obj;
		}
		Files_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Выберите файлы");
			(obj.content) = () => ([(this.Files_scroll())]);
			return obj;
		}
		files_label(){
			return [(this.Files_label())];
		}
		Project_and_files(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Project_label()), ...(this.files_label())]);
			return obj;
		}
		query(next){
			if(next !== undefined) return next;
			return "";
		}
		Query(){
			const obj = new this.$.$mol_textarea();
			(obj.value) = (next) => ((this.query(next)));
			(obj.hint) = () => ("");
			return obj;
		}
		Query_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("SQL-запрос");
			(obj.content) = () => ([(this.Query())]);
			return obj;
		}
		run(next){
			if(next !== undefined) return next;
			return null;
		}
		Run(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ("Выполнить");
			(obj.click) = (next) => ((this.run(next)));
			return obj;
		}
		duckdb_res(next){
			if(next !== undefined) return next;
			return null;
		}
		Duckdb_dump(){
			const obj = new this.$.$mol_dump_value();
			(obj.value) = () => ((this.duckdb_res()));
			return obj;
		}
		Query_page(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ("DuckDB");
			(obj.body) = () => ([
				(this.Project_and_files()), 
				(this.Query_label()), 
				(this.Run()), 
				(this.Duckdb_dump())
			]);
			return obj;
		}
		logs_project_id(next){
			if(next !== undefined) return next;
			return "";
		}
		Logs_project(){
			const obj = new this.$.$mol_select();
			(obj.value) = (next) => ((this.logs_project_id(next)));
			(obj.dictionary) = () => ((this.projects_dict()));
			return obj;
		}
		logs_clear(next){
			if(next !== undefined) return next;
			return null;
		}
		Logs_clear(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ("Очистить");
			(obj.click) = (next) => ((this.logs_clear(next)));
			return obj;
		}
		query_time(id){
			return "";
		}
		Query_time(id){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.query_time(id)));
			return obj;
		}
		query_sql(id){
			return "";
		}
		Query_copy(id){
			const obj = new this.$.$mol_button_copy();
			(obj.minimal_height) = () => (24);
			(obj.title) = () => ((this.query_sql(id)));
			(obj.sub) = () => (["Копировать"]);
			return obj;
		}
		Query_head(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Query_time(id)), (this.Query_copy(id))]);
			return obj;
		}
		Log_sql(id){
			const obj = new this.$.$mol_text_code();
			(obj.text) = () => ((this.query_sql(id)));
			return obj;
		}
		Query_log(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Query_head(id)), (this.Log_sql(id))]);
			return obj;
		}
		logs(){
			return [(this.Query_log("0"))];
		}
		Logs(){
			const obj = new this.$.$mol_page();
			(obj.title) = () => ("Лог запросов");
			(obj.tools) = () => ([(this.Logs_project()), (this.Logs_clear())]);
			(obj.body) = () => ((this.logs()));
			return obj;
		}
		query_current(next){
			if(next !== undefined) return next;
			return "";
		}
		remote_file_urls(){
			return [(this.remote_url())];
		}
		pages(){
			return [(this.Query_page()), (this.Logs())];
		}
	};
	($mol_mem(($.$shm_hitalama_duckdb_page.prototype), "project_id"));
	($mol_mem(($.$shm_hitalama_duckdb_page.prototype), "Project"));
	($mol_mem(($.$shm_hitalama_duckdb_page.prototype), "Project_label"));
	($mol_mem_key(($.$shm_hitalama_duckdb_page.prototype), "file_checked"));
	($mol_mem_key(($.$shm_hitalama_duckdb_page.prototype), "File_check"));
	($mol_mem_key(($.$shm_hitalama_duckdb_page.prototype), "query_default"));
	($mol_mem_key(($.$shm_hitalama_duckdb_page.prototype), "Copy_icon"));
	($mol_mem_key(($.$shm_hitalama_duckdb_page.prototype), "File_name_copy"));
	($mol_mem_key(($.$shm_hitalama_duckdb_page.prototype), "File"));
	($mol_mem(($.$shm_hitalama_duckdb_page.prototype), "Files_list"));
	($mol_mem(($.$shm_hitalama_duckdb_page.prototype), "Files_scroll"));
	($mol_mem(($.$shm_hitalama_duckdb_page.prototype), "Files_label"));
	($mol_mem(($.$shm_hitalama_duckdb_page.prototype), "Project_and_files"));
	($mol_mem(($.$shm_hitalama_duckdb_page.prototype), "query"));
	($mol_mem(($.$shm_hitalama_duckdb_page.prototype), "Query"));
	($mol_mem(($.$shm_hitalama_duckdb_page.prototype), "Query_label"));
	($mol_mem(($.$shm_hitalama_duckdb_page.prototype), "run"));
	($mol_mem(($.$shm_hitalama_duckdb_page.prototype), "Run"));
	($mol_mem(($.$shm_hitalama_duckdb_page.prototype), "duckdb_res"));
	($mol_mem(($.$shm_hitalama_duckdb_page.prototype), "Duckdb_dump"));
	($mol_mem(($.$shm_hitalama_duckdb_page.prototype), "Query_page"));
	($mol_mem(($.$shm_hitalama_duckdb_page.prototype), "logs_project_id"));
	($mol_mem(($.$shm_hitalama_duckdb_page.prototype), "Logs_project"));
	($mol_mem(($.$shm_hitalama_duckdb_page.prototype), "logs_clear"));
	($mol_mem(($.$shm_hitalama_duckdb_page.prototype), "Logs_clear"));
	($mol_mem_key(($.$shm_hitalama_duckdb_page.prototype), "Query_time"));
	($mol_mem_key(($.$shm_hitalama_duckdb_page.prototype), "Query_copy"));
	($mol_mem_key(($.$shm_hitalama_duckdb_page.prototype), "Query_head"));
	($mol_mem_key(($.$shm_hitalama_duckdb_page.prototype), "Log_sql"));
	($mol_mem_key(($.$shm_hitalama_duckdb_page.prototype), "Query_log"));
	($mol_mem(($.$shm_hitalama_duckdb_page.prototype), "Logs"));
	($mol_mem(($.$shm_hitalama_duckdb_page.prototype), "query_current"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_duckdb_page, {
            Query: {
                flex: {
                    shrink: 1,
                },
            },
            Duckdb_dump: {
                padding: {
                    left: $mol_gap.block,
                    top: '2rem',
                },
            },
            Query_page: {
                flex: {
                    grow: 1,
                },
            },
            Project_label: {
                flex: {
                    grow: 1,
                },
            },
            Files_label: {
                flex: {
                    grow: 1,
                },
                align: {
                    self: 'flex-start',
                },
            },
            Query_log: {
                background: {
                    color: $mol_theme.card,
                },
                flex: {
                    direction: 'row',
                },
                lineHeight: '1.15',
                font: {
                    size: '12px',
                },
            },
            Query_time: {
                color: $mol_theme.shade,
                padding: $mol_gap.text,
                margin: {},
            },
            Query_head: {
                flex: {
                    direction: 'column',
                },
            },
            Logs: {
                width: '30rem',
                flex: {
                    grow: 0.5,
                },
                Body_content: {
                    gap: $mol_gap.space,
                },
                Tools: {
                    justify: {
                        content: 'flex-start',
                    },
                },
            },
            Logs_clear: {
                margin: {
                    left: 'auto',
                },
            },
            Log_sql: {
                flex: {
                    shrink: 1,
                },
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_icon_open_in_new) = class $mol_icon_open_in_new extends ($.$mol_icon) {
		path(){
			return "M14,3V5H17.59L7.76,14.83L9.17,16.24L19,6.41V10H21V3M19,19H5V5H12V3H5C3.89,3 3,3.9 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V12H19V19Z";
		}
	};


;
"use strict";

;
	($.$mol_form_field) = class $mol_form_field extends ($.$mol_labeler) {
		name(){
			return "";
		}
		bid(){
			return "";
		}
		Bid(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.bid())]);
			return obj;
		}
		control(){
			return null;
		}
		bids(){
			return [];
		}
		label(){
			return [(this.name()), (this.Bid())];
		}
		content(){
			return [(this.control())];
		}
	};
	($mol_mem(($.$mol_form_field.prototype), "Bid"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_form_field extends $.$mol_form_field {
            bid() {
                return this.bids().filter(Boolean)[0] ?? '';
            }
        }
        __decorate([
            $mol_mem
        ], $mol_form_field.prototype, "bid", null);
        $$.$mol_form_field = $mol_form_field;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/form/field/field.view.css", "[mol_form_field] {\n\talign-items: stretch;\n}\n\n[mol_form_field_bid] {\n\tcolor: var(--mol_theme_focus);\n\tdisplay: inline-block;\n\ttext-shadow: 0 0;\n}\n\n[mol_form_field_content] {\n\tborder-radius: var(--mol_gap_round);\n}\n");
})($ || ($ = {}));

;
	($.$mol_icon_download) = class $mol_icon_download extends ($.$mol_icon) {
		path(){
			return "M5,20H19V18H5M19,9H15V3H9V9H5L12,16L19,9Z";
		}
	};


;
"use strict";

;
	($.$mol_button_download) = class $mol_button_download extends ($.$mol_button_minor) {
		Icon(){
			const obj = new this.$.$mol_icon_download();
			return obj;
		}
		title(){
			return "";
		}
		blob(){
			return null;
		}
		uri(){
			return "";
		}
		file_name(){
			return "blob.bin";
		}
		sub(){
			return [(this.Icon()), (this.title())];
		}
	};
	($mol_mem(($.$mol_button_download.prototype), "Icon"));


;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_button_download extends $.$mol_button_download {
            uri() {
                return URL.createObjectURL(this.blob());
            }
            click() {
                const a = $mol_jsx("a", { href: this.uri(), download: this.file_name() });
                a.click();
            }
        }
        __decorate([
            $mol_mem
        ], $mol_button_download.prototype, "uri", null);
        $$.$mol_button_download = $mol_button_download;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";

;
	($.$shm_hitalama_contextmenu) = class $shm_hitalama_contextmenu extends ($.$mol_view) {
		body(){
			return [];
		}
		Body(){
			const obj = new this.$.$mol_list();
			(obj.sub) = () => ((this.body()));
			return obj;
		}
		left(next){
			if(next !== undefined) return next;
			return "0px";
		}
		top(next){
			if(next !== undefined) return next;
			return "0px";
		}
		pointerenter(next){
			if(next !== undefined) return next;
			return null;
		}
		pointerleave(next){
			if(next !== undefined) return next;
			return null;
		}
		pointerdown_listener(){
			return null;
		}
		sub(){
			return [(this.Body())];
		}
		pos(next){
			if(next !== undefined) return next;
			return [0, 0];
		}
		show(next){
			if(next !== undefined) return next;
			return null;
		}
		style(){
			return {"left": (this.left()), "top": (this.top())};
		}
		event(){
			return {"pointerenter": (next) => (this.pointerenter(next)), "pointerleave": (next) => (this.pointerleave(next))};
		}
		hovered(next){
			if(next !== undefined) return next;
			return false;
		}
		showed(next){
			if(next !== undefined) return next;
			return false;
		}
		auto(){
			return [(this.pointerdown_listener())];
		}
	};
	($mol_mem(($.$shm_hitalama_contextmenu.prototype), "Body"));
	($mol_mem(($.$shm_hitalama_contextmenu.prototype), "left"));
	($mol_mem(($.$shm_hitalama_contextmenu.prototype), "top"));
	($mol_mem(($.$shm_hitalama_contextmenu.prototype), "pointerenter"));
	($mol_mem(($.$shm_hitalama_contextmenu.prototype), "pointerleave"));
	($mol_mem(($.$shm_hitalama_contextmenu.prototype), "pos"));
	($mol_mem(($.$shm_hitalama_contextmenu.prototype), "show"));
	($mol_mem(($.$shm_hitalama_contextmenu.prototype), "hovered"));
	($mol_mem(($.$shm_hitalama_contextmenu.prototype), "showed"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_contextmenu extends $.$shm_hitalama_contextmenu {
            pointerenter(next) {
                this.hovered(true);
            }
            pointerleave(next) {
                this.hovered(false);
            }
            left() {
                return this.pos()[0] + 'px';
            }
            top() {
                return this.pos()[1] + 'px';
            }
            pointerdown_listener() {
                return new $mol_dom_listener(this.$.$mol_dom_context.document, 'pointerdown', $mol_wire_async(event => {
                    if (!this.hovered())
                        this.showed(false);
                }));
            }
            show(pos) {
                this.pos(pos);
                this.showed(true);
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_contextmenu.prototype, "left", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_contextmenu.prototype, "top", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_contextmenu.prototype, "pointerdown_listener", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_contextmenu.prototype, "show", null);
        $$.$shm_hitalama_contextmenu = $shm_hitalama_contextmenu;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_contextmenu, {
            position: 'absolute',
            zIndex: $mol_layer.popup,
            whiteSpace: 'nowrap',
            background: {
                color: $mol_theme.back,
            },
            border: {
                radius: $mol_gap.round,
            },
            outline: 'solid 1px var(--mol_theme_line)',
            transition: 'none',
            Body: {
                background: {
                    color: $mol_theme.card,
                },
                border: {
                    radius: $mol_gap.round,
                },
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$rise_drag) = class $rise_drag extends ($.$mol_plugin) {
		pointerdown(next){
			if(next !== undefined) return next;
			return null;
		}
		dragged(next){
			if(next !== undefined) return next;
			return false;
		}
		x(next){
			if(next !== undefined) return next;
			return 0;
		}
		y(next){
			if(next !== undefined) return next;
			return 0;
		}
		repos_x(id){
			return 1;
		}
		repos_y(id){
			return 1;
		}
		on_drag(next){
			if(next !== undefined) return next;
			return null;
		}
		on_drag_start(next){
			if(next !== undefined) return next;
			return null;
		}
		on_drag_end(next){
			if(next !== undefined) return next;
			return null;
		}
		drag(next){
			if(next !== undefined) return next;
			return null;
		}
		drag_start(next){
			if(next !== undefined) return next;
			return null;
		}
		drag_end(next){
			if(next !== undefined) return next;
			return null;
		}
		use_buttons(){
			return [0];
		}
		event(){
			return {...(super.event()), "pointerdown": (next) => (this.pointerdown(next))};
		}
		attr(){
			return {...(super.attr()), "rise_dragged": (this.dragged())};
		}
		drags_synced(){
			return [];
		}
	};
	($mol_mem(($.$rise_drag.prototype), "pointerdown"));
	($mol_mem(($.$rise_drag.prototype), "dragged"));
	($mol_mem(($.$rise_drag.prototype), "x"));
	($mol_mem(($.$rise_drag.prototype), "y"));
	($mol_mem(($.$rise_drag.prototype), "on_drag"));
	($mol_mem(($.$rise_drag.prototype), "on_drag_start"));
	($mol_mem(($.$rise_drag.prototype), "on_drag_end"));
	($mol_mem(($.$rise_drag.prototype), "drag"));
	($mol_mem(($.$rise_drag.prototype), "drag_start"));
	($mol_mem(($.$rise_drag.prototype), "drag_end"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $rise_drag extends $.$rise_drag {
            repos_x(val) {
                return val;
            }
            repos_y(val) {
                return val;
            }
            start_event;
            start_pos;
            drag_start(event) {
                this.start_event = event;
                this.start_pos = { x: this.x(), y: this.y() };
                this.dragged(true);
                this.on_drag_start(event);
            }
            drag(event) {
                this.x(this.start_pos.x + this.repos_x(event.x - this.start_event.x));
                this.y(this.start_pos.y + this.repos_y(event.y - this.start_event.y));
                this.on_drag(event);
            }
            drag_end(event) {
                this.dragged(false);
                this.on_drag_end(event);
            }
            pointerdown(event) {
                if (!this.use_buttons().includes(event.button))
                    return;
                this.drag_start(event);
                this.drags_synced().forEach(d => d.drag_start(event));
                const mousemove = new $mol_dom_listener(this.$.$mol_dom_context.document, 'mousemove', $mol_wire_async(event => {
                    this.drag(event);
                    this.drags_synced().forEach(d => d.drag(event));
                }));
                const mouseup = new $mol_dom_listener(this.$.$mol_dom_context.document, 'mouseup', $mol_wire_async(event => {
                    this.drag_end(event);
                    this.drags_synced().forEach(d => d.drag_end(event));
                    mouseup?.destructor();
                    mousemove?.destructor();
                }));
            }
        }
        $$.$rise_drag = $rise_drag;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$rise_drag_view) = class $rise_drag_view extends ($.$mol_view) {
		on_drag_start(next){
			if(next !== undefined) return next;
			return null;
		}
		on_drag_end(next){
			if(next !== undefined) return next;
			return null;
		}
		on_drag(next){
			if(next !== undefined) return next;
			return null;
		}
		dragged(){
			return (this.Drag().dragged());
		}
		y(next){
			if(next !== undefined) return next;
			return 0;
		}
		x(next){
			if(next !== undefined) return next;
			return 0;
		}
		drags_synced(){
			return [];
		}
		repos_x(id){
			return 1;
		}
		repos_y(id){
			return 1;
		}
		Drag(){
			const obj = new this.$.$rise_drag();
			(obj.on_drag_start) = (next) => ((this.on_drag_start(next)));
			(obj.on_drag_end) = (next) => ((this.on_drag_end(next)));
			(obj.on_drag) = (next) => ((this.on_drag(next)));
			(obj.y) = (next) => ((this.y(next)));
			(obj.x) = (next) => ((this.x(next)));
			(obj.drags_synced) = () => ((this.drags_synced()));
			(obj.repos_x) = (id) => ((this.repos_x(id)));
			(obj.repos_y) = (id) => ((this.repos_y(id)));
			return obj;
		}
		plugins(){
			return [...(super.plugins()), (this.Drag())];
		}
		style(){
			return {...(super.style()), "userSelect": "none"};
		}
	};
	($mol_mem(($.$rise_drag_view.prototype), "on_drag_start"));
	($mol_mem(($.$rise_drag_view.prototype), "on_drag_end"));
	($mol_mem(($.$rise_drag_view.prototype), "on_drag"));
	($mol_mem(($.$rise_drag_view.prototype), "y"));
	($mol_mem(($.$rise_drag_view.prototype), "x"));
	($mol_mem(($.$rise_drag_view.prototype), "Drag"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $rise_drag_view extends $.$rise_drag_view {
            repos_x(val) {
                return val;
            }
            repos_y(val) {
                return val;
            }
        }
        $$.$rise_drag_view = $rise_drag_view;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$rise_resize) = class $rise_resize extends ($.$mol_view) {
		drag_body(){
			return [];
		}
		x(next){
			if(next !== undefined) return next;
			return 0;
		}
		y(next){
			if(next !== undefined) return next;
			return 0;
		}
		on_drag_start(next){
			if(next !== undefined) return next;
			return null;
		}
		on_drag_end(next){
			if(next !== undefined) return next;
			return null;
		}
		dragged(){
			return (this.Drag_view().dragged());
		}
		drags_synced(){
			return [];
		}
		Drag(){
			return (this.Drag_view().Drag());
		}
		repos_x(id){
			return 1;
		}
		repos_y(id){
			return 1;
		}
		Drag_view(){
			const obj = new this.$.$rise_drag_view();
			(obj.sub) = () => ((this.drag_body()));
			(obj.x) = (next) => ((this.x(next)));
			(obj.y) = (next) => ((this.y(next)));
			(obj.on_drag_start) = (next) => ((this.on_drag_start(next)));
			(obj.on_drag_end) = (next) => ((this.on_drag_end(next)));
			(obj.drags_synced) = () => ((this.drags_synced()));
			(obj.repos_x) = (id) => ((this.repos_x(id)));
			(obj.repos_y) = (id) => ((this.repos_y(id)));
			return obj;
		}
		content(){
			return [(this.Drag_view())];
		}
		Fullsize_wrapper(){
			const obj = new this.$.$mol_view();
			(obj.style) = () => ({"minHeight": "100%", "minWidth": "100%"});
			(obj.sub) = () => ((this.content()));
			return obj;
		}
		content_wrapper(){
			return [(this.Fullsize_wrapper())];
		}
		Content(){
			const obj = new this.$.$mol_scroll();
			(obj.sub) = () => ((this.content_wrapper()));
			return obj;
		}
		resize_start(next){
			if(next !== undefined) return next;
			return null;
		}
		resize_end(next){
			if(next !== undefined) return next;
			return null;
		}
		top_edge_y(next){
			if(next !== undefined) return next;
			return 0;
		}
		Top_edge(){
			const obj = new this.$.$rise_resize_edge();
			(obj.repos_x) = (id) => ((this.repos_x(id)));
			(obj.repos_y) = (id) => ((this.repos_y(id)));
			(obj.on_drag_start) = (next) => ((this.resize_start(next)));
			(obj.on_drag_end) = (next) => ((this.resize_end(next)));
			(obj.y) = (next) => ((this.top_edge_y(next)));
			return obj;
		}
		left_edge_x(next){
			if(next !== undefined) return next;
			return 0;
		}
		Left_edge(){
			const obj = new this.$.$rise_resize_edge();
			(obj.repos_x) = (id) => ((this.repos_x(id)));
			(obj.repos_y) = (id) => ((this.repos_y(id)));
			(obj.on_drag_start) = (next) => ((this.resize_start(next)));
			(obj.on_drag_end) = (next) => ((this.resize_end(next)));
			(obj.x) = (next) => ((this.left_edge_x(next)));
			return obj;
		}
		bottom_edge_y(next){
			if(next !== undefined) return next;
			return 0;
		}
		Bottom_edge(){
			const obj = new this.$.$rise_resize_edge();
			(obj.repos_x) = (id) => ((this.repos_x(id)));
			(obj.repos_y) = (id) => ((this.repos_y(id)));
			(obj.on_drag_start) = (next) => ((this.resize_start(next)));
			(obj.on_drag_end) = (next) => ((this.resize_end(next)));
			(obj.y) = (next) => ((this.bottom_edge_y(next)));
			return obj;
		}
		right_edge_x(next){
			if(next !== undefined) return next;
			return 0;
		}
		Right_edge(){
			const obj = new this.$.$rise_resize_edge();
			(obj.repos_x) = (id) => ((this.repos_x(id)));
			(obj.repos_y) = (id) => ((this.repos_y(id)));
			(obj.on_drag_start) = (next) => ((this.resize_start(next)));
			(obj.on_drag_end) = (next) => ((this.resize_end(next)));
			(obj.x) = (next) => ((this.right_edge_x(next)));
			return obj;
		}
		Top_left_edge(){
			const obj = new this.$.$rise_resize_edge();
			(obj.repos_x) = (id) => ((this.repos_x(id)));
			(obj.repos_y) = (id) => ((this.repos_y(id)));
			(obj.on_drag_start) = (next) => ((this.resize_start(next)));
			(obj.on_drag_end) = (next) => ((this.resize_end(next)));
			(obj.y) = (next) => ((this.top_edge_y(next)));
			(obj.x) = (next) => ((this.left_edge_x(next)));
			return obj;
		}
		Top_right_edge(){
			const obj = new this.$.$rise_resize_edge();
			(obj.repos_x) = (id) => ((this.repos_x(id)));
			(obj.repos_y) = (id) => ((this.repos_y(id)));
			(obj.on_drag_start) = (next) => ((this.resize_start(next)));
			(obj.on_drag_end) = (next) => ((this.resize_end(next)));
			(obj.y) = (next) => ((this.top_edge_y(next)));
			(obj.x) = (next) => ((this.right_edge_x(next)));
			return obj;
		}
		Bottom_left_edge(){
			const obj = new this.$.$rise_resize_edge();
			(obj.repos_x) = (id) => ((this.repos_x(id)));
			(obj.repos_y) = (id) => ((this.repos_y(id)));
			(obj.on_drag_start) = (next) => ((this.resize_start(next)));
			(obj.on_drag_end) = (next) => ((this.resize_end(next)));
			(obj.y) = (next) => ((this.bottom_edge_y(next)));
			(obj.x) = (next) => ((this.left_edge_x(next)));
			return obj;
		}
		Bottom_right_edge(){
			const obj = new this.$.$rise_resize_edge();
			(obj.repos_x) = (id) => ((this.repos_x(id)));
			(obj.repos_y) = (id) => ((this.repos_y(id)));
			(obj.on_drag_start) = (next) => ((this.resize_start(next)));
			(obj.on_drag_end) = (next) => ((this.resize_end(next)));
			(obj.y) = (next) => ((this.bottom_edge_y(next)));
			(obj.x) = (next) => ((this.right_edge_x(next)));
			return obj;
		}
		edges(){
			return [
				(this.Top_edge()), 
				(this.Left_edge()), 
				(this.Bottom_edge()), 
				(this.Right_edge()), 
				(this.Top_left_edge()), 
				(this.Top_right_edge()), 
				(this.Bottom_left_edge()), 
				(this.Bottom_right_edge())
			];
		}
		vals_to_sticks(){
			return null;
		}
		top_px(){
			return "0px";
		}
		left_px(){
			return "0px";
		}
		height_px(){
			return "20px";
		}
		width_px(){
			return "20px";
		}
		sub(){
			return [(this.Content()), ...(this.edges())];
		}
		resizing(next){
			if(next !== undefined) return next;
			return false;
		}
		height_min(){
			return 20;
		}
		width_min(){
			return 20;
		}
		height(){
			return 0;
		}
		width(){
			return 0;
		}
		top(){
			return 0;
		}
		left(){
			return 0;
		}
		stick_threshold(){
			return 10;
		}
		x_stick(next){
			if(next !== undefined) return next;
			return 0;
		}
		y_stick(next){
			if(next !== undefined) return next;
			return 0;
		}
		bottom_edge_y_stick(next){
			if(next !== undefined) return next;
			return (this.height_min());
		}
		right_edge_x_stick(next){
			if(next !== undefined) return next;
			return (this.width_min());
		}
		top_edge_y_stick(next){
			if(next !== undefined) return next;
			return 0;
		}
		left_edge_x_stick(next){
			if(next !== undefined) return next;
			return 0;
		}
		sticks_y(){
			return [];
		}
		sticks_x(){
			return [];
		}
		auto(){
			return [(this.vals_to_sticks())];
		}
		style(){
			return {
				...(super.style()), 
				"top": (this.top_px()), 
				"left": (this.left_px()), 
				"height": (this.height_px()), 
				"width": (this.width_px())
			};
		}
	};
	($mol_mem(($.$rise_resize.prototype), "x"));
	($mol_mem(($.$rise_resize.prototype), "y"));
	($mol_mem(($.$rise_resize.prototype), "on_drag_start"));
	($mol_mem(($.$rise_resize.prototype), "on_drag_end"));
	($mol_mem(($.$rise_resize.prototype), "Drag_view"));
	($mol_mem(($.$rise_resize.prototype), "Fullsize_wrapper"));
	($mol_mem(($.$rise_resize.prototype), "Content"));
	($mol_mem(($.$rise_resize.prototype), "resize_start"));
	($mol_mem(($.$rise_resize.prototype), "resize_end"));
	($mol_mem(($.$rise_resize.prototype), "top_edge_y"));
	($mol_mem(($.$rise_resize.prototype), "Top_edge"));
	($mol_mem(($.$rise_resize.prototype), "left_edge_x"));
	($mol_mem(($.$rise_resize.prototype), "Left_edge"));
	($mol_mem(($.$rise_resize.prototype), "bottom_edge_y"));
	($mol_mem(($.$rise_resize.prototype), "Bottom_edge"));
	($mol_mem(($.$rise_resize.prototype), "right_edge_x"));
	($mol_mem(($.$rise_resize.prototype), "Right_edge"));
	($mol_mem(($.$rise_resize.prototype), "Top_left_edge"));
	($mol_mem(($.$rise_resize.prototype), "Top_right_edge"));
	($mol_mem(($.$rise_resize.prototype), "Bottom_left_edge"));
	($mol_mem(($.$rise_resize.prototype), "Bottom_right_edge"));
	($mol_mem(($.$rise_resize.prototype), "resizing"));
	($mol_mem(($.$rise_resize.prototype), "x_stick"));
	($mol_mem(($.$rise_resize.prototype), "y_stick"));
	($mol_mem(($.$rise_resize.prototype), "bottom_edge_y_stick"));
	($mol_mem(($.$rise_resize.prototype), "right_edge_x_stick"));
	($mol_mem(($.$rise_resize.prototype), "top_edge_y_stick"));
	($mol_mem(($.$rise_resize.prototype), "left_edge_x_stick"));
	($.$rise_resize_edge) = class $rise_resize_edge extends ($.$rise_drag_view) {};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $rise_resize extends $.$rise_resize {
            repos_x(val) {
                return val;
            }
            repos_y(val) {
                return val;
            }
            to_stick(sticks, val, shift) {
                for (const stick of sticks) {
                    const to_stick = stick - (val + shift);
                    if (Math.abs(to_stick) < this.stick_threshold()) {
                        return val + to_stick;
                    }
                }
                return val;
            }
            to_stick_x(val, shift) {
                return this.to_stick(this.sticks_x(), val, shift);
            }
            to_stick_y(val, shift) {
                return this.to_stick(this.sticks_y(), val, shift);
            }
            y(next) {
                if (next === undefined)
                    return 0;
                const top_stick = this.to_stick_y(next, this.top_edge_y_stick());
                if (top_stick == next) {
                    const bottom_stick = this.to_stick_y(next, this.top_edge_y_stick() + this.height());
                    this.y_stick(bottom_stick);
                }
                else {
                    this.y_stick(top_stick);
                }
                return next;
            }
            x(next) {
                if (next === undefined)
                    return 0;
                const left_stick = this.to_stick_x(next, this.left_edge_x_stick());
                if (left_stick == next) {
                    const right_stick = this.to_stick_x(next, this.left_edge_x_stick() + this.width());
                    this.x_stick(right_stick);
                }
                else {
                    this.x_stick(left_stick);
                }
                return next;
            }
            top_edge_y(next) {
                if (next === undefined)
                    return 0;
                const limit = this.bottom_edge_y_stick() - this.height_min();
                const top_edge_y_stick = Math.min(this.to_stick_y(next, this.y_stick()), limit);
                this.top_edge_y_stick(top_edge_y_stick);
                return next;
            }
            bottom_edge_y(next) {
                if (next === undefined)
                    return 0;
                const limit = this.top_edge_y_stick() + this.height_min();
                const bottom_edge_y_stick = Math.max(this.to_stick_y(next, this.top() - this.top_edge_y_stick()), limit);
                this.bottom_edge_y_stick(bottom_edge_y_stick);
                return next;
            }
            left_edge_x(next) {
                if (next === undefined)
                    return 0;
                const limit = this.right_edge_x_stick() - this.width_min();
                const left_edge_x_stick = Math.min(this.to_stick_x(next, this.x_stick()), limit);
                this.left_edge_x_stick(left_edge_x_stick);
                return next;
            }
            right_edge_x(next) {
                if (next === undefined)
                    return 0;
                const limit = this.left_edge_x_stick() + this.width_min();
                let right_edge_x_stick = Math.max(this.to_stick_x(next, this.left() - this.left_edge_x_stick()), limit);
                this.right_edge_x_stick(right_edge_x_stick);
                return next;
            }
            top() {
                return this.y_stick() + this.top_edge_y_stick();
            }
            left() {
                return this.x_stick() + this.left_edge_x_stick();
            }
            width() {
                return this.right_edge_x_stick() - this.left_edge_x_stick();
            }
            height() {
                return this.bottom_edge_y_stick() - this.top_edge_y_stick();
            }
            height_px() {
                return this.height() + 'px';
            }
            width_px() {
                return this.width() + 'px';
            }
            top_px() {
                return this.top() + 'px';
            }
            left_px() {
                return this.left() + 'px';
            }
            on_drag_end() {
                this.vals_to_sticks();
            }
            resize_start(next) {
                this.resizing(true);
            }
            resize_end() {
                this.on_drag_end();
                this.resizing(false);
            }
            vals_to_sticks() {
                this.x(this.x_stick());
                this.y(this.y_stick());
                this.bottom_edge_y(this.bottom_edge_y_stick());
                this.right_edge_x(this.right_edge_x_stick());
                this.top_edge_y(this.top_edge_y_stick());
                this.left_edge_x(this.left_edge_x_stick());
            }
        }
        __decorate([
            $mol_mem
        ], $rise_resize.prototype, "y", null);
        __decorate([
            $mol_mem
        ], $rise_resize.prototype, "x", null);
        __decorate([
            $mol_mem
        ], $rise_resize.prototype, "top_edge_y", null);
        __decorate([
            $mol_mem
        ], $rise_resize.prototype, "bottom_edge_y", null);
        __decorate([
            $mol_mem
        ], $rise_resize.prototype, "left_edge_x", null);
        __decorate([
            $mol_mem
        ], $rise_resize.prototype, "right_edge_x", null);
        __decorate([
            $mol_mem
        ], $rise_resize.prototype, "top", null);
        __decorate([
            $mol_mem
        ], $rise_resize.prototype, "left", null);
        __decorate([
            $mol_mem
        ], $rise_resize.prototype, "width", null);
        __decorate([
            $mol_mem
        ], $rise_resize.prototype, "height", null);
        __decorate([
            $mol_mem
        ], $rise_resize.prototype, "height_px", null);
        __decorate([
            $mol_mem
        ], $rise_resize.prototype, "width_px", null);
        __decorate([
            $mol_mem
        ], $rise_resize.prototype, "top_px", null);
        __decorate([
            $mol_mem
        ], $rise_resize.prototype, "left_px", null);
        __decorate([
            $mol_action
        ], $rise_resize.prototype, "vals_to_sticks", null);
        $$.$rise_resize = $rise_resize;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        const Edge_size = 10;
        const Top_edge = {
            top: `-${Edge_size / 2}px`,
            height: `${Edge_size}px`,
        };
        const Left_edge = {
            left: `-${Edge_size / 2}px`,
            width: `${Edge_size}px`,
        };
        const Right_edge = {
            right: `-${Edge_size / 2}px`,
            width: `${Edge_size}px`,
        };
        const Bottom_edge = {
            bottom: `-${Edge_size / 2}px`,
            height: `${Edge_size}px`,
        };
        $mol_style_define($rise_resize, {
            position: 'absolute',
            transition: 'none',
            Fullsize_wrapper: {
                position: 'relative',
                height: 'auto',
                width: 'auto',
            },
            Drag_view: {
                flex: {
                    grow: 1,
                },
            },
            Top_edge: {
                cursor: 'ns-resize',
                left: 0,
                ...Top_edge,
                width: '100%',
            },
            Top_left_edge: {
                cursor: 'nwse-resize',
                ...Top_edge,
                ...Left_edge,
            },
            Top_right_edge: {
                cursor: 'nesw-resize',
                ...Top_edge,
                ...Right_edge,
            },
            Left_edge: {
                cursor: 'ew-resize',
                ...Left_edge,
                height: '100%',
            },
            Bottom_edge: {
                cursor: 'ns-resize',
                ...Bottom_edge,
                width: '100%',
            },
            Bottom_left_edge: {
                cursor: 'nesw-resize',
                ...Bottom_edge,
                ...Left_edge,
            },
            Bottom_right_edge: {
                cursor: 'nwse-resize',
                ...Bottom_edge,
                ...Right_edge,
            },
            Right_edge: {
                cursor: 'ew-resize',
                ...Right_edge,
                height: '100%',
            },
        });
        $mol_style_define($rise_resize_edge, {
            position: 'absolute',
            zIndex: $mol_layer.float,
            userSelect: 'none',
            opacity: 0.1,
            ":hover": {
                background: {
                    color: $mol_theme.shade,
                },
            },
            '[rise_dragged]': {
                'true': {
                    background: {
                        color: $mol_theme.line,
                    },
                    ":hover": {
                        background: {
                            color: $mol_theme.line,
                        },
                    },
                },
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$rise_resize_ratio) = class $rise_resize_ratio extends ($.$rise_resize) {
		left_top_edge_ratio_x(next){
			if(next !== undefined) return next;
			return 0;
		}
		Left_top_edge_ratio(){
			const obj = new this.$.$rise_resize_edge();
			(obj.repos_x) = (id) => ((this.repos_x(id)));
			(obj.repos_y) = (id) => ((this.repos_y(id)));
			(obj.on_drag_start) = (next) => ((this.resize_start(next)));
			(obj.on_drag_end) = (next) => ((this.resize_end(next)));
			(obj.x) = (next) => ((this.left_top_edge_ratio_x(next)));
			return obj;
		}
		left_bottom_edge_ratio_x(next){
			if(next !== undefined) return next;
			return 0;
		}
		Left_bottom_edge_ratio(){
			const obj = new this.$.$rise_resize_edge();
			(obj.repos_x) = (id) => ((this.repos_x(id)));
			(obj.repos_y) = (id) => ((this.repos_y(id)));
			(obj.on_drag_start) = (next) => ((this.resize_start(next)));
			(obj.on_drag_end) = (next) => ((this.resize_end(next)));
			(obj.x) = (next) => ((this.left_bottom_edge_ratio_x(next)));
			return obj;
		}
		right_bottom_edge_ratio_x(next){
			if(next !== undefined) return next;
			return 0;
		}
		Right_bottom_edge_ratio(){
			const obj = new this.$.$rise_resize_edge();
			(obj.repos_x) = (id) => ((this.repos_x(id)));
			(obj.repos_y) = (id) => ((this.repos_y(id)));
			(obj.on_drag_start) = (next) => ((this.resize_start(next)));
			(obj.on_drag_end) = (next) => ((this.resize_end(next)));
			(obj.x) = (next) => ((this.right_bottom_edge_ratio_x(next)));
			return obj;
		}
		right_top_edge_ratio_x(next){
			if(next !== undefined) return next;
			return 0;
		}
		Right_top_edge_ratio(){
			const obj = new this.$.$rise_resize_edge();
			(obj.repos_x) = (id) => ((this.repos_x(id)));
			(obj.repos_y) = (id) => ((this.repos_y(id)));
			(obj.on_drag_start) = (next) => ((this.resize_start(next)));
			(obj.on_drag_end) = (next) => ((this.resize_end(next)));
			(obj.x) = (next) => ((this.right_top_edge_ratio_x(next)));
			return obj;
		}
		top_left_edge_ratio_y(next){
			if(next !== undefined) return next;
			return 0;
		}
		Top_left_edge_ratio(){
			const obj = new this.$.$rise_resize_edge();
			(obj.repos_x) = (id) => ((this.repos_x(id)));
			(obj.repos_y) = (id) => ((this.repos_y(id)));
			(obj.on_drag_start) = (next) => ((this.resize_start(next)));
			(obj.on_drag_end) = (next) => ((this.resize_end(next)));
			(obj.y) = (next) => ((this.top_left_edge_ratio_y(next)));
			return obj;
		}
		top_right_edge_ratio_y(next){
			if(next !== undefined) return next;
			return 0;
		}
		Top_right_edge_ratio(){
			const obj = new this.$.$rise_resize_edge();
			(obj.repos_x) = (id) => ((this.repos_x(id)));
			(obj.repos_y) = (id) => ((this.repos_y(id)));
			(obj.on_drag_start) = (next) => ((this.resize_start(next)));
			(obj.on_drag_end) = (next) => ((this.resize_end(next)));
			(obj.y) = (next) => ((this.top_right_edge_ratio_y(next)));
			return obj;
		}
		bottom_left_edge_ratio_y(next){
			if(next !== undefined) return next;
			return 0;
		}
		Bottom_left_edge_ratio(){
			const obj = new this.$.$rise_resize_edge();
			(obj.repos_x) = (id) => ((this.repos_x(id)));
			(obj.repos_y) = (id) => ((this.repos_y(id)));
			(obj.on_drag_start) = (next) => ((this.resize_start(next)));
			(obj.on_drag_end) = (next) => ((this.resize_end(next)));
			(obj.y) = (next) => ((this.bottom_left_edge_ratio_y(next)));
			return obj;
		}
		bottom_right_edge_ratio_y(next){
			if(next !== undefined) return next;
			return 0;
		}
		Bottom_right_edge_ratio(){
			const obj = new this.$.$rise_resize_edge();
			(obj.repos_x) = (id) => ((this.repos_x(id)));
			(obj.repos_y) = (id) => ((this.repos_y(id)));
			(obj.on_drag_start) = (next) => ((this.resize_start(next)));
			(obj.on_drag_end) = (next) => ((this.resize_end(next)));
			(obj.y) = (next) => ((this.bottom_right_edge_ratio_y(next)));
			return obj;
		}
		ratio(){
			return 0;
		}
		edges_ratio(){
			return [
				(this.Left_top_edge_ratio()), 
				(this.Left_bottom_edge_ratio()), 
				(this.Right_bottom_edge_ratio()), 
				(this.Right_top_edge_ratio()), 
				(this.Top_left_edge_ratio()), 
				(this.Top_right_edge_ratio()), 
				(this.Bottom_left_edge_ratio()), 
				(this.Bottom_right_edge_ratio())
			];
		}
	};
	($mol_mem(($.$rise_resize_ratio.prototype), "left_top_edge_ratio_x"));
	($mol_mem(($.$rise_resize_ratio.prototype), "Left_top_edge_ratio"));
	($mol_mem(($.$rise_resize_ratio.prototype), "left_bottom_edge_ratio_x"));
	($mol_mem(($.$rise_resize_ratio.prototype), "Left_bottom_edge_ratio"));
	($mol_mem(($.$rise_resize_ratio.prototype), "right_bottom_edge_ratio_x"));
	($mol_mem(($.$rise_resize_ratio.prototype), "Right_bottom_edge_ratio"));
	($mol_mem(($.$rise_resize_ratio.prototype), "right_top_edge_ratio_x"));
	($mol_mem(($.$rise_resize_ratio.prototype), "Right_top_edge_ratio"));
	($mol_mem(($.$rise_resize_ratio.prototype), "top_left_edge_ratio_y"));
	($mol_mem(($.$rise_resize_ratio.prototype), "Top_left_edge_ratio"));
	($mol_mem(($.$rise_resize_ratio.prototype), "top_right_edge_ratio_y"));
	($mol_mem(($.$rise_resize_ratio.prototype), "Top_right_edge_ratio"));
	($mol_mem(($.$rise_resize_ratio.prototype), "bottom_left_edge_ratio_y"));
	($mol_mem(($.$rise_resize_ratio.prototype), "Bottom_left_edge_ratio"));
	($mol_mem(($.$rise_resize_ratio.prototype), "bottom_right_edge_ratio_y"));
	($mol_mem(($.$rise_resize_ratio.prototype), "Bottom_right_edge_ratio"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $rise_resize_ratio extends $.$rise_resize_ratio {
            top_edge_y_by_ratio() {
                const height_next = this.width() / this.ratio();
                const top_edge_y_stick = this.bottom_edge_y_stick() - height_next;
                this.top_edge_y_stick(top_edge_y_stick);
            }
            bottom_edge_y_by_ratio() {
                const height_next = this.width() / this.ratio();
                const bottom_edge_y_stick = height_next + this.top_edge_y_stick();
                this.bottom_edge_y_stick(bottom_edge_y_stick);
            }
            left_edge_x_by_ratio() {
                const width_next = this.height() * this.ratio();
                const left_edge_x_stick = this.right_edge_x_stick() - width_next;
                this.left_edge_x_stick(left_edge_x_stick);
            }
            right_edge_x_by_ratio() {
                const width_next = this.height() * this.ratio();
                const right_edge_x_stick = width_next + this.left_edge_x_stick();
                this.right_edge_x_stick(right_edge_x_stick);
            }
            left_top_edge_ratio_x(next) {
                if (next === undefined)
                    return 0;
                this.left_edge_x(next);
                this.top_edge_y_by_ratio();
                return next;
            }
            left_bottom_edge_ratio_x(next) {
                if (next === undefined)
                    return 0;
                this.left_edge_x(next);
                this.bottom_edge_y_by_ratio();
                return next;
            }
            right_bottom_edge_ratio_x(next) {
                if (next === undefined)
                    return 0;
                this.right_edge_x(next);
                this.bottom_edge_y_by_ratio();
                return next;
            }
            top_left_edge_ratio_y(next) {
                if (next === undefined)
                    return 0;
                this.top_edge_y(next);
                this.left_edge_x_by_ratio();
                return next;
            }
            right_top_edge_ratio_x(next) {
                if (next === undefined)
                    return 0;
                this.right_edge_x(next);
                this.top_edge_y_by_ratio();
                return next;
            }
            top_right_edge_ratio_y(next) {
                if (next === undefined)
                    return 0;
                this.top_edge_y(next);
                this.right_edge_x_by_ratio();
                return next;
            }
            bottom_left_edge_ratio_y(next) {
                if (next === undefined)
                    return 0;
                this.bottom_edge_y(next);
                this.left_edge_x_by_ratio();
                return next;
            }
            bottom_right_edge_ratio_y(next) {
                if (next === undefined)
                    return 0;
                this.bottom_edge_y(next);
                this.right_edge_x_by_ratio();
                return next;
            }
            edges() {
                return this.ratio() ? this.edges_ratio() : super.edges();
            }
            vals_to_sticks() {
                this.x(this.x_stick());
                this.y(this.y_stick());
                if (this.ratio()) {
                    this.left_bottom_edge_ratio_x(this.left_edge_x_stick());
                    this.left_top_edge_ratio_x(this.left_edge_x_stick());
                    this.right_bottom_edge_ratio_x(this.right_edge_x_stick());
                    this.right_top_edge_ratio_x(this.right_edge_x_stick());
                    this.top_left_edge_ratio_y(this.top_edge_y_stick());
                    this.top_right_edge_ratio_y(this.top_edge_y_stick());
                    this.bottom_left_edge_ratio_y(this.bottom_edge_y_stick());
                    this.bottom_right_edge_ratio_y(this.bottom_edge_y_stick());
                }
                else {
                    this.bottom_edge_y(this.bottom_edge_y_stick());
                    this.right_edge_x(this.right_edge_x_stick());
                    this.top_edge_y(this.top_edge_y_stick());
                    this.left_edge_x(this.left_edge_x_stick());
                }
            }
        }
        __decorate([
            $mol_mem
        ], $rise_resize_ratio.prototype, "left_top_edge_ratio_x", null);
        __decorate([
            $mol_mem
        ], $rise_resize_ratio.prototype, "left_bottom_edge_ratio_x", null);
        __decorate([
            $mol_mem
        ], $rise_resize_ratio.prototype, "right_bottom_edge_ratio_x", null);
        __decorate([
            $mol_mem
        ], $rise_resize_ratio.prototype, "top_left_edge_ratio_y", null);
        __decorate([
            $mol_mem
        ], $rise_resize_ratio.prototype, "right_top_edge_ratio_x", null);
        __decorate([
            $mol_mem
        ], $rise_resize_ratio.prototype, "top_right_edge_ratio_y", null);
        __decorate([
            $mol_mem
        ], $rise_resize_ratio.prototype, "bottom_left_edge_ratio_y", null);
        __decorate([
            $mol_mem
        ], $rise_resize_ratio.prototype, "bottom_right_edge_ratio_y", null);
        __decorate([
            $mol_mem
        ], $rise_resize_ratio.prototype, "edges", null);
        __decorate([
            $mol_action
        ], $rise_resize_ratio.prototype, "vals_to_sticks", null);
        $$.$rise_resize_ratio = $rise_resize_ratio;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        const Edge_size = 10;
        const Top_edge = {
            top: `-${Edge_size / 2}px`,
            height: `${Edge_size}px`,
        };
        const Left_edge = {
            left: `-${Edge_size / 2}px`,
            width: `${Edge_size}px`,
        };
        const Right_edge = {
            right: `-${Edge_size / 2}px`,
            width: `${Edge_size}px`,
        };
        const Bottom_edge = {
            bottom: `-${Edge_size / 2}px`,
            height: `${Edge_size}px`,
        };
        $mol_style_define($rise_resize_ratio, {
            Left_top_edge_ratio: {
                cursor: 'nwse-resize',
                ...Left_edge,
                height: '50%',
            },
            Left_bottom_edge_ratio: {
                cursor: 'nesw-resize',
                ...Left_edge,
                height: '50%',
                top: '50%',
            },
            Right_bottom_edge_ratio: {
                cursor: 'nwse-resize',
                ...Right_edge,
                height: '50%',
                top: '50%',
            },
            Right_top_edge_ratio: {
                cursor: 'nesw-resize',
                ...Right_edge,
                height: '50%',
            },
            Top_left_edge_ratio: {
                cursor: 'nwse-resize',
                ...Top_edge,
                width: '50%',
            },
            Top_right_edge_ratio: {
                cursor: 'nesw-resize',
                ...Top_edge,
                width: '50%',
                left: '50%',
            },
            Bottom_left_edge_ratio: {
                cursor: 'nesw-resize',
                ...Bottom_edge,
                width: '50%',
            },
            Bottom_right_edge_ratio: {
                cursor: 'nwse-resize',
                ...Bottom_edge,
                width: '50%',
                left: '50%',
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_color_dot) = class $shm_hitalama_color_dot extends ($.$mol_view) {
		color(){
			return "";
		}
		style(){
			return {"backgroundColor": (this.color())};
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_color_dot, {
            width: '1rem',
            height: '1rem',
            borderRadius: '50%',
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_color_switch) = class $shm_hitalama_color_switch extends ($.$mol_switch) {
		option_enabled(id){
			return (this.enabled());
		}
		color(id){
			return "";
		}
		Option(id){
			const obj = new this.$.$mol_check();
			(obj.checked) = (next) => ((this.option_checked(id, next)));
			(obj.sub) = () => ([]);
			(obj.enabled) = () => ((this.option_enabled(id)));
			(obj.hint) = () => ((this.option_hint(id)));
			(obj.minimal_height) = () => (24);
			(obj.style) = () => ({"backgroundColor": (this.color(id))});
			return obj;
		}
		colors(){
			return [
				"var(--mol_theme_text)", 
				"rgb(254, 244, 69)", 
				"rgb(250, 199, 16)", 
				"rgb(242, 71, 38)", 
				"rgb(255, 255, 255)", 
				"rgb(206, 231, 65)", 
				"rgb(143, 209, 79)", 
				"rgb(218, 0, 99)", 
				"rgb(128, 128, 128)", 
				"rgb(18, 205, 212)", 
				"rgb(12, 167, 137)", 
				"rgb(149, 16, 172)", 
				"rgb(26, 26, 26)", 
				"rgb(45, 155, 240)", 
				"rgb(65, 75, 178)", 
				"rgb(101, 44, 179)"
			];
		}
	};
	($mol_mem_key(($.$shm_hitalama_color_switch.prototype), "Option"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_color_switch extends $.$shm_hitalama_color_switch {
            options() {
                return Object.fromEntries(this.colors().map(c => [c, c]));
            }
            color(id) {
                return id;
            }
        }
        $$.$shm_hitalama_color_switch = $shm_hitalama_color_switch;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_color_switch, {
            width: '11rem',
            background: {
                color: 'transparent',
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_color_pick) = class $shm_hitalama_color_pick extends ($.$mol_pick) {
		Current(){
			const obj = new this.$.$shm_hitalama_color_dot();
			(obj.color) = () => ((this.color()));
			return obj;
		}
		color(next){
			if(next !== undefined) return next;
			return "var(--mol_theme_text)";
		}
		click(next){
			if(next !== undefined) return next;
			return null;
		}
		Colors(){
			const obj = new this.$.$shm_hitalama_color_switch();
			(obj.value) = (next) => ((this.color(next)));
			(obj.event) = () => ({"click": (next) => (this.click(next))});
			return obj;
		}
		trigger_content(){
			return [(this.Current())];
		}
		bubble_content(){
			return [(this.Colors())];
		}
	};
	($mol_mem(($.$shm_hitalama_color_pick.prototype), "Current"));
	($mol_mem(($.$shm_hitalama_color_pick.prototype), "color"));
	($mol_mem(($.$shm_hitalama_color_pick.prototype), "click"));
	($mol_mem(($.$shm_hitalama_color_pick.prototype), "Colors"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_color_pick extends $.$shm_hitalama_color_pick {
            click() {
                this.showed(false);
            }
        }
        $$.$shm_hitalama_color_pick = $shm_hitalama_color_pick;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_color_pick, {
            Bubble: {
                background: {
                    color: 'transparent',
                },
                boxShadow: 'none',
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_icon_minus) = class $mol_icon_minus extends ($.$mol_icon) {
		path(){
			return "M19,13H5V11H19V13Z";
		}
	};


;
"use strict";

;
	($.$mol_number) = class $mol_number extends ($.$mol_view) {
		precision(){
			return 1;
		}
		type(){
			return "tel";
		}
		value_string(next){
			if(next !== undefined) return next;
			return "";
		}
		hint(){
			return " ";
		}
		string_enabled(){
			return (this.enabled());
		}
		submit(next){
			if(next !== undefined) return next;
			return null;
		}
		String(){
			const obj = new this.$.$mol_string();
			(obj.type) = () => ((this.type()));
			(obj.value) = (next) => ((this.value_string(next)));
			(obj.hint) = () => ((this.hint()));
			(obj.enabled) = () => ((this.string_enabled()));
			(obj.submit) = (next) => ((this.submit(next)));
			return obj;
		}
		event_dec(next){
			if(next !== undefined) return next;
			return null;
		}
		dec_enabled(){
			return (this.enabled());
		}
		dec_icon(){
			const obj = new this.$.$mol_icon_minus();
			return obj;
		}
		Dec(){
			const obj = new this.$.$mol_button_minor();
			(obj.event_click) = (next) => ((this.event_dec(next)));
			(obj.enabled) = () => ((this.dec_enabled()));
			(obj.sub) = () => ([(this.dec_icon())]);
			return obj;
		}
		event_inc(next){
			if(next !== undefined) return next;
			return null;
		}
		inc_enabled(){
			return (this.enabled());
		}
		inc_icon(){
			const obj = new this.$.$mol_icon_plus();
			return obj;
		}
		Inc(){
			const obj = new this.$.$mol_button_minor();
			(obj.event_click) = (next) => ((this.event_inc(next)));
			(obj.enabled) = () => ((this.inc_enabled()));
			(obj.sub) = () => ([(this.inc_icon())]);
			return obj;
		}
		precision_view(){
			return (this.precision());
		}
		precision_change(){
			return (this.precision());
		}
		value_min(){
			return -Infinity;
		}
		value_max(){
			return +Infinity;
		}
		value(next){
			if(next !== undefined) return next;
			return +NaN;
		}
		enabled(){
			return true;
		}
		sub(){
			return [
				(this.String()), 
				(this.Dec()), 
				(this.Inc())
			];
		}
	};
	($mol_mem(($.$mol_number.prototype), "value_string"));
	($mol_mem(($.$mol_number.prototype), "submit"));
	($mol_mem(($.$mol_number.prototype), "String"));
	($mol_mem(($.$mol_number.prototype), "event_dec"));
	($mol_mem(($.$mol_number.prototype), "dec_icon"));
	($mol_mem(($.$mol_number.prototype), "Dec"));
	($mol_mem(($.$mol_number.prototype), "event_inc"));
	($mol_mem(($.$mol_number.prototype), "inc_icon"));
	($mol_mem(($.$mol_number.prototype), "Inc"));
	($mol_mem(($.$mol_number.prototype), "value"));


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/number/number.css", "[mol_number] {\n\tdisplay: flex;\n\tflex: 0 1 auto;\n\tposition: relative;\n\talign-items: stretch;\n\tmax-width: 100%;\n}\n\n[mol_number_string] {\n\tappearance: textfield;\n\tflex: 1 1 7rem;\n\twidth: 7rem;\n}\n\n[mol_number_string]::-webkit-inner-spin-button {\n\tdisplay: none;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_number extends $.$mol_number {
            value_limited(val) {
                if (Number.isNaN(val))
                    return this.value(val);
                if (val === undefined)
                    return this.value();
                const min = this.value_min();
                const max = this.value_max();
                if (val < min)
                    return this.value(min);
                if (val > max)
                    return this.value(max);
                return this.value(val);
            }
            event_dec(next) {
                this.value_limited((this.value_limited() || 0) - this.precision_change());
            }
            event_inc(next) {
                this.value_limited((this.value_limited() || 0) + this.precision_change());
            }
            round(val) {
                if (Number.isNaN(val))
                    return '';
                if (val === 0)
                    return '0';
                if (!val)
                    return '';
                const precision_view = this.precision_view();
                if (!precision_view)
                    return val.toFixed();
                if (precision_view >= 1) {
                    return (val / precision_view).toFixed();
                }
                else {
                    const fixed_number = Math.log10(1 / precision_view);
                    return val.toFixed(Math.ceil(fixed_number));
                }
            }
            value_string(next) {
                const current = this.round(this.value_limited());
                if (next === undefined)
                    return current;
                const precision = this.precision_view();
                if (precision - Math.floor(precision) === 0)
                    next = next.replace(/[.,]/g, '');
                next = (this.value_min() < 0 && next.startsWith('-') ? '-' : '')
                    + next.replace(/,/g, '.').replace(/[^\d\.]/g, '').replace(/^0{2,}/, '0');
                let dot_pos = next.indexOf('.');
                if (dot_pos !== -1) {
                    const prev = $mol_wire_probe(() => this.value_string()) ?? '';
                    const dot_pos_prev = prev.indexOf('.');
                    if (dot_pos_prev === dot_pos)
                        dot_pos = next.lastIndexOf('.');
                    const frac = next.slice(dot_pos + 1).replace(/\./g, '');
                    next = (next.slice(0, dot_pos) || '0').replace(/\./g, '') + '.' + frac;
                }
                if (Number.isNaN(Number(next)))
                    return next;
                if (next.endsWith('.'))
                    return next;
                if (next.endsWith('-'))
                    return next;
                this.value_limited(Number(next || Number.NaN));
                return next;
            }
            dec_enabled() {
                return this.enabled() && (!((this.value() || 0) <= this.value_min()));
            }
            inc_enabled() {
                return this.enabled() && (!((this.value() || 0) >= this.value_max()));
            }
        }
        __decorate([
            $mol_mem
        ], $mol_number.prototype, "value_string", null);
        __decorate([
            $mol_mem
        ], $mol_number.prototype, "dec_enabled", null);
        __decorate([
            $mol_mem
        ], $mol_number.prototype, "inc_enabled", null);
        $$.$mol_number = $mol_number;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_icon_chevron_up) = class $mol_icon_chevron_up extends ($.$mol_icon) {
		path(){
			return "M7.41,15.41L12,10.83L16.59,15.41L18,14L12,8L6,14L7.41,15.41Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_chevron_down) = class $mol_icon_chevron_down extends ($.$mol_icon) {
		path(){
			return "M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_arrow_collapse) = class $mol_icon_arrow_collapse extends ($.$mol_icon) {
		path(){
			return "M19.5,3.09L15,7.59V4H13V11H20V9H16.41L20.91,4.5L19.5,3.09M4,13V15H7.59L3.09,19.5L4.5,20.91L9,16.41V20H11V13H4Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_arrow_collapse_up) = class $mol_icon_arrow_collapse_up extends ($.$mol_icon) {
		path(){
			return "M4.08,11.92L12,4L19.92,11.92L18.5,13.33L13,7.83V22H11V7.83L5.5,13.33L4.08,11.92M12,4H22V2H2V4H12Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_arrow_collapse_down) = class $mol_icon_arrow_collapse_down extends ($.$mol_icon) {
		path(){
			return "M19.92,12.08L12,20L4.08,12.08L5.5,10.67L11,16.17V2H13V16.17L18.5,10.66L19.92,12.08M12,20H2V22H22V20H12Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_trash_can) = class $mol_icon_trash_can extends ($.$mol_icon) {
		path(){
			return "M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M9,8H11V17H9V8M13,8H15V17H13V8Z";
		}
	};


;
"use strict";

;
	($.$shm_hitalama_board_block_float) = class $shm_hitalama_board_block_float extends ($.$rise_resize_ratio) {
		side_body(){
			return [];
		}
		Sidebar(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ((this.side_body()));
			return obj;
		}
		sidebar(){
			return [(this.Sidebar())];
		}
		editing(next){
			if(next !== undefined) return next;
			return false;
		}
		toolbar_transform(){
			return "";
		}
		color(next){
			if(next !== undefined) return next;
			return "var(--mol_theme_text)";
		}
		Color(){
			const obj = new this.$.$shm_hitalama_color_pick();
			(obj.color) = (next) => ((this.color(next)));
			(obj.hint) = () => ((this.$.$mol_locale.text("$shm_hitalama_board_block_float_Color_hint")));
			return obj;
		}
		font_size_selected(next){
			if(next !== undefined) return next;
			return "";
		}
		font_size(next){
			if(next !== undefined) return next;
			return 14;
		}
		Font_size(){
			const obj = new this.$.$mol_number();
			(obj.minimal_width) = () => (64);
			(obj.value) = (next) => ((this.font_size(next)));
			(obj.Dec) = () => (null);
			(obj.Inc) = () => (null);
			return obj;
		}
		font_size_suggests(){
			return [];
		}
		Font_size_tool(){
			const obj = new this.$.$mol_search();
			(obj.hint) = () => ((this.$.$mol_locale.text("$shm_hitalama_board_block_float_Font_size_tool_hint")));
			(obj.query) = (next) => ((this.font_size_selected(next)));
			(obj.anchor_content) = () => ([(this.Font_size())]);
			(obj.suggests) = () => ((this.font_size_suggests()));
			return obj;
		}
		font_size_inc(next){
			if(next !== undefined) return next;
			return null;
		}
		inc_icon(){
			const obj = new this.$.$mol_icon_chevron_up();
			return obj;
		}
		Inc(){
			const obj = new this.$.$mol_button_minor();
			(obj.hint) = () => ((this.$.$mol_locale.text("$shm_hitalama_board_block_float_Inc_hint")));
			(obj.minimal_height) = () => (20);
			(obj.minimal_width) = () => (20);
			(obj.event_click) = (next) => ((this.font_size_inc(next)));
			(obj.sub) = () => ([(this.inc_icon())]);
			return obj;
		}
		font_size_dec(next){
			if(next !== undefined) return next;
			return null;
		}
		dec_icon(){
			const obj = new this.$.$mol_icon_chevron_down();
			return obj;
		}
		Dec(){
			const obj = new this.$.$mol_button_minor();
			(obj.hint) = () => ((this.$.$mol_locale.text("$shm_hitalama_board_block_float_Dec_hint")));
			(obj.minimal_height) = () => (20);
			(obj.minimal_width) = () => (20);
			(obj.event_click) = (next) => ((this.font_size_dec(next)));
			(obj.sub) = () => ([(this.dec_icon())]);
			return obj;
		}
		Inc_dec(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Inc()), (this.Dec())]);
			return obj;
		}
		font_tools(){
			return [
				(this.Color()), 
				(this.Font_size_tool()), 
				(this.Inc_dec())
			];
		}
		Top_icon(){
			const obj = new this.$.$mol_icon_arrow_collapse_up();
			return obj;
		}
		to_top(next){
			if(next !== undefined) return next;
			return null;
		}
		Top(){
			const obj = new this.$.$mol_button_minor();
			(obj.hint) = () => ((this.$.$mol_locale.text("$shm_hitalama_board_block_float_Top_hint")));
			(obj.sub) = () => ([(this.Top_icon())]);
			(obj.click) = (next) => ((this.to_top(next)));
			return obj;
		}
		Bottom_icon(){
			const obj = new this.$.$mol_icon_arrow_collapse_down();
			return obj;
		}
		to_bottom(next){
			if(next !== undefined) return next;
			return null;
		}
		Bottom(){
			const obj = new this.$.$mol_button_minor();
			(obj.hint) = () => ((this.$.$mol_locale.text("$shm_hitalama_board_block_float_Bottom_hint")));
			(obj.sub) = () => ([(this.Bottom_icon())]);
			(obj.click) = (next) => ((this.to_bottom(next)));
			return obj;
		}
		Delete_icon(){
			const obj = new this.$.$mol_icon_trash_can();
			return obj;
		}
		delete(next){
			if(next !== undefined) return next;
			return null;
		}
		Delete(){
			const obj = new this.$.$mol_button_minor();
			(obj.hint) = () => ((this.$.$mol_locale.text("$shm_hitalama_board_block_float_Delete_hint")));
			(obj.sub) = () => ([(this.Delete_icon())]);
			(obj.click) = (next) => ((this.delete(next)));
			return obj;
		}
		title(){
			return "";
		}
		copy_code(){
			return "";
		}
		Copy_code(){
			const obj = new this.$.$mol_button_copy();
			(obj.title) = () => ((this.title()));
			(obj.text) = () => ((this.copy_code()));
			return obj;
		}
		tools(){
			return [
				...(this.font_tools()), 
				(this.Top()), 
				(this.Bottom()), 
				(this.Delete()), 
				(this.Copy_code())
			];
		}
		Toolbar(){
			const obj = new this.$.$mol_view();
			(obj.style) = () => ({"transform": (this.toolbar_transform())});
			(obj.sub) = () => ((this.tools()));
			return obj;
		}
		opacity_str(){
			return "1";
		}
		transition_smooth(){
			return "top 0.2s, left 0.2s, right 0.2s, bottom 0.2s, width 0.2s, height 0.2s";
		}
		transition(){
			return (this.transition_smooth());
		}
		event_contextmenu(next){
			if(next !== undefined) return next;
			return null;
		}
		pointerdown(next){
			if(next !== undefined) return next;
			return null;
		}
		pointerenter(next){
			if(next !== undefined) return next;
			return null;
		}
		pointerleave(next){
			if(next !== undefined) return next;
			return null;
		}
		selected(next){
			if(next !== undefined) return next;
			return false;
		}
		block(){
			const obj = new this.$.$shm_hitalama_board_block();
			return obj;
		}
		board(){
			const obj = new this.$.$shm_hitalama_board();
			return obj;
		}
		Board_page(){
			const obj = new this.$.$shm_hitalama_board_page();
			return obj;
		}
		zoom(){
			return 1;
		}
		sub(){
			return [
				(this.Content()), 
				...(this.edges()), 
				...(this.toolbar()), 
				...(this.sidebar())
			];
		}
		auto(){
			return [...(super.auto()), (this.editing())];
		}
		font_size_options(){
			return [
				10, 
				12, 
				14, 
				18, 
				24, 
				36, 
				48, 
				64, 
				80, 
				144, 
				288
			];
		}
		toolbar(){
			return [(this.Toolbar())];
		}
		copy_code_template(){
			return "board.block('{ref}').text()";
		}
		opacity(next){
			if(next !== undefined) return next;
			return 1;
		}
		has_scrollbar(){
			return false;
		}
		style(){
			return {
				...(super.style()), 
				"opacity": (this.opacity_str()), 
				"transition": (this.transition())
			};
		}
		font_size_px(){
			return "";
		}
		event(){
			return {
				...(super.event()), 
				"contextmenu": (next) => (this.event_contextmenu(next)), 
				"pointerdown": (next) => (this.pointerdown(next)), 
				"pointerenter": (next) => (this.pointerenter(next)), 
				"pointerleave": (next) => (this.pointerleave(next))
			};
		}
		on_contextmenu(next){
			if(next !== undefined) return next;
			return null;
		}
		hovered(next){
			if(next !== undefined) return next;
			return false;
		}
		Contextmenu_body(){
			return null;
		}
		attr(){
			return {
				...(super.attr()), 
				"shm_hitalama_board_block_float_selected": (this.selected()), 
				"shm_hitalama_board_block_float_dragged": (this.dragged())
			};
		}
	};
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "Sidebar"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "editing"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "color"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "Color"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "font_size_selected"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "font_size"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "Font_size"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "Font_size_tool"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "font_size_inc"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "inc_icon"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "Inc"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "font_size_dec"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "dec_icon"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "Dec"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "Inc_dec"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "Top_icon"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "to_top"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "Top"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "Bottom_icon"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "to_bottom"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "Bottom"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "Delete_icon"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "delete"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "Delete"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "Copy_code"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "Toolbar"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "event_contextmenu"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "pointerdown"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "pointerenter"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "pointerleave"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "selected"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "block"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "board"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "Board_page"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "opacity"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "on_contextmenu"));
	($mol_mem(($.$shm_hitalama_board_block_float.prototype), "hovered"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_board_block_float extends $.$shm_hitalama_board_block_float {
            repos_x(val) {
                return val / this.zoom();
            }
            repos_y(val) {
                return val / this.zoom();
            }
            x_stick(next) {
                return this.block().Body_x(next)?.val(next) ?? 0;
            }
            y_stick(next) {
                return this.block().Body_y(next)?.val(next) ?? 0;
            }
            bottom_edge_y_stick(next) {
                return this.block().Bottom_edge_y(next)?.val(next) ?? 0;
            }
            right_edge_x_stick(next) {
                return this.block().Right_edge_x(next)?.val(next) ?? 0;
            }
            top_edge_y_stick(next) {
                return this.block().Top_edge_y(next)?.val(next) ?? 0;
            }
            left_edge_x_stick(next) {
                return this.block().Left_edge_x(next)?.val(next) ?? 0;
            }
            title() {
                return this.block().title();
            }
            copy_code() {
                return this.copy_code_template().replace('{ref}', this.block().ref().description?.toString());
            }
            opacity(next) {
                return this.block().Opacity(next)?.val(next) ?? 1;
            }
            font_size(next) {
                if (next !== undefined)
                    this.board().Last_font_size(null)?.val(next);
                return this.block().Font_size(next)?.val(next) ?? 14;
            }
            font_tools() {
                const text = this.block().Text()?.value() || '';
                return text === '' ? [] : super.font_tools();
            }
            font_size_px() {
                return this.font_size() + 'px';
            }
            font_size_suggests() {
                return this.font_size_options().map(n => n.toString());
            }
            font_size_inc() {
                const current = this.font_size();
                const options = this.font_size_options();
                const next = options.find(n => n > current);
                if (next)
                    this.font_size(next);
            }
            font_size_dec() {
                const current = this.font_size();
                const options = this.font_size_options();
                const next = options.findLast(n => n < current);
                if (next)
                    this.font_size(next);
            }
            font_size_selected(next) {
                if (next)
                    this.font_size(Number(next));
                return next ?? '';
            }
            color(next) {
                if (next === undefined)
                    return this.block().Color()?.val() || 'var(--mol_theme_text)';
                this.board().Last_color(null)?.val(next);
                return this.block().Color(null)?.val(next);
            }
            opacity_str() {
                return this.opacity().toString();
            }
            edges() {
                return this.selected() ? super.edges() : [];
            }
            toolbar() {
                return this.selected() ? super.toolbar() : [];
            }
            toolbar_transform() {
                return `translateY(-100%) scale(${1 / this.zoom()})`;
            }
            transition() {
                return (this.dragged() || this.resizing()) ? 'none' : this.transition_smooth();
            }
            on_drag_start(event) {
                super.on_drag_start(event);
                this.selected(true);
            }
            has_scrollbar() {
                const el = this.Content().dom_node_actual();
                return el.scrollHeight > el.clientHeight;
            }
            pointerdown_last;
            pointerdown(event) {
                this.pointerdown_last = event;
            }
            event_contextmenu(event) {
                event.preventDefault();
                if (!this.pointerdown_last
                    || is_panning(this.pointerdown_last, event))
                    return;
                this.on_contextmenu(event);
            }
            pointerenter(next) {
                this.hovered(true);
            }
            pointerleave(next) {
                this.hovered(false);
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_float.prototype, "x_stick", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_float.prototype, "y_stick", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_float.prototype, "bottom_edge_y_stick", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_float.prototype, "right_edge_x_stick", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_float.prototype, "top_edge_y_stick", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_float.prototype, "left_edge_x_stick", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_float.prototype, "opacity", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_float.prototype, "font_size", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_float.prototype, "font_tools", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_float.prototype, "font_size_px", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_float.prototype, "color", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_float.prototype, "toolbar_transform", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_float.prototype, "transition", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_float.prototype, "has_scrollbar", null);
        $$.$shm_hitalama_board_block_float = $shm_hitalama_board_block_float;
        function is_panning(start, end) {
            if (end.timeStamp - start?.timeStamp > 500
                || Math.abs(end.x - start?.x) > 10
                || Math.abs(end.y - start?.y) > 10)
                return true;
            return false;
        }
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_board_block_float, {
            userSelect: 'none',
            ":hover": {
                outline: '1px solid var(--mol_theme_line)',
            },
            '[shm_hitalama_board_block_float_selected]': {
                true: {
                    outline: '1px solid var(--mol_theme_current)',
                    ":hover": {
                        outline: '1px solid var(--mol_theme_current)',
                    },
                },
            },
            '[shm_hitalama_board_block_float_dragged]': {
                true: {
                    outline: '1px solid var(--mol_theme_control)',
                    ":hover": {
                        outline: '1px solid var(--mol_theme_control)',
                    },
                },
            },
            Toolbar: {
                position: 'absolute',
                top: 0,
                width: '100%',
                transformOrigin: '0 100%',
                transition: 'none',
                overflow: 'visible',
                zIndex: $mol_layer.popup,
                padding: {
                    bottom: $mol_gap.space,
                },
                pointerEvents: 'none',
                ['$mol_view']: {
                    pointerEvents: 'auto',
                }
            },
            Sidebar: {
                position: 'absolute',
                top: 0,
                right: '-5px',
                transform: 'translateX(100%)',
                overflow: 'visible',
                pointerEvents: 'none',
                ['$mol_view']: {
                    pointerEvents: 'auto',
                }
            },
            Font_size: {
                width: '4rem',
            },
            Font_size_tool: {
                flex: 'none',
                alignSelf: 'auto',
            },
            Inc_dec: {
                flex: {
                    direction: 'column',
                },
            },
            Inc: {
                padding: {
                    top: 0,
                    bottom: 0,
                    left: $mol_gap.space,
                    right: $mol_gap.block,
                },
            },
            Dec: {
                padding: {
                    top: 0,
                    bottom: 0,
                    left: $mol_gap.space,
                    right: $mol_gap.block,
                },
            },
            flex: {
                direction: 'column'
            },
            Delete: {
                margin: {
                    left: $mol_gap.block,
                },
                color: '#ff6666',
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_board_block_input) = class $shm_hitalama_board_block_input extends ($.$shm_hitalama_board_block_float) {
		text(next){
			if(next !== undefined) return next;
			return "";
		}
		Input(){
			const obj = new this.$.$mol_string();
			(obj.value) = (next) => ((this.text(next)));
			return obj;
		}
		Head(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Input())]);
			return obj;
		}
		title_dom_name(){
			return "h1";
		}
		text_rendered(){
			return "";
		}
		Title(){
			const obj = new this.$.$mol_paragraph();
			(obj.dom_name) = () => ((this.title_dom_name()));
			(obj.title) = () => ((this.text_rendered()));
			return obj;
		}
		sub(){
			return [
				(this.Head()), 
				(this.Drag_view()), 
				...(this.edges()), 
				...(this.toolbar())
			];
		}
		font_tools(){
			return [];
		}
		drag_body(){
			return [(this.Title())];
		}
	};
	($mol_mem(($.$shm_hitalama_board_block_input.prototype), "text"));
	($mol_mem(($.$shm_hitalama_board_block_input.prototype), "Input"));
	($mol_mem(($.$shm_hitalama_board_block_input.prototype), "Head"));
	($mol_mem(($.$shm_hitalama_board_block_input.prototype), "Title"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_board_block_input extends $.$shm_hitalama_board_block_input {
            text(next) {
                return this.block().Text(next)?.text(next) ?? '';
            }
            text_rendered() {
                const template = this.block().Text()?.text() ?? '';
                const func = new Function('const board = this.board;\nconst page = this.page;\nreturn `' + template + '`');
                return func.call({ page: this.Board_page(), board: this.board() });
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_input.prototype, "text", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_input.prototype, "text_rendered", null);
        $$.$shm_hitalama_board_block_input = $shm_hitalama_board_block_input;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_board_block_input, {
            background: {
                color: $mol_theme.card,
            },
            Head: {
                padding: $mol_gap.space,
            },
            Title: {
                align: {
                    items: 'center',
                },
            },
            Drag_view: {
                justify: {
                    content: 'center',
                },
                padding: $mol_gap.block,
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_board_block_iframe) = class $shm_hitalama_board_block_iframe extends ($.$shm_hitalama_board_block_float) {
		Iframe(){
			const obj = new this.$.$mol_frame();
			(obj.uri) = () => ((this.src()));
			return obj;
		}
		tg_post_script(){
			return [];
		}
		Tg_post_dom(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([...(this.tg_post_script())]);
			return obj;
		}
		iframe_visible(){
			return [(this.Iframe()), (this.Tg_post_dom())];
		}
		Blocker(){
			const obj = new this.$.$mol_view();
			return obj;
		}
		blocker(){
			return [(this.Blocker())];
		}
		src(next){
			if(next !== undefined) return next;
			return "";
		}
		src_focused(){
			return (this.Src().focused());
		}
		Src(){
			const obj = new this.$.$mol_string();
			(obj.value) = (next) => ((this.src(next)));
			return obj;
		}
		Title(){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.src()));
			return obj;
		}
		sub(){
			return [
				(this.Drag_view()), 
				...(this.iframe_visible()), 
				...(this.blocker()), 
				...(this.edges()), 
				...(this.toolbar())
			];
		}
		font_tools(){
			return [];
		}
		tools(){
			return [(this.Src()), ...(super.tools())];
		}
		drag_body(){
			return [(this.Title())];
		}
	};
	($mol_mem(($.$shm_hitalama_board_block_iframe.prototype), "Iframe"));
	($mol_mem(($.$shm_hitalama_board_block_iframe.prototype), "Tg_post_dom"));
	($mol_mem(($.$shm_hitalama_board_block_iframe.prototype), "Blocker"));
	($mol_mem(($.$shm_hitalama_board_block_iframe.prototype), "src"));
	($mol_mem(($.$shm_hitalama_board_block_iframe.prototype), "Src"));
	($mol_mem(($.$shm_hitalama_board_block_iframe.prototype), "Title"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_board_block_iframe extends $.$shm_hitalama_board_block_iframe {
            src(next) {
                return this.block().Src(next)?.val(next) ?? '';
            }
            blocker() {
                return (this.dragged() || this.resizing()) ? super.blocker() : [];
            }
            editing() {
                return this.src_focused();
            }
            tg_post() {
                const match = this.src().match(/https:\/\/t\.me\/(.+)/);
                return match?.[1];
            }
            tg_post_script() {
                const tg_post = this.tg_post();
                if (!tg_post)
                    return [];
                const script = document.createElement('script');
                script.setAttribute('src', 'https://telegram.org/js/telegram-widget.js?22');
                script.setAttribute('data-telegram-post', tg_post);
                script.setAttribute('data-width', '100%');
                script.setAttribute('async', '');
                return [script];
            }
            iframe_visible() {
                return this.tg_post() ? [this.Tg_post_dom()] : [this.Iframe()];
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_iframe.prototype, "src", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_iframe.prototype, "blocker", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_iframe.prototype, "editing", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_iframe.prototype, "tg_post", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_iframe.prototype, "tg_post_script", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_iframe.prototype, "iframe_visible", null);
        $$.$shm_hitalama_board_block_iframe = $shm_hitalama_board_block_iframe;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_board_block_iframe, {
            background: {
                color: $mol_theme.card,
            },
            Blocker: {
                position: 'absolute',
                height: '100%',
                width: '100%',
            },
            Drag_view: {
                flex: {
                    grow: 0,
                },
                padding: $mol_gap.text,
            },
            Title: {
                textOverflow: 'ellipsis',
                whiteSpace: 'nowrap',
                overflow: 'hidden',
                display: 'block',
            },
            Tg_post_dom: {
                flex: {
                    grow: 1,
                },
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_board_block_text) = class $shm_hitalama_board_block_text extends ($.$shm_hitalama_board_block_float) {
		text(next){
			if(next !== undefined) return next;
			return "";
		}
		selection(next){
			if(next !== undefined) return next;
			return [];
		}
		textarea_height(){
			return "100%";
		}
		Text(){
			const obj = new this.$.$mol_textarea();
			(obj.value) = (next) => ((this.text(next)));
			(obj.selection) = (next) => ((this.selection(next)));
			(obj.spellcheck) = () => (false);
			(obj.style) = () => ({
				"color": (this.color()), 
				"fontSize": (this.font_size_px()), 
				"height": (this.textarea_height())
			});
			return obj;
		}
		blocker_pointerdown(next){
			if(next !== undefined) return next;
			return null;
		}
		blocker_pointerup(next){
			if(next !== undefined) return next;
			return null;
		}
		Blocker(){
			const obj = new this.$.$mol_view();
			(obj.event) = () => ({"pointerdown": (next) => (this.blocker_pointerdown(next)), "pointerup": (next) => (this.blocker_pointerup(next))});
			return obj;
		}
		blocker(){
			return [(this.Blocker())];
		}
		image_uri(){
			return "";
		}
		Image(){
			const obj = new this.$.$mol_image();
			(obj.uri) = () => ((this.image_uri()));
			return obj;
		}
		image(){
			return [(this.Image())];
		}
		sub(){
			return [
				(this.Text()), 
				(this.Drag_view()), 
				...(this.edges()), 
				...(this.toolbar())
			];
		}
		drag_body(){
			return [...(this.blocker()), ...(this.image())];
		}
	};
	($mol_mem(($.$shm_hitalama_board_block_text.prototype), "text"));
	($mol_mem(($.$shm_hitalama_board_block_text.prototype), "selection"));
	($mol_mem(($.$shm_hitalama_board_block_text.prototype), "Text"));
	($mol_mem(($.$shm_hitalama_board_block_text.prototype), "blocker_pointerdown"));
	($mol_mem(($.$shm_hitalama_board_block_text.prototype), "blocker_pointerup"));
	($mol_mem(($.$shm_hitalama_board_block_text.prototype), "Blocker"));
	($mol_mem(($.$shm_hitalama_board_block_text.prototype), "Image"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class Code_line extends $mol_text_code_line {
            minimal_height() {
                return 0;
            }
        }
        class $shm_hitalama_board_block_text extends $.$shm_hitalama_board_block_text {
            get $() {
                return super.$.$mol_ambient({
                    $mol_text_code_line: Code_line,
                });
            }
            textarea_height() {
                return this.editing() ? 'auto' : super.textarea_height();
            }
            text(next) {
                if (!this.editing())
                    return this.text_rendered();
                return this.block().Text(next)?.text(next) ?? '';
            }
            text_rendered() {
                const template = this.block().Text()?.text() ?? '';
                const func = new Function('const board = this.board;\nconst page = this.page;\nreturn `' + template + '`');
                return func.call({ page: this.Board_page(), board: this.board() });
            }
            blocker_pointerdown_last;
            blocker_pointerdown(next) {
                this.blocker_pointerdown_last = this.selected() ? next : undefined;
            }
            blocker_pointerup(next) {
                if (!this.blocker_pointerdown_last)
                    return;
                const { x, y } = this.blocker_pointerdown_last;
                if (Math.abs(x - next.x) < 5 && Math.abs(y - next.y) < 5) {
                    this.editing(true);
                    this.Text().Edit().focused(true);
                    this.Text().Edit().dom_node_actual().select();
                }
            }
            editing(next) {
                if (this.selected() === false)
                    return false;
                return next ?? false;
            }
            blocker() {
                return this.editing() ? [] : super.blocker();
            }
            blob_uri() {
                const blob = this.block().Image()?.blob();
                if (!blob)
                    return null;
                return this.$.$mol_blob_uri(blob);
            }
            image_uri() {
                this.block().Image()?.blob();
                const uri = $mol_wire_sync(this).blob_uri();
                return uri ?? '';
            }
            image() {
                const uri = this.image_uri();
                return uri ? super.image() : [];
            }
            ratio() {
                if (!this.image())
                    return 0;
                const img = this.Image();
                return img.natural_width() / img.natural_height();
            }
        }
        __decorate([
            $mol_memo.field
        ], $shm_hitalama_board_block_text.prototype, "$", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_text.prototype, "textarea_height", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_text.prototype, "text", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_text.prototype, "text_rendered", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_text.prototype, "editing", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_text.prototype, "blocker", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_text.prototype, "blob_uri", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_text.prototype, "image_uri", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_text.prototype, "image", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_text.prototype, "ratio", null);
        $$.$shm_hitalama_board_block_text = $shm_hitalama_board_block_text;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_board_block_text, {
            userSelect: 'none',
            '[shm_hitalama_board_block_float_selected]': {
                true: {
                    outline: '1px solid var(--mol_theme_current)',
                },
            },
            flex: {
                direction: 'column'
            },
            Blocker: {
                position: 'absolute',
                height: '100%',
                width: '100%',
            },
            Image: {
                position: 'absolute',
                width: '100%',
                transition: 'none',
                pointerEvents: 'none',
            },
            Text: {
                position: 'absolute',
                width: '100%',
                background: {
                    color: 'transparent',
                },
                $mol_string: {
                    background: {
                        color: 'transparent',
                    },
                    boxShadow: 'none',
                },
                lineHeight: '1.5',
                ['View']: {
                    ['Row']: {
                        ':empty': {
                            height: '1.5em',
                        },
                        ['Token']: {
                            color: 'inherit',
                        },
                    },
                },
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_form) = class $mol_form extends ($.$mol_list) {
		keydown(next){
			if(next !== undefined) return next;
			return null;
		}
		form_fields(){
			return [];
		}
		body(){
			return (this.form_fields());
		}
		Body(){
			const obj = new this.$.$mol_list();
			(obj.sub) = () => ((this.body()));
			return obj;
		}
		buttons(){
			return [];
		}
		foot(){
			return (this.buttons());
		}
		Foot(){
			const obj = new this.$.$mol_row();
			(obj.sub) = () => ((this.foot()));
			return obj;
		}
		submit_allowed(){
			return true;
		}
		submit_blocked(){
			return false;
		}
		event(){
			return {...(super.event()), "keydown": (next) => (this.keydown(next))};
		}
		submit(next){
			if(next !== undefined) return next;
			return null;
		}
		rows(){
			return [(this.Body()), (this.Foot())];
		}
	};
	($mol_mem(($.$mol_form.prototype), "keydown"));
	($mol_mem(($.$mol_form.prototype), "Body"));
	($mol_mem(($.$mol_form.prototype), "Foot"));
	($mol_mem(($.$mol_form.prototype), "submit"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_form extends $.$mol_form {
            form_fields() {
                return [...this.view_find(view => view instanceof $mol_form_field)]
                    .map(path => path[path.length - 1]);
            }
            submit_allowed() {
                return this.form_fields().every(field => !field.bid());
            }
            submit_blocked() {
                return !this.submit_allowed();
            }
            keydown(next) {
                if (next.ctrlKey && next.keyCode === $mol_keyboard_code.enter && !this.submit_blocked())
                    this.submit(event);
            }
        }
        __decorate([
            $mol_mem
        ], $mol_form.prototype, "form_fields", null);
        __decorate([
            $mol_mem
        ], $mol_form.prototype, "submit_allowed", null);
        $$.$mol_form = $mol_form;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/form/form.view.css", "[mol_form] {\r\n\tgap: var(--mol_gap_block);\r\n}\r\n\r\n[mol_form_body] {\r\n\tgap: var(--mol_gap_block);\r\n}");
})($ || ($ = {}));

;
	($.$mol_icon_calendar) = class $mol_icon_calendar extends ($.$mol_icon) {
		path(){
			return "M19,19H5V8H19M16,1V3H8V1H6V3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3H18V1M17,12H12V17H17V12Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_calendar_today) = class $mol_icon_calendar_today extends ($.$mol_icon) {
		path(){
			return "M7,10H12V15H7M19,19H5V8H19M19,3H18V1H16V3H8V1H6V3H5C3.89,3 3,3.9 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5A2,2 0 0,0 19,3Z";
		}
	};


;
"use strict";

;
	($.$mol_format) = class $mol_format extends ($.$mol_string) {
		mask(id){
			return "";
		}
		allow(){
			return "0123456789";
		}
		hint(){
			return (this.mask("0"));
		}
		keyboard(){
			return "numeric";
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_format extends $.$mol_format {
            selection([from, to] = [0, 0]) {
                const prev = $mol_wire_probe(() => this.selection());
                if (!prev)
                    return [0, 100];
                if (from !== to)
                    return [from, to];
                const allow = this.allow();
                const value = this.value_changed();
                const filtered = [...value].filter(letter => allow.includes(letter)).join('');
                const mask = this.mask(filtered);
                if ((prev?.[0] ?? 0) >= from)
                    return [from, to];
                const lastAllow = (value.length - [...value].reverse().findIndex(letter => allow.includes(letter))) % (value.length + 1);
                if (lastAllow < from) {
                    from = to = lastAllow;
                }
                while (mask[from] && mask[from] !== '_') {
                    ++from;
                    ++to;
                }
                return [from, to];
            }
            value_changed(next) {
                const allow = this.allow();
                const normalize = (val) => {
                    val = [...val].filter(letter => allow.includes(letter)).join('');
                    const letters = [...val].reverse();
                    return this.mask(val).replace(/_/gu, () => letters.pop() ?? '_') + letters.reverse().join('');
                };
                if (next !== undefined) {
                    next = normalize(next);
                    if ([...next].filter(letter => allow.includes(letter)).join('')) {
                        if (next.includes('_'))
                            return next;
                    }
                    else {
                        next = '';
                    }
                }
                return normalize(this.value(next));
            }
        }
        __decorate([
            $mol_mem
        ], $mol_format.prototype, "selection", null);
        __decorate([
            $mol_mem
        ], $mol_format.prototype, "value_changed", null);
        $$.$mol_format = $mol_format;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/format/format.view.css", "[mol_format] {\n\tfont-family: monospace;\n}\n");
})($ || ($ = {}));

;
	($.$mol_icon_trash_can_outline) = class $mol_icon_trash_can_outline extends ($.$mol_icon) {
		path(){
			return "M9,3V4H4V6H5V19A2,2 0 0,0 7,21H17A2,2 0 0,0 19,19V6H20V4H15V3H9M7,6H17V19H7V6M9,8V17H11V8H9M13,8V17H15V8H13Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_chevron_left) = class $mol_icon_chevron_left extends ($.$mol_icon) {
		path(){
			return "M15.41,16.58L10.83,12L15.41,7.41L14,6L8,12L14,18L15.41,16.58Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_chevron_right) = class $mol_icon_chevron_right extends ($.$mol_icon) {
		path(){
			return "M8.59,16.58L13.17,12L8.59,7.41L10,6L16,12L10,18L8.59,16.58Z";
		}
	};


;
"use strict";

;
	($.$mol_hor) = class $mol_hor extends ($.$mol_view) {};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_hor extends $.$mol_hor {
            minimal_width() {
                let min = 0;
                for (const view of this.sub()) {
                    if (!(view instanceof $mol_view))
                        continue;
                    min += view.minimal_width();
                }
                return min;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_hor.prototype, "minimal_width", null);
        $$.$mol_hor = $mol_hor;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_define($mol_hor, {
        display: 'flex',
        alignItems: 'flex-start',
        alignContent: 'flex-start',
        justifyContent: 'flex-start',
        flex: {
            grow: 1,
            shrink: 0,
            basis: 'auto',
        },
    });
})($ || ($ = {}));

;
	($.$mol_calendar) = class $mol_calendar extends ($.$mol_list) {
		title(){
			return "";
		}
		Title(){
			const obj = new this.$.$mol_view();
			(obj.minimal_height) = () => (24);
			(obj.sub) = () => ([(this.title())]);
			return obj;
		}
		head(){
			return [(this.Title())];
		}
		Head(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ((this.head()));
			return obj;
		}
		weekdays(){
			return [];
		}
		Weekdays(){
			const obj = new this.$.$mol_hor();
			(obj.sub) = () => ((this.weekdays()));
			return obj;
		}
		weekend(id){
			return false;
		}
		weekday(id){
			return "";
		}
		week_days(id){
			return [];
		}
		day_ghost(id){
			return false;
		}
		day_holiday(id){
			return false;
		}
		day_selected(id){
			return false;
		}
		day_today(id){
			return false;
		}
		day_theme(id){
			return null;
		}
		day_text(id){
			return "";
		}
		day_content(id){
			return [(this.day_text(id))];
		}
		sub(){
			return [(this.Head()), (this.Weekdays())];
		}
		weeks(){
			return [];
		}
		weeks_count(){
			return 6;
		}
		Weekday(id){
			const obj = new this.$.$mol_calendar_day();
			(obj.holiday) = () => ((this.weekend(id)));
			(obj.sub) = () => ([(this.weekday(id))]);
			return obj;
		}
		Week(id){
			const obj = new this.$.$mol_hor();
			(obj.sub) = () => ((this.week_days(id)));
			return obj;
		}
		Day(id){
			const obj = new this.$.$mol_calendar_day();
			(obj.ghost) = () => ((this.day_ghost(id)));
			(obj.holiday) = () => ((this.day_holiday(id)));
			(obj.selected) = () => ((this.day_selected(id)));
			(obj.today) = () => ((this.day_today(id)));
			(obj.theme) = () => ((this.day_theme(id)));
			(obj.sub) = () => ((this.day_content(id)));
			return obj;
		}
		month_string(){
			return "";
		}
		month_moment(){
			const obj = new this.$.$mol_time_moment();
			return obj;
		}
	};
	($mol_mem(($.$mol_calendar.prototype), "Title"));
	($mol_mem(($.$mol_calendar.prototype), "Head"));
	($mol_mem(($.$mol_calendar.prototype), "Weekdays"));
	($mol_mem_key(($.$mol_calendar.prototype), "Weekday"));
	($mol_mem_key(($.$mol_calendar.prototype), "Week"));
	($mol_mem_key(($.$mol_calendar.prototype), "Day"));
	($mol_mem(($.$mol_calendar.prototype), "month_moment"));
	($.$mol_calendar_day) = class $mol_calendar_day extends ($.$mol_view) {
		holiday(){
			return false;
		}
		ghost(){
			return false;
		}
		selected(){
			return false;
		}
		today(){
			return false;
		}
		theme(){
			return null;
		}
		minimal_height(){
			return 24;
		}
		minimal_width(){
			return 36;
		}
		attr(){
			return {
				"mol_calendar_holiday": (this.holiday()), 
				"mol_calendar_ghost": (this.ghost()), 
				"mol_calendar_selected": (this.selected()), 
				"mol_calendar_today": (this.today()), 
				"mol_theme": (this.theme())
			};
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_calendar extends $.$mol_calendar {
            month_moment() {
                const moment = new $mol_time_moment(this.month_string() || undefined);
                return new $mol_time_moment({ year: moment.year, month: moment.month });
            }
            title() {
                return this.month_moment().toString('Month YYYY');
            }
            day_first() {
                return this.month_moment().merge({ day: 0 });
            }
            day_last() {
                return this.day_first().shift('P1M');
            }
            day_draw_from() {
                let weekday = this.day_first().weekday;
                return this.day_first().shift({ day: -weekday });
            }
            weekdays() {
                const next = [];
                for (let index = 0; index < 7; ++index) {
                    next.push(this.Weekday(index));
                }
                return next;
            }
            weekday(index) {
                return this.day_draw_from().shift({ day: index }).toString('WD');
            }
            weekend(index) {
                return [5, 6].indexOf(index) >= 0;
            }
            sub() {
                return [
                    ...super.sub(),
                    ...this.weeks(),
                ];
            }
            weeks() {
                const weeks = [];
                let count = this.weeks_count();
                for (let i = 0; i < count; ++i) {
                    weeks.push(this.Week(i));
                }
                return weeks;
            }
            week_days(index) {
                const days = [];
                let start = this.day_draw_from().shift({ day: index * 7 });
                for (let i = 0; i < 7; ++i) {
                    days.push(this.Day(start.shift({ day: i }).toString('YYYY-MM-DD')));
                }
                return days;
            }
            day_text(day) {
                return new $mol_time_moment(day).toString("D");
            }
            day_holiday(day) {
                return this.weekend(new $mol_time_moment(day).weekday);
            }
            today() {
                return new $mol_time_moment();
            }
            day_today(day) {
                return this.today().toString('YYYY-MM-DD') === day;
            }
            day_ghost(day) {
                return new $mol_time_moment(day).toString('YYYY-MM') !== this.day_first().toString('YYYY-MM');
            }
            day_theme(day) {
                return this.day_selected(day) ? '$mol_theme_current' : super.day_theme(day);
            }
        }
        __decorate([
            $mol_mem
        ], $mol_calendar.prototype, "month_moment", null);
        __decorate([
            $mol_mem
        ], $mol_calendar.prototype, "day_first", null);
        __decorate([
            $mol_mem
        ], $mol_calendar.prototype, "day_last", null);
        __decorate([
            $mol_mem
        ], $mol_calendar.prototype, "day_draw_from", null);
        __decorate([
            $mol_mem
        ], $mol_calendar.prototype, "weekdays", null);
        __decorate([
            $mol_mem_key
        ], $mol_calendar.prototype, "weekday", null);
        __decorate([
            $mol_mem
        ], $mol_calendar.prototype, "sub", null);
        __decorate([
            $mol_mem
        ], $mol_calendar.prototype, "weeks", null);
        __decorate([
            $mol_mem_key
        ], $mol_calendar.prototype, "week_days", null);
        __decorate([
            $mol_mem_key
        ], $mol_calendar.prototype, "day_text", null);
        __decorate([
            $mol_mem_key
        ], $mol_calendar.prototype, "day_holiday", null);
        __decorate([
            $mol_mem
        ], $mol_calendar.prototype, "today", null);
        __decorate([
            $mol_mem_key
        ], $mol_calendar.prototype, "day_today", null);
        __decorate([
            $mol_mem_key
        ], $mol_calendar.prototype, "day_ghost", null);
        $$.$mol_calendar = $mol_calendar;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/calendar/calendar.view.css", "[mol_calendar] {\n\tdisplay: table;\n\tfont-family: monospace;\n}\n\n[mol_calendar_head] {\n\tdisplay: table-caption;\n\tbackground: inherit;\n}\n\n[mol_calendar_title] {\n\tjustify-content: center;\n}\n\n[mol_calendar_weekdays] ,\n[mol_calendar_week] {\n\tdisplay: table-row;\n\tpadding: 0;\n}\n\n[mol_calendar_day] {\n\tdisplay: table-cell;\n\tpadding: .25rem .5rem;\n\ttext-align: center;\n\tword-break: normal;\n\tbox-shadow: none;\n\tborder-radius: var(--mol_gap_round);\n}\n\n[mol_calendar_weekday] {\n\tcolor: var(--mol_theme_shade);\n\tborder-bottom: 1px solid var(--mol_theme_line);\n}\n\n[mol_calendar_holiday] {\n\tcolor: var(--mol_theme_special);\n}\n\n[mol_calendar_today] {\n\tfont-weight: bolder;\n}\n\n[mol_calendar_ghost] {\n\topacity: .2;\n}\n");
})($ || ($ = {}));

;
	($.$mol_date) = class $mol_date extends ($.$mol_pick) {
		enabled(){
			return true;
		}
		today_click(next){
			if(next !== undefined) return next;
			return null;
		}
		Today_icon(){
			const obj = new this.$.$mol_icon_calendar_today();
			return obj;
		}
		Today(){
			const obj = new this.$.$mol_button_minor();
			(obj.hint) = () => ((this.$.$mol_locale.text("$mol_date_Today_hint")));
			(obj.enabled) = () => ((this.enabled()));
			(obj.click) = (next) => ((this.today_click(next)));
			(obj.sub) = () => ([(this.Today_icon())]);
			return obj;
		}
		value(next){
			if(next !== undefined) return next;
			return "";
		}
		value_changed(next){
			return (this.Input().value_changed(next));
		}
		input_mask(id){
			return "";
		}
		Input(){
			const obj = new this.$.$mol_format();
			(obj.value) = (next) => ((this.value(next)));
			(obj.mask) = (id) => ((this.input_mask(id)));
			(obj.enabled) = () => ((this.enabled()));
			return obj;
		}
		clear(next){
			if(next !== undefined) return next;
			return null;
		}
		Clear_icon(){
			const obj = new this.$.$mol_icon_trash_can_outline();
			return obj;
		}
		Clear(){
			const obj = new this.$.$mol_button_minor();
			(obj.hint) = () => ((this.$.$mol_locale.text("$mol_date_Clear_hint")));
			(obj.enabled) = () => ((this.enabled()));
			(obj.click) = (next) => ((this.clear(next)));
			(obj.sub) = () => ([(this.Clear_icon())]);
			return obj;
		}
		input_content(){
			return [
				(this.Today()), 
				(this.Input()), 
				(this.Clear())
			];
		}
		Input_row(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ((this.input_content()));
			return obj;
		}
		month_moment(){
			return (this.value_moment());
		}
		day_selected(id){
			return false;
		}
		day_click(id, next){
			if(next !== undefined) return next;
			return null;
		}
		Calendar_title(){
			return (this.Calendar().Title());
		}
		prev_hint(){
			return (this.$.$mol_locale.text("$mol_date_prev_hint"));
		}
		prev(next){
			if(next !== undefined) return next;
			return null;
		}
		Prev_icon(){
			const obj = new this.$.$mol_icon_chevron_left();
			return obj;
		}
		Prev(){
			const obj = new this.$.$mol_button_minor();
			(obj.hint) = () => ((this.prev_hint()));
			(obj.click) = (next) => ((this.prev(next)));
			(obj.sub) = () => ([(this.Prev_icon())]);
			return obj;
		}
		next_hint(){
			return (this.$.$mol_locale.text("$mol_date_next_hint"));
		}
		next(next){
			if(next !== undefined) return next;
			return null;
		}
		Next_icon(){
			const obj = new this.$.$mol_icon_chevron_right();
			return obj;
		}
		Next(){
			const obj = new this.$.$mol_button_minor();
			(obj.hint) = () => ((this.next_hint()));
			(obj.click) = (next) => ((this.next(next)));
			(obj.sub) = () => ([(this.Next_icon())]);
			return obj;
		}
		Calendar_tools(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([
				(this.Prev()), 
				(this.Calendar_title()), 
				(this.Next())
			]);
			return obj;
		}
		Calendar(){
			const obj = new this.$.$mol_date_calendar();
			(obj.enabled) = () => ((this.enabled()));
			(obj.month_moment) = () => ((this.month_moment()));
			(obj.day_selected) = (id) => ((this.day_selected(id)));
			(obj.day_click) = (id, next) => ((this.day_click(id, next)));
			(obj.head) = () => ([(this.Calendar_tools())]);
			return obj;
		}
		Icon(){
			const obj = new this.$.$mol_icon_calendar();
			return obj;
		}
		bubble_content(){
			return [(this.Input_row()), (this.Calendar())];
		}
		value_number(next){
			if(next !== undefined) return next;
			return +NaN;
		}
		value_moment(next){
			if(next !== undefined) return next;
			const obj = new this.$.$mol_time_moment();
			return obj;
		}
	};
	($mol_mem(($.$mol_date.prototype), "today_click"));
	($mol_mem(($.$mol_date.prototype), "Today_icon"));
	($mol_mem(($.$mol_date.prototype), "Today"));
	($mol_mem(($.$mol_date.prototype), "value"));
	($mol_mem(($.$mol_date.prototype), "Input"));
	($mol_mem(($.$mol_date.prototype), "clear"));
	($mol_mem(($.$mol_date.prototype), "Clear_icon"));
	($mol_mem(($.$mol_date.prototype), "Clear"));
	($mol_mem(($.$mol_date.prototype), "Input_row"));
	($mol_mem_key(($.$mol_date.prototype), "day_click"));
	($mol_mem(($.$mol_date.prototype), "prev"));
	($mol_mem(($.$mol_date.prototype), "Prev_icon"));
	($mol_mem(($.$mol_date.prototype), "Prev"));
	($mol_mem(($.$mol_date.prototype), "next"));
	($mol_mem(($.$mol_date.prototype), "Next_icon"));
	($mol_mem(($.$mol_date.prototype), "Next"));
	($mol_mem(($.$mol_date.prototype), "Calendar_tools"));
	($mol_mem(($.$mol_date.prototype), "Calendar"));
	($mol_mem(($.$mol_date.prototype), "Icon"));
	($mol_mem(($.$mol_date.prototype), "value_number"));
	($mol_mem(($.$mol_date.prototype), "value_moment"));
	($.$mol_date_calendar) = class $mol_date_calendar extends ($.$mol_calendar) {
		day_click(id, next){
			if(next !== undefined) return next;
			return null;
		}
		enabled(){
			return true;
		}
		Day_button(id){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ((this.day_text(id)));
			(obj.event_click) = (next) => ((this.day_click(id, next)));
			(obj.minimal_height) = () => (24);
			(obj.enabled) = () => ((this.enabled()));
			return obj;
		}
		day_content(id){
			return [(this.Day_button(id))];
		}
	};
	($mol_mem_key(($.$mol_date_calendar.prototype), "day_click"));
	($mol_mem_key(($.$mol_date_calendar.prototype), "Day_button"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_date extends $.$mol_date {
            trigger_content() {
                return [this.value() || this.Icon()];
            }
            input_mask(val) {
                return val.length > 8 ? '____-__-__ __:__' : '____-__-__ ';
            }
            input_content() {
                return [
                    this.Today(),
                    this.Input(),
                    ...this.value() ? [this.Clear()] : [],
                ];
            }
            value(val) {
                const moment = this.value_moment();
                if (val === undefined)
                    return moment?.toString('YYYY-MM-DD hh:mm') ?? '';
                const moment2 = $mol_try(() => val && new $mol_time_moment(val).merge({ offset: new $mol_time_moment().offset })) || null;
                if (moment2 instanceof Error)
                    return val;
                this.value_moment(moment2);
                return val;
            }
            value_moment(next) {
                const stamp = this.value_number();
                if (next === undefined) {
                    return isNaN(stamp) ? null : new $mol_time_moment(stamp);
                }
                this.value_number(next?.valueOf() ?? NaN);
                return next;
            }
            value_number(next) {
                const value = this.value();
                if (next === undefined) {
                    if (!value)
                        return NaN;
                    const moment = $mol_try(() => new $mol_time_moment(value));
                    if (moment instanceof Error)
                        return NaN;
                    return moment.valueOf() ?? NaN;
                }
                const moment = $mol_try(() => new $mol_time_moment(next));
                this.value(moment.toString(value.length > 12 ? 'YYYY-MM-DD hh:mm' : 'YYYY-MM-DD'));
                return next;
            }
            value_moment_today() {
                return this.value()
                    ? new $mol_time_moment().mask(this.value())
                    : new $mol_time_moment();
            }
            clear() {
                this.value('');
                this.Input().focused(true);
                this.Input().selection([0, 0]);
            }
            month_moment(next) {
                if (next)
                    return next;
                let moment = $mol_try(() => new $mol_time_moment(this.value_changed().replace(/\D+$/, '')).mask('0000-00'));
                if (moment instanceof Error || !moment.year)
                    return new $mol_time_moment().mask('0000-00');
                if (moment.month === undefined) {
                    moment = moment.merge({ month: 0 });
                }
                return moment;
            }
            day_selected(day) {
                return this.value_moment()?.toString('YYYY-MM-DD') === day;
            }
            day_click(day) {
                const moment = new $mol_time_moment(day);
                this.value_moment(this.value_moment()?.merge(moment) ?? moment);
                this.showed(false);
            }
            prev() {
                this.month_moment(this.month_moment().shift({ month: -1 }));
            }
            next() {
                this.month_moment(this.month_moment().shift({ month: +1 }));
            }
            today_click() {
                this.value_moment(this.value_moment_today());
            }
        }
        __decorate([
            $mol_mem
        ], $mol_date.prototype, "value", null);
        __decorate([
            $mol_mem
        ], $mol_date.prototype, "value_moment", null);
        __decorate([
            $mol_mem
        ], $mol_date.prototype, "value_number", null);
        __decorate([
            $mol_mem
        ], $mol_date.prototype, "value_moment_today", null);
        __decorate([
            $mol_mem
        ], $mol_date.prototype, "month_moment", null);
        $$.$mol_date = $mol_date;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/date/date.view.css", "/* [mol_date_bubble] {\n\tpadding: .5rem;\n} */\n\n[mol_date_input] {\n\tflex-shrink: 0;\n}\n\n[mol_date_prev] ,\n[mol_date_next] {\n\tflex-grow: 1;\n}\n[mol_date_prev] {\n\tjustify-content: flex-end;\n}\n\n[mol_date_calendar_title] {\n\tpadding: var(--mol_gap_text);\n}\n\n[mol_date_calendar_day] {\n\tpadding: 0;\n}\n\n[mol_date_calendar_day_button] {\n\twidth: 100%;\n\t/* padding: .25rem .5rem; */\n\tjustify-content: center;\n\tcursor: pointer;\n\tcolor: inherit;\n}\n");
})($ || ($ = {}));

;
	($.$mol_form_group) = class $mol_form_group extends ($.$mol_view) {};


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/form/group/group.view.css", "[mol_form_group] {\n\tflex-wrap: wrap;\n\tgap: var(--mol_gap_block);\n}\n\n[mol_form_group] > * {\n\tflex: 1 1 18rem;\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$mol_status) = class $mol_status extends ($.$mol_view) {
		message(){
			return "";
		}
		status(){
			return (this.title());
		}
		minimal_height(){
			return 24;
		}
		minimal_width(){
			return 0;
		}
		sub(){
			return [(this.message())];
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_status extends $.$mol_status {
            message() {
                try {
                    return this.status() ?? null;
                }
                catch (error) {
                    if (error instanceof Promise)
                        $mol_fail_hidden(error);
                    return error.message;
                }
            }
        }
        $$.$mol_status = $mol_status;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/status/status.view.css", "[mol_status] {\n\tpadding: var(--mol_gap_text);\n\tborder-radius: var(--mol_gap_round);\n\tdisplay: block;\n}\n\n[mol_status]:not([mol_view_error=\"Promise\"]) {\n\tcolor: var(--mol_theme_focus);\n}\n\n[mol_status]:not([mol_view_error=\"Promise\"]):empty {\n\tdisplay: none;\n}\n");
})($ || ($ = {}));

;
	($.$shm_hitalama_board_form_view) = class $shm_hitalama_board_form_view extends ($.$mol_form) {
		query_bid(){
			return "";
		}
		query(next){
			if(next !== undefined) return next;
			return "";
		}
		Query(){
			const obj = new this.$.$mol_string();
			(obj.value) = (next) => ((this.query(next)));
			return obj;
		}
		Query_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("Поисковой запрос");
			(obj.bid) = () => ((this.query_bid()));
			(obj.Content) = () => ((this.Query()));
			return obj;
		}
		excluded_words(next){
			if(next !== undefined) return next;
			return "";
		}
		Excluded_words(){
			const obj = new this.$.$mol_textarea();
			(obj.value) = (next) => ((this.excluded_words(next)));
			return obj;
		}
		Excluded_words_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("Минус-слова");
			(obj.Content) = () => ((this.Excluded_words()));
			return obj;
		}
		date_from(next){
			if(next !== undefined) return next;
			return "";
		}
		Date_from(){
			const obj = new this.$.$mol_date();
			(obj.value) = (next) => ((this.date_from(next)));
			return obj;
		}
		date_to(next){
			if(next !== undefined) return next;
			return "";
		}
		Date_to(){
			const obj = new this.$.$mol_date();
			(obj.value) = (next) => ((this.date_to(next)));
			return obj;
		}
		Period_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("Период");
			(obj.content) = () => ([
				(this.Date_from()), 
				"–", 
				(this.Date_to())
			]);
			return obj;
		}
		country(next){
			if(next !== undefined) return next;
			return "";
		}
		Country(){
			const obj = new this.$.$mol_string();
			(obj.value) = (next) => ((this.country(next)));
			return obj;
		}
		Country_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("Страны");
			(obj.Content) = () => ((this.Country()));
			return obj;
		}
		language(next){
			if(next !== undefined) return next;
			return "";
		}
		Language(){
			const obj = new this.$.$mol_string();
			(obj.value) = (next) => ((this.language(next)));
			return obj;
		}
		Language_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("Языки");
			(obj.Content) = () => ((this.Language()));
			return obj;
		}
		file_bid(){
			return "";
		}
		social_media_attach(id, next){
			if(next !== undefined) return next;
			return null;
		}
		Social_media_file(id){
			const obj = new this.$.$mol_attach();
			(obj.attach_new) = (next) => ((this.social_media_attach(id, next)));
			return obj;
		}
		social_media_title(){
			return "";
		}
		Social_media_name(){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.social_media_title()));
			return obj;
		}
		content_social_media(id){
			return [(this.Social_media_file(id)), (this.Social_media_name())];
		}
		Social_media_field(id){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("Соц.медиа");
			(obj.bid) = () => ((this.file_bid()));
			(obj.content) = () => ((this.content_social_media(id)));
			return obj;
		}
		social_media_field(){
			return [(this.Social_media_field("0"))];
		}
		mass_media_attach(id, next){
			if(next !== undefined) return next;
			return null;
		}
		Mass_media_file(id){
			const obj = new this.$.$mol_attach();
			(obj.attach_new) = (next) => ((this.mass_media_attach(id, next)));
			return obj;
		}
		mass_media_title(){
			return "";
		}
		Mass_media_name(){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.mass_media_title()));
			return obj;
		}
		content_mass_media(id){
			return [(this.Mass_media_file(id)), (this.Mass_media_name())];
		}
		Mass_media_field(id){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("СМИ");
			(obj.bid) = () => ((this.file_bid()));
			(obj.content) = () => ((this.content_mass_media(id)));
			return obj;
		}
		mass_media_field(){
			return [(this.Mass_media_field("0"))];
		}
		type(next){
			if(next !== undefined) return next;
			return "";
		}
		type_suggests_showed(next){
			return (this.Type().suggests_showed(next));
		}
		type_focused(next){
			return (this.Type().focused(next));
		}
		type_select(id, next){
			if(next !== undefined) return next;
			return null;
		}
		Type(){
			const obj = new this.$.$mol_search();
			(obj.hint) = () => ("Выбрать...");
			(obj.query) = (next) => ((this.type(next)));
			(obj.suggest_select) = (id, next) => ((this.type_select(id, next)));
			(obj.suggests) = () => ([
				"инфоповод", 
				"компания", 
				"персона", 
				"событие", 
				"процесс", 
				"география"
			]);
			return obj;
		}
		Type_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("Type");
			(obj.Content) = () => ((this.Type()));
			return obj;
		}
		tags(next){
			if(next !== undefined) return next;
			return "";
		}
		Tags(){
			const obj = new this.$.$mol_string();
			(obj.value) = (next) => ((this.tags(next)));
			return obj;
		}
		Tags_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("Tags");
			(obj.Content) = () => ((this.Tags()));
			return obj;
		}
		category(next){
			if(next !== undefined) return next;
			return "";
		}
		Category(){
			const obj = new this.$.$mol_string();
			(obj.value) = (next) => ((this.category(next)));
			return obj;
		}
		Category_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("Category");
			(obj.Content) = () => ((this.Category()));
			return obj;
		}
		Query_group(){
			const obj = new this.$.$mol_form_group();
			(obj.sub) = () => ([(this.Query_field()), (this.Excluded_words_field())]);
			return obj;
		}
		Group(){
			const obj = new this.$.$mol_form_group();
			(obj.sub) = () => ([(this.Country_field()), (this.Language_field())]);
			return obj;
		}
		Files(){
			const obj = new this.$.$mol_form_group();
			(obj.sub) = () => ([...(this.social_media_field()), ...(this.mass_media_field())]);
			return obj;
		}
		Tags_group(){
			const obj = new this.$.$mol_form_group();
			(obj.sub) = () => ([
				(this.Type_field()), 
				(this.Tags_field()), 
				(this.Category_field())
			]);
			return obj;
		}
		form_body(){
			return [
				(this.Query_group()), 
				(this.Period_field()), 
				(this.Group()), 
				(this.Files()), 
				(this.Tags_group())
			];
		}
		submit(next){
			if(next !== undefined) return next;
			return null;
		}
		Publish(){
			const obj = new this.$.$mol_button_major();
			(obj.title) = () => ("Отправить");
			(obj.click) = (next) => ((this.submit(next)));
			(obj.enabled) = () => ((this.submit_allowed()));
			return obj;
		}
		result(next){
			if(next !== undefined) return next;
			return "";
		}
		Result(){
			const obj = new this.$.$mol_status();
			(obj.message) = () => ((this.result()));
			return obj;
		}
		clear(next){
			if(next !== undefined) return next;
			return null;
		}
		Clear(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ("Очистить");
			(obj.click) = (next) => ((this.clear(next)));
			return obj;
		}
		board(){
			const obj = new this.$.$shm_hitalama_board();
			return obj;
		}
		form(){
			const obj = new this.$.$shm_hitalama_board_form();
			return obj;
		}
		session_id(next){
			if(next !== undefined) return next;
			return "0";
		}
		form_fields(){
			return [
				(this.Query_field()), 
				(this.Excluded_words_field()), 
				(this.Period_field()), 
				(this.Country_field()), 
				(this.Language_field()), 
				...(this.social_media_field()), 
				...(this.mass_media_field()), 
				(this.Type_field()), 
				(this.Tags_field()), 
				(this.Category_field())
			];
		}
		body(){
			return (this.form_body());
		}
		buttons(){
			return [
				(this.Publish()), 
				(this.Result()), 
				(this.Clear())
			];
		}
	};
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "query"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "Query"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "Query_field"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "excluded_words"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "Excluded_words"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "Excluded_words_field"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "date_from"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "Date_from"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "date_to"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "Date_to"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "Period_field"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "country"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "Country"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "Country_field"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "language"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "Language"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "Language_field"));
	($mol_mem_key(($.$shm_hitalama_board_form_view.prototype), "social_media_attach"));
	($mol_mem_key(($.$shm_hitalama_board_form_view.prototype), "Social_media_file"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "Social_media_name"));
	($mol_mem_key(($.$shm_hitalama_board_form_view.prototype), "Social_media_field"));
	($mol_mem_key(($.$shm_hitalama_board_form_view.prototype), "mass_media_attach"));
	($mol_mem_key(($.$shm_hitalama_board_form_view.prototype), "Mass_media_file"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "Mass_media_name"));
	($mol_mem_key(($.$shm_hitalama_board_form_view.prototype), "Mass_media_field"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "type"));
	($mol_mem_key(($.$shm_hitalama_board_form_view.prototype), "type_select"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "Type"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "Type_field"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "tags"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "Tags"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "Tags_field"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "category"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "Category"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "Category_field"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "Query_group"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "Group"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "Files"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "Tags_group"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "submit"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "Publish"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "result"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "Result"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "clear"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "Clear"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "board"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "form"));
	($mol_mem(($.$shm_hitalama_board_form_view.prototype), "session_id"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_board_form_view extends $.$shm_hitalama_board_form_view {
            query(next) {
                return this.form().Query(next)?.val(next) ?? '';
            }
            excluded_words(next) {
                return this.form().Excluded_words(next)?.val(next) ?? '';
            }
            date_from(next) {
                const now = new $mol_time_moment;
                const shifted = now.shift({ year: -1, day: -now.day });
                return this.form().Date_from(next)?.val(next) ?? shifted.toString('YYYY-MM-DD');
            }
            date_to(next) {
                const now = new $mol_time_moment;
                return this.form().Date_to(next)?.val(next) ?? now.toString('YYYY-MM-DD');
            }
            country(next) {
                return this.form().Country(next)?.val(next) ?? '';
            }
            language(next) {
                return this.form().Language(next)?.val(next) ?? '';
            }
            type(next) {
                return this.form().Type(next)?.val(next) ?? '';
            }
            tags(next) {
                return this.form().Tags(next)?.val(next) ?? '';
            }
            category(next) {
                return this.form().Category(next)?.val(next) ?? '';
            }
            soc_file_test;
            social_media_attach(session_id, files) {
                const file = this.board().Files(null)?.make(this.board().land());
                this.soc_file_test = files[0];
                file?.title(files[0].name);
                file?.Size(null)?.val(files[0].size);
                file?.File(null)?.ensure(this.board().land())?.blob(files[0]);
                this.form().File_social_media(null)?.remote(file);
            }
            mass_media_attach(session_id, files) {
                const file = this.board().Files(null)?.make(this.board().land());
                file?.title(files[0].name);
                file?.Size(null)?.val(files[0].size);
                file?.File(null)?.ensure(this.board().land())?.blob(files[0]);
                this.form().File_mass_media(null)?.remote(file);
            }
            social_media_title() {
                return this.form().File_social_media()?.remote()?.title() ?? '';
            }
            mass_media_title() {
                return this.form().File_mass_media()?.remote()?.title() ?? '';
            }
            type_select(id, event) {
                this.type(id);
                this.focused(true);
            }
            query_bid() {
                return this.query() ? '' : '*';
            }
            file_bid() {
                return this.social_media_title() || this.mass_media_title() ? '' : '*';
            }
            submit() {
                const form = this.board().Search_statistics(null)?.make(this.board().land());
                form?.query(this.query());
                form?.excluded_words(this.excluded_words());
                form?.date_from(this.date_from());
                form?.date_to(this.date_to());
                form?.country(this.country());
                form?.language(this.language());
                form?.type(this.type());
                form?.tags(this.tags());
                form?.category(this.category());
                form?.File_mass_media(null)?.remote(this.form().File_mass_media()?.remote());
                form?.File_social_media(null)?.remote(this.form().File_social_media()?.remote());
                this.clear();
            }
            clear() {
                const form = this.form();
                form.query('');
                form.excluded_words('');
                this.session_id($mol_guid());
                form?.File_mass_media(null)?.remote(null);
                form?.File_social_media(null)?.remote(null);
            }
            social_media_field() {
                return [this.Social_media_field(this.session_id())];
            }
            mass_media_field() {
                return [this.Mass_media_field(this.session_id())];
            }
        }
        $$.$shm_hitalama_board_form_view = $shm_hitalama_board_form_view;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    $mol_style_attach("shm/hitalama/board/form/view/view.view.css", "[shm_hitalama_board_form_view_type_clear]:where(:not(:disabled)):hover {\n\tz-index: var(--mol_layer_focus);\n}\n[shm_hitalama_board_form_view_type_clear] {\n\tz-index: var(--mol_layer_focus);\n}\n");
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_board_form_view, {
            Period_field: {
                Content: {
                    padding: 0,
                    align: {
                        items: 'center',
                    },
                    flex: {
                        wrap: 'wrap',
                    },
                },
            },
            Social_media_field: {
                Content: {
                    flex: {
                        direction: 'column',
                    },
                },
            },
            Social_media_file: {
                Content: {
                    padding: 0,
                }
            },
            Mass_media_field: {
                Content: {
                    flex: {
                        direction: 'column',
                    },
                },
            },
            Mass_media_file: {
                Content: {
                    padding: 0,
                }
            },
            Query_group: {
                '$mol_form_field': {
                    flex: {
                        basis: '25rem',
                    },
                },
            },
            Group: {
                '$mol_form_field': {
                    flex: {
                        basis: '10rem',
                    },
                },
            },
            Files: {
                '$mol_form_field': {
                    flex: {
                        basis: '6rem',
                    },
                },
            },
            Tags_group: {
                '$mol_form_field': {
                    flex: {
                        basis: '10rem',
                    },
                },
            },
            Type: {
                Clear: {
                    position: 'absolute',
                    right: 0,
                },
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_board_block_form) = class $shm_hitalama_board_block_form extends ($.$shm_hitalama_board_block_float) {
		form(){
			const obj = new this.$.$shm_hitalama_board_form();
			return obj;
		}
		board(){
			const obj = new this.$.$shm_hitalama_board();
			return obj;
		}
		Form(){
			const obj = new this.$.$shm_hitalama_board_form_view();
			(obj.form) = () => ((this.form()));
			(obj.board) = () => ((this.board()));
			return obj;
		}
		content(){
			return [(this.Drag_view()), (this.Form())];
		}
		font_tools(){
			return [];
		}
	};
	($mol_mem(($.$shm_hitalama_board_block_form.prototype), "form"));
	($mol_mem(($.$shm_hitalama_board_block_form.prototype), "board"));
	($mol_mem(($.$shm_hitalama_board_block_form.prototype), "Form"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_board_block_form extends $.$shm_hitalama_board_block_form {
            form() {
                return this.block().Form(null);
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_form.prototype, "form", null);
        $$.$shm_hitalama_board_block_form = $shm_hitalama_board_block_form;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_board_block_form, {
            background: {
                color: $mol_theme.card,
            },
            Drag_view: {
                position: 'absolute',
                width: '100%',
                height: '100%',
            },
            Form: {
                padding: $mol_gap.block,
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_icon_content_copy) = class $mol_icon_content_copy extends ($.$mol_icon) {
		path(){
			return "M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_cog) = class $mol_icon_cog extends ($.$mol_icon) {
		path(){
			return "M12,15.5A3.5,3.5 0 0,1 8.5,12A3.5,3.5 0 0,1 12,8.5A3.5,3.5 0 0,1 15.5,12A3.5,3.5 0 0,1 12,15.5M19.43,12.97C19.47,12.65 19.5,12.33 19.5,12C19.5,11.67 19.47,11.34 19.43,11L21.54,9.37C21.73,9.22 21.78,8.95 21.66,8.73L19.66,5.27C19.54,5.05 19.27,4.96 19.05,5.05L16.56,6.05C16.04,5.66 15.5,5.32 14.87,5.07L14.5,2.42C14.46,2.18 14.25,2 14,2H10C9.75,2 9.54,2.18 9.5,2.42L9.13,5.07C8.5,5.32 7.96,5.66 7.44,6.05L4.95,5.05C4.73,4.96 4.46,5.05 4.34,5.27L2.34,8.73C2.21,8.95 2.27,9.22 2.46,9.37L4.57,11C4.53,11.34 4.5,11.67 4.5,12C4.5,12.33 4.53,12.65 4.57,12.97L2.46,14.63C2.27,14.78 2.21,15.05 2.34,15.27L4.34,18.73C4.46,18.95 4.73,19.03 4.95,18.95L7.44,17.94C7.96,18.34 8.5,18.68 9.13,18.93L9.5,21.58C9.54,21.82 9.75,22 10,22H14C14.25,22 14.46,21.82 14.5,21.58L14.87,18.93C15.5,18.67 16.04,18.34 16.56,17.94L19.05,18.95C19.27,19.03 19.54,18.95 19.66,18.73L21.66,15.27C21.78,15.05 21.73,14.78 21.54,14.63L19.43,12.97Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_cog_outline) = class $mol_icon_cog_outline extends ($.$mol_icon) {
		path(){
			return "M12,8A4,4 0 0,1 16,12A4,4 0 0,1 12,16A4,4 0 0,1 8,12A4,4 0 0,1 12,8M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10M10,22C9.75,22 9.54,21.82 9.5,21.58L9.13,18.93C8.5,18.68 7.96,18.34 7.44,17.94L4.95,18.95C4.73,19.03 4.46,18.95 4.34,18.73L2.34,15.27C2.21,15.05 2.27,14.78 2.46,14.63L4.57,12.97L4.5,12L4.57,11L2.46,9.37C2.27,9.22 2.21,8.95 2.34,8.73L4.34,5.27C4.46,5.05 4.73,4.96 4.95,5.05L7.44,6.05C7.96,5.66 8.5,5.32 9.13,5.07L9.5,2.42C9.54,2.18 9.75,2 10,2H14C14.25,2 14.46,2.18 14.5,2.42L14.87,5.07C15.5,5.32 16.04,5.66 16.56,6.05L19.05,5.05C19.27,4.96 19.54,5.05 19.66,5.27L21.66,8.73C21.79,8.95 21.73,9.22 21.54,9.37L19.43,11L19.5,12L19.43,13L21.54,14.63C21.73,14.78 21.79,15.05 21.66,15.27L19.66,18.73C19.54,18.95 19.27,19.04 19.05,18.95L16.56,17.95C16.04,18.34 15.5,18.68 14.87,18.93L14.5,21.58C14.46,21.82 14.25,22 14,22H10M11.25,4L10.88,6.61C9.68,6.86 8.62,7.5 7.85,8.39L5.44,7.35L4.69,8.65L6.8,10.2C6.4,11.37 6.4,12.64 6.8,13.8L4.68,15.36L5.43,16.66L7.86,15.62C8.63,16.5 9.68,17.14 10.87,17.38L11.24,20H12.76L13.13,17.39C14.32,17.14 15.37,16.5 16.14,15.62L18.57,16.66L19.32,15.36L17.2,13.81C17.6,12.64 17.6,11.37 17.2,10.2L19.31,8.65L18.56,7.35L16.15,8.39C15.38,7.5 14.32,6.86 13.12,6.62L12.75,4H11.25Z";
		}
	};


;
"use strict";

;
	($.$mol_check_group) = class $mol_check_group extends ($.$mol_check_box) {
		checks(){
			return [];
		}
		full(){
			return true;
		}
	};


;
	($.$mol_icon_check) = class $mol_icon_check extends ($.$mol_icon) {
		path(){
			return "M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z";
		}
	};


;
"use strict";

;
	($.$mol_icon_check_all) = class $mol_icon_check_all extends ($.$mol_icon) {
		path(){
			return "M0.41,13.41L6,19L7.41,17.58L1.83,12M22.24,5.58L11.66,16.17L7.5,12L6.07,13.41L11.66,19L23.66,7M18,7L16.59,5.58L10.24,11.93L11.66,13.34L18,7Z";
		}
	};


;
"use strict";

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_check_group extends $.$mol_check_group {
            checked(next) {
                if (next !== undefined) {
                    for (const check of this.checks()) {
                        check.checked(next);
                    }
                    return next;
                }
                return this.checks().some(check => check.checked());
            }
            full() {
                return this.checks().every(check => check.checked());
            }
            Icon() {
                return this.full() ? new $mol_icon_check_all : new $mol_icon_tick;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_check_group.prototype, "checked", null);
        __decorate([
            $mol_mem
        ], $mol_check_group.prototype, "full", null);
        __decorate([
            $mol_mem
        ], $mol_check_group.prototype, "Icon", null);
        $$.$mol_check_group = $mol_check_group;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_board_block_table) = class $shm_hitalama_board_block_table extends ($.$shm_hitalama_board_block_float) {
		rows(){
			return {};
		}
		col_ids(){
			return [];
		}
		col_head_content(id){
			return [];
		}
		cell_content_text(id){
			return (this.Table().cell_content_text(id));
		}
		Cell(id){
			const obj = new this.$.$mol_view();
			return obj;
		}
		table_row_ids(){
			return (this.Table().row_ids());
		}
		Table(){
			const obj = new this.$.$mol_grid();
			(obj.records) = () => ((this.rows()));
			(obj.col_ids) = () => ((this.col_ids()));
			(obj.col_head_content) = (id) => ((this.col_head_content(id)));
			(obj.Cell) = (id) => ((this.Cell(id)));
			return obj;
		}
		Copy_icon(id){
			const obj = new this.$.$mol_icon_content_copy();
			return obj;
		}
		cell_content_text_str(id){
			return "";
		}
		Cell_copy(id){
			const obj = new this.$.$mol_button_copy();
			(obj.sub) = () => ([(this.Copy_icon(id))]);
			(obj.text) = () => ((this.cell_content_text_str(id)));
			return obj;
		}
		Copy_area(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Cell_copy(id))]);
			return obj;
		}
		col_width_px(id){
			return "auto";
		}
		cell_style(id){
			return {"maxWidth": (this.col_width_px(id)), "width": (this.col_width_px(id))};
		}
		cell_file_uri(id){
			return "";
		}
		cell_file_name(id){
			return "";
		}
		Download_icon(id){
			const obj = new this.$.$mol_icon_download();
			return obj;
		}
		Download(id){
			const obj = new this.$.$mol_button_download();
			(obj.uri) = () => ((this.cell_file_uri(id)));
			(obj.file_name) = () => ((this.cell_file_name(id)));
			(obj.sub) = () => ([(this.Download_icon(id)), (this.cell_file_name(id))]);
			return obj;
		}
		cell_file_visible(id){
			return [(this.Download(id))];
		}
		cell_index_number(id){
			return "";
		}
		cell_checked(id, next){
			if(next !== undefined) return next;
			return false;
		}
		Checkbox(id){
			const obj = new this.$.$mol_check_box();
			(obj.checked) = (next) => ((this.cell_checked(id, next)));
			return obj;
		}
		cell_delete(id, next){
			if(next !== undefined) return next;
			return null;
		}
		Action_delete(id){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ("Удалить");
			(obj.click) = (next) => ((this.cell_delete(id, next)));
			return obj;
		}
		cell_delete_visible(id){
			return [(this.Action_delete(id))];
		}
		cell_edit(id, next){
			if(next !== undefined) return next;
			return null;
		}
		Action_edit(id){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ("Редактировать");
			(obj.click) = (next) => ((this.cell_edit(id, next)));
			return obj;
		}
		cell_checkboxes(){
			return [];
		}
		Settings_trigger_icon(){
			const obj = new this.$.$mol_icon_cog_outline();
			return obj;
		}
		Col_widths_head(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => (["Ширина, px"]);
			return obj;
		}
		Col_width_title(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.col_settings_title(id))]);
			return obj;
		}
		col_width(id, next){
			if(next !== undefined) return next;
			return NaN;
		}
		Col_width(id){
			const obj = new this.$.$mol_number();
			(obj.Dec) = () => (null);
			(obj.Inc) = () => (null);
			(obj.value) = (next) => ((this.col_width(id, next)));
			(obj.hint) = () => ("auto");
			return obj;
		}
		Col_width_row(id){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Col_width_title(id)), (this.Col_width(id))]);
			return obj;
		}
		col_width_rows(){
			return [(this.Col_width_row(id))];
		}
		Settings_content(){
			const obj = new this.$.$mol_list();
			(obj.sub) = () => ([(this.Col_widths_head()), ...(this.col_width_rows())]);
			return obj;
		}
		Settings_scroll(){
			const obj = new this.$.$mol_scroll();
			(obj.sub) = () => ([(this.Settings_content())]);
			return obj;
		}
		Settings_pop(){
			const obj = new this.$.$mol_pick();
			(obj.hint) = () => ((this.$.$mol_locale.text("$shm_hitalama_board_block_table_Settings_pop_hint")));
			(obj.trigger_content) = () => ([(this.Settings_trigger_icon())]);
			(obj.bubble_content) = () => ([(this.Settings_scroll())]);
			return obj;
		}
		delete_enabled(next){
			if(next !== undefined) return next;
			return false;
		}
		Deleting(){
			const obj = new this.$.$mol_check_box();
			(obj.title) = () => ("Удаление строк");
			(obj.checked) = (next) => ((this.delete_enabled(next)));
			return obj;
		}
		deleting_tool_visible(){
			return [(this.Deleting())];
		}
		chart_add(next){
			if(next !== undefined) return next;
			return null;
		}
		Chart_add(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ("Добавить график");
			(obj.click) = (next) => ((this.chart_add(next)));
			return obj;
		}
		drag_body(){
			return [(this.Table())];
		}
		Cell_text(id){
			const obj = new this.$.$mol_grid_cell();
			(obj.sub) = () => ([...(this.cell_content_text(id)), (this.Copy_area(id))]);
			(obj.style) = () => ((this.cell_style(id)));
			return obj;
		}
		Cell_file(id){
			const obj = new this.$.$mol_grid_cell();
			(obj.sub) = () => ([...(this.cell_file_visible(id))]);
			(obj.style) = () => ((this.cell_style(id)));
			return obj;
		}
		Cell_index_number(id){
			const obj = new this.$.$mol_grid_cell();
			(obj.sub) = () => ([(this.cell_index_number(id))]);
			return obj;
		}
		Cell_checkbox(id){
			const obj = new this.$.$mol_grid_cell();
			(obj.sub) = () => ([(this.Checkbox(id))]);
			return obj;
		}
		Cell_delete(id){
			const obj = new this.$.$mol_grid_cell();
			(obj.sub) = () => ([...(this.cell_delete_visible(id))]);
			return obj;
		}
		Cell_edit(id){
			const obj = new this.$.$mol_grid_cell();
			(obj.sub) = () => ([(this.Action_edit(id))]);
			return obj;
		}
		All_check(){
			const obj = new this.$.$mol_check_group();
			(obj.checks) = () => ((this.cell_checkboxes()));
			return obj;
		}
		tools(){
			return [
				(this.Top()), 
				(this.Bottom()), 
				(this.Settings_pop()), 
				(this.Delete()), 
				(this.Copy_code()), 
				...(this.deleting_tool_visible())
			];
		}
		Contextmenu_body(){
			const obj = new this.$.$mol_list();
			(obj.sub) = () => ([(this.Chart_add())]);
			return obj;
		}
	};
	($mol_mem_key(($.$shm_hitalama_board_block_table.prototype), "Cell"));
	($mol_mem(($.$shm_hitalama_board_block_table.prototype), "Table"));
	($mol_mem_key(($.$shm_hitalama_board_block_table.prototype), "Copy_icon"));
	($mol_mem_key(($.$shm_hitalama_board_block_table.prototype), "Cell_copy"));
	($mol_mem_key(($.$shm_hitalama_board_block_table.prototype), "Copy_area"));
	($mol_mem_key(($.$shm_hitalama_board_block_table.prototype), "Download_icon"));
	($mol_mem_key(($.$shm_hitalama_board_block_table.prototype), "Download"));
	($mol_mem_key(($.$shm_hitalama_board_block_table.prototype), "cell_checked"));
	($mol_mem_key(($.$shm_hitalama_board_block_table.prototype), "Checkbox"));
	($mol_mem_key(($.$shm_hitalama_board_block_table.prototype), "cell_delete"));
	($mol_mem_key(($.$shm_hitalama_board_block_table.prototype), "Action_delete"));
	($mol_mem_key(($.$shm_hitalama_board_block_table.prototype), "cell_edit"));
	($mol_mem_key(($.$shm_hitalama_board_block_table.prototype), "Action_edit"));
	($mol_mem(($.$shm_hitalama_board_block_table.prototype), "Settings_trigger_icon"));
	($mol_mem(($.$shm_hitalama_board_block_table.prototype), "Col_widths_head"));
	($mol_mem_key(($.$shm_hitalama_board_block_table.prototype), "Col_width_title"));
	($mol_mem_key(($.$shm_hitalama_board_block_table.prototype), "col_width"));
	($mol_mem_key(($.$shm_hitalama_board_block_table.prototype), "Col_width"));
	($mol_mem_key(($.$shm_hitalama_board_block_table.prototype), "Col_width_row"));
	($mol_mem(($.$shm_hitalama_board_block_table.prototype), "Settings_content"));
	($mol_mem(($.$shm_hitalama_board_block_table.prototype), "Settings_scroll"));
	($mol_mem(($.$shm_hitalama_board_block_table.prototype), "Settings_pop"));
	($mol_mem(($.$shm_hitalama_board_block_table.prototype), "delete_enabled"));
	($mol_mem(($.$shm_hitalama_board_block_table.prototype), "Deleting"));
	($mol_mem(($.$shm_hitalama_board_block_table.prototype), "chart_add"));
	($mol_mem(($.$shm_hitalama_board_block_table.prototype), "Chart_add"));
	($mol_mem_key(($.$shm_hitalama_board_block_table.prototype), "Cell_text"));
	($mol_mem_key(($.$shm_hitalama_board_block_table.prototype), "Cell_file"));
	($mol_mem_key(($.$shm_hitalama_board_block_table.prototype), "Cell_index_number"));
	($mol_mem_key(($.$shm_hitalama_board_block_table.prototype), "Cell_checkbox"));
	($mol_mem_key(($.$shm_hitalama_board_block_table.prototype), "Cell_delete"));
	($mol_mem_key(($.$shm_hitalama_board_block_table.prototype), "Cell_edit"));
	($mol_mem(($.$shm_hitalama_board_block_table.prototype), "All_check"));
	($mol_mem(($.$shm_hitalama_board_block_table.prototype), "Contextmenu_body"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_board_block_table extends $.$shm_hitalama_board_block_table {
            rows() {
                const rows = this.block().table_rows() ?? [];
                const head = this.head();
                return rows.map((r, i) => [false, i + 1, ...r]);
            }
            head() {
                return ['', '', ...this.block().table_head() ?? []];
            }
            col_types() {
                return ['check', 'index', ...this.block().table_col_types() ?? []];
            }
            deleting_tool_visible() {
                return this.col_types().includes('action_delete') ? super.deleting_tool_visible() : [];
            }
            cell_delete_visible(id) {
                return this.delete_enabled() ? super.cell_delete_visible(id) : [];
            }
            Cell(id) {
                if (id.col == 0)
                    return this.Cell_checkbox(id);
                if (id.col == 1)
                    return this.Cell_index_number(id);
                const col_type = this.col_types()?.[id.col];
                if (col_type == 'file')
                    return this.Cell_file(id);
                if (col_type == 'action_delete')
                    return this.Cell_delete(id);
                if (col_type == 'action_edit')
                    return this.Cell_edit(id);
                return this.Cell_text(id);
            }
            col_ids() {
                return this.head().map((_, i) => i);
            }
            col_head_content(n) {
                if (n == 0)
                    return [this.All_check()];
                return [this.head()?.[n] || ''];
            }
            col_settings_title(n) {
                return this.head()?.[n] || this.col_types()?.[n] || '';
            }
            cell_index_number(id) {
                return (Number(id.row[1]) + 1).toString();
            }
            cell_content_text_str(id) {
                return this.cell_content_text(id).toString();
            }
            cell_file_name(id) {
                const ref_str = this.cell_content_text_str(id);
                const file = $hyoo_crus_glob.Node($hyoo_crus_ref(ref_str), $shm_hitalama_file);
                return file.title();
            }
            cell_file_visible(id) {
                const ref_str = this.cell_content_text_str(id);
                return ref_str ? super.cell_file_visible(id) : [];
            }
            file_uri_async(ref_str) {
                const file = $hyoo_crus_glob.Node($hyoo_crus_ref(ref_str), $shm_hitalama_file);
                const blob = file.File()?.remote()?.blob();
                return this.$.$mol_blob_uri(blob);
            }
            file_uri(ref_str) {
                return this.$.$mol_wire_sync(this).file_uri_async(ref_str);
            }
            cell_file_uri(id) {
                const ref_str = this.cell_content_text_str(id);
                const uri = this.file_uri(ref_str);
                return uri;
            }
            cell_checked(id, next) {
                const checks = this.block().table().Rows_checked(null)?.val();
                const row_i = id.row[1];
                if (next === undefined)
                    return checks?.[row_i] ?? false;
                this.block().table().Rows_checked(null)?.val({
                    ...checks,
                    [row_i]: next,
                });
                return next;
            }
            cell_delete(id) {
                const row_i = id.row[1];
                this.board().search_statistics_cut(row_i);
                const rows_checked = this.block().table().Rows_checked()?.val() ?? {};
                const rows_checked_next = {};
                for (const key in rows_checked) {
                    let n = Number(key);
                    const bool = rows_checked[n];
                    if (n > row_i)
                        n--;
                    rows_checked_next[n] = bool;
                }
                this.block().table().Rows_checked()?.val(rows_checked_next);
            }
            cell_edit(id) {
                const row_i = id.row[1];
                const statistic = this.board().Search_statistics()?.remote_list().at(row_i);
                const pos = [
                    this.block().Body_x()?.val() + this.block().Left_edge_x()?.val() + this.block().Right_edge_x()?.val(),
                    this.block().Body_y()?.val() + this.block().Top_edge_y()?.val(),
                ];
                const block = this.board().block_add('form_edit', pos, 450, 780);
                block?.Form_edit(null)?.remote(statistic);
                this.Board_page().contextmenu_showed(false);
            }
            cell_checkboxes() {
                const checkboxes = this.table_row_ids().map(row => this.Checkbox({ col: '0', row }));
                return checkboxes;
            }
            col_width_px(id) {
                const width = Number(this.col_width(id.col));
                return isNaN(width) ? 'auto' : width + 'px';
            }
            col_width(col, next) {
                const widths = this.block().table()?.Col_widths()?.val();
                if (next === undefined)
                    return widths?.[col] ?? NaN;
                const widths_next = [...widths ?? []];
                widths_next[col] = next;
                this.block().table()?.Col_widths(null)?.val(widths_next);
                return next ?? NaN;
            }
            col_width_rows() {
                return this.head().slice(2).map((_, i) => this.Col_width_row(i + 2));
            }
            chart_add() {
                const chart_pos = this.Board_page().contextmenu_real_pos();
                const chart_block = this.board().block_add('chart', chart_pos, 600, 400);
                chart_block?.Table(null)?.remote(this.block().table());
                const chart = chart_block?.Chart(null);
                chart?.Block(null)?.remote(chart_block);
                const settings = this.board().block_add('chart_settings', [chart_pos[0] + 600, chart_pos[1]], 180, 290);
                settings?.Use_chart_from(null)?.remote(chart_block);
                this.Board_page().contextmenu_showed(false);
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_table.prototype, "rows", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_table.prototype, "head", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_table.prototype, "col_types", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_board_block_table.prototype, "cell_index_number", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_board_block_table.prototype, "cell_content_text_str", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_board_block_table.prototype, "cell_file_name", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_board_block_table.prototype, "cell_file_visible", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_board_block_table.prototype, "file_uri_async", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_board_block_table.prototype, "file_uri", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_board_block_table.prototype, "cell_file_uri", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_board_block_table.prototype, "cell_checked", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_board_block_table.prototype, "cell_delete", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_board_block_table.prototype, "cell_edit", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_board_block_table.prototype, "col_width_px", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_board_block_table.prototype, "col_width", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_table.prototype, "col_width_rows", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_board_block_table.prototype, "chart_add", null);
        $$.$shm_hitalama_board_block_table = $shm_hitalama_board_block_table;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_board_block_table, {
            background: {
                color: $mol_theme.card,
            },
            Drag_view: {
                position: 'absolute',
                width: '100%',
                height: '100%',
            },
            Cell_copy: {
                display: 'none',
            },
            Copy_area: {
                position: 'absolute',
                top: 0,
                right: 0,
                ":hover": {
                    ['Cell_copy']: {
                        display: 'block',
                    },
                },
            },
            Table: {
                padding: $mol_gap.block,
                overflowX: 'inherit',
                height: 'fit-content',
            },
            Cell_text: {
                whiteSpace: 'normal',
                position: 'relative',
            },
            Cell_checkbox: {
                padding: 0,
            },
            Cell_file: {
                padding: 0,
            },
            Cell_delete: {
                padding: 0,
            },
            Cell_edit: {
                padding: 0,
            },
            Download: {
                whiteSpace: 'normal',
            },
            All_check: {
                margin: {
                    top: '-0.5rem',
                    bottom: '-0.5rem',
                    left: '-0.75rem',
                    right: '-0.75rem',
                },
            },
            Col_width_title: {
                flex: {
                    grow: 1,
                },
                align: {
                    items: 'center',
                },
                padding: $mol_gap.text,
            },
            Col_widths_head: {
                justify: {
                    content: 'flex-end'
                },
                padding: $mol_gap.text,
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_board_block_code) = class $shm_hitalama_board_block_code extends ($.$shm_hitalama_board_block_float) {
		code(next){
			if(next !== undefined) return next;
			return "";
		}
		Textarea(){
			const obj = new this.$.$mol_textarea();
			(obj.sidebar_showed) = () => (true);
			(obj.value) = (next) => ((this.code(next)));
			(obj.spellcheck) = () => (false);
			return obj;
		}
		time_passed(){
			return "Старт: {start}   Затрачено: {passed}";
		}
		Time(){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ((this.time_passed()));
			return obj;
		}
		run(next){
			if(next !== undefined) return next;
			return null;
		}
		Run(){
			const obj = new this.$.$mol_button_major();
			(obj.title) = () => ("Выполнить");
			(obj.click) = (next) => ((this.run(next)));
			return obj;
		}
		Overlay(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Time()), (this.Run())]);
			return obj;
		}
		content(){
			return [(this.Drag_view()), (this.Textarea())];
		}
		sub(){
			return [...(super.sub()), (this.Overlay())];
		}
		time_start(next){
			if(next !== undefined) return next;
			return 0;
		}
		font_tools(){
			return [];
		}
	};
	($mol_mem(($.$shm_hitalama_board_block_code.prototype), "code"));
	($mol_mem(($.$shm_hitalama_board_block_code.prototype), "Textarea"));
	($mol_mem(($.$shm_hitalama_board_block_code.prototype), "Time"));
	($mol_mem(($.$shm_hitalama_board_block_code.prototype), "run"));
	($mol_mem(($.$shm_hitalama_board_block_code.prototype), "Run"));
	($mol_mem(($.$shm_hitalama_board_block_code.prototype), "Overlay"));
	($mol_mem(($.$shm_hitalama_board_block_code.prototype), "time_start"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_board_block_code extends $.$shm_hitalama_board_block_code {
            block_with_text() {
                const use_from = this.block().Use_text_from()?.remote();
                return use_from ?? this.block();
            }
            code(next) {
                return this.block_with_text().Text(next)?.text(next) ?? '';
            }
            moment_start(next) {
                return next ?? null;
            }
            moment_start_formated() {
                return this.moment_start()?.toString('hh:mm:ss') ?? '';
            }
            set_time_start() {
                this.time_start(performance.now());
                this.moment_start(new $mol_time_moment);
            }
            time_end;
            run() {
                this.set_time_start();
                const func = new Function('const board = this.board;\nconst page = this.page;\nconst view = this.view;\n' + this.code());
                func.call({ page: this.Board_page(), board: this.board(), vide: this });
                this.time_end = performance.now();
            }
            time_passed() {
                const start = this.time_start();
                if (start) {
                    let end = performance.now();
                    if (this.time_end && this.time_end > start) {
                        end = this.time_end;
                    }
                    else {
                        $mol_state_time.now(200);
                    }
                    const dt = end - start;
                    const min = Math.floor(dt / 60000);
                    const ms = dt - min * 60000;
                    return super.time_passed().replace('{start}', this.moment_start_formated())
                        .replace('{passed}', String(min).padStart(2, '0') + ':' + String((ms / 1000).toFixed(3)).padStart(6, '0'));
                }
                return '';
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_code.prototype, "block_with_text", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_code.prototype, "code", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_code.prototype, "moment_start", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_code.prototype, "moment_start_formated", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_board_block_code.prototype, "set_time_start", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_board_block_code.prototype, "run", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_code.prototype, "time_passed", null);
        $$.$shm_hitalama_board_block_code = $shm_hitalama_board_block_code;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_board_block_code, {
            background: {
                color: $mol_theme.card,
            },
            Drag_view: {
                position: 'absolute',
                width: '100%',
                height: '100%',
            },
            Textarea: {
                pointerEvents: 'none',
                Edit: {
                    pointerEvents: 'auto',
                },
                padding: {
                    left: $mol_gap.block,
                },
                margin: $mol_gap.block,
            },
            Overlay: {
                position: 'absolute',
                bottom: '2rem',
                right: '2rem',
            },
            Time: {
                padding: $mol_gap.text,
                opacity: 0.6,
                font: {
                    family: 'monospace',
                },
                whiteSpace: 'pre',
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_chart_line_pane) = class $shm_hitalama_chart_line_pane extends ($.$mol_plot_pane) {
		cursor_position(){
			return (this.Touch().pointer_center());
		}
		allow_draw(){
			return true;
		}
		allow_pan(){
			return true;
		}
		allow_zoom(){
			return true;
		}
		action_type(){
			return (this.Touch().action_type());
		}
		action_point(){
			return (this.Touch().action_point());
		}
		draw_start(next){
			if(next !== undefined) return next;
			return null;
		}
		draw(next){
			if(next !== undefined) return next;
			return null;
		}
		draw_end(next){
			if(next !== undefined) return next;
			return null;
		}
		Touch(){
			const obj = new this.$.$mol_touch();
			(obj.allow_draw) = () => ((this.allow_draw()));
			(obj.allow_pan) = () => ((this.allow_pan()));
			(obj.allow_zoom) = () => ((this.allow_zoom()));
			(obj.draw_start) = (next) => ((this.draw_start(next)));
			(obj.draw) = (next) => ((this.draw(next)));
			(obj.draw_end) = (next) => ((this.draw_end(next)));
			return obj;
		}
	};
	($mol_mem(($.$shm_hitalama_chart_line_pane.prototype), "draw_start"));
	($mol_mem(($.$shm_hitalama_chart_line_pane.prototype), "draw"));
	($mol_mem(($.$shm_hitalama_chart_line_pane.prototype), "draw_end"));
	($mol_mem(($.$shm_hitalama_chart_line_pane.prototype), "Touch"));


;
"use strict";

;
	($.$shm_hitalama_chart_line) = class $shm_hitalama_chart_line extends ($.$mol_chart) {
		graphs_colored(){
			return (this.Plot().graphs_colored());
		}
		item_name(id){
			return "";
		}
		series_y(id){
			return [];
		}
		Line(id){
			const obj = new this.$.$mol_plot_line();
			return obj;
		}
		Dot(id){
			const obj = new this.$.$mol_plot_dot();
			return obj;
		}
		Item(id){
			const obj = new this.$.$mol_plot_group();
			(obj.title) = () => ((this.item_name(id)));
			(obj.series_y) = () => ((this.series_y(id)));
			(obj.graphs) = () => ([(this.Line(id)), (this.Dot(id))]);
			return obj;
		}
		items(){
			return [(this.Item("0"))];
		}
		Vert_ruler(){
			const obj = new this.$.$mol_plot_ruler_vert();
			return obj;
		}
		Marker_hor(){
			const obj = new this.$.$mol_plot_mark_hor();
			(obj.labels) = () => ((this.labels()));
			return obj;
		}
		dots(){
			return [];
		}
		Marker_cross(){
			const obj = new this.$.$mol_plot_mark_cross();
			(obj.labels) = () => ((this.labels()));
			(obj.graphs) = () => ([...(this.dots())]);
			return obj;
		}
		names(){
			return [];
		}
		labels(){
			return [];
		}
		Plot(){
			const obj = new this.$.$shm_hitalama_chart_line_pane();
			(obj.gap_left) = () => ((this.gap_left()));
			(obj.gap_right) = () => ((this.gap_right()));
			(obj.gap_bottom) = () => ((this.gap_bottom()));
			(obj.gap_top) = () => ((this.gap_top()));
			(obj.graphs) = () => ((this.graphs()));
			(obj.hue_base) = () => ((this.hue_base()));
			(obj.hue_shift) = () => ((this.hue_shift()));
			return obj;
		}
		graphs(){
			return [
				...(this.items()), 
				(this.Vert_ruler()), 
				(this.Marker_hor()), 
				(this.Marker_cross())
			];
		}
	};
	($mol_mem_key(($.$shm_hitalama_chart_line.prototype), "Line"));
	($mol_mem_key(($.$shm_hitalama_chart_line.prototype), "Dot"));
	($mol_mem_key(($.$shm_hitalama_chart_line.prototype), "Item"));
	($mol_mem(($.$shm_hitalama_chart_line.prototype), "Vert_ruler"));
	($mol_mem(($.$shm_hitalama_chart_line.prototype), "Marker_hor"));
	($mol_mem(($.$shm_hitalama_chart_line.prototype), "Marker_cross"));
	($mol_mem(($.$shm_hitalama_chart_line.prototype), "Plot"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_chart_line extends $.$shm_hitalama_chart_line {
            items() {
                return this.names().map(n => this.Item(n));
            }
            item_name(id) {
                return id;
            }
            dots() {
                return this.names().map(n => this.Dot(n));
            }
        }
        $$.$shm_hitalama_chart_line = $shm_hitalama_chart_line;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_board_block_chart) = class $shm_hitalama_board_block_chart extends ($.$shm_hitalama_board_block_float) {
		names(){
			return [];
		}
		labels(){
			return [];
		}
		series_y(id){
			return [];
		}
		Chart(){
			const obj = new this.$.$shm_hitalama_chart_line();
			(obj.names) = () => ((this.names()));
			(obj.labels) = () => ((this.labels()));
			(obj.series_y) = (id) => ((this.series_y(id)));
			return obj;
		}
		settings_add(next){
			if(next !== undefined) return next;
			return null;
		}
		Settings_add(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ("Добавить виджет настроек");
			(obj.click) = (next) => ((this.settings_add(next)));
			return obj;
		}
		Filters_add_anchor(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ("Добавить фильтр");
			return obj;
		}
		filter_name(id){
			return "";
		}
		filter_add(id, next){
			if(next !== undefined) return next;
			return null;
		}
		Filter_add(id){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ((this.filter_name(id)));
			(obj.click) = (next) => ((this.filter_add(id, next)));
			return obj;
		}
		filter_buttons(){
			return [(this.Filter_add("0"))];
		}
		Filters(){
			const obj = new this.$.$mol_list();
			(obj.sub) = () => ((this.filter_buttons()));
			return obj;
		}
		Filters_add(){
			const obj = new this.$.$mol_pop_over();
			(obj.align) = () => ("right_bottom");
			(obj.Anchor) = () => ((this.Filters_add_anchor()));
			(obj.bubble_content) = () => ([(this.Filters())]);
			return obj;
		}
		drag_body(){
			return [(this.Chart())];
		}
		width_min(){
			return 200;
		}
		height_min(){
			return 200;
		}
		tools(){
			return [
				(this.Top()), 
				(this.Bottom()), 
				(this.Delete()), 
				(this.Copy_code())
			];
		}
		Contextmenu_body(){
			const obj = new this.$.$mol_list();
			(obj.sub) = () => ([(this.Settings_add()), (this.Filters_add())]);
			return obj;
		}
	};
	($mol_mem(($.$shm_hitalama_board_block_chart.prototype), "Chart"));
	($mol_mem(($.$shm_hitalama_board_block_chart.prototype), "settings_add"));
	($mol_mem(($.$shm_hitalama_board_block_chart.prototype), "Settings_add"));
	($mol_mem(($.$shm_hitalama_board_block_chart.prototype), "Filters_add_anchor"));
	($mol_mem_key(($.$shm_hitalama_board_block_chart.prototype), "filter_add"));
	($mol_mem_key(($.$shm_hitalama_board_block_chart.prototype), "Filter_add"));
	($mol_mem(($.$shm_hitalama_board_block_chart.prototype), "Filters"));
	($mol_mem(($.$shm_hitalama_board_block_chart.prototype), "Filters_add"));
	($mol_mem(($.$shm_hitalama_board_block_chart.prototype), "Contextmenu_body"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_board_block_chart extends $.$shm_hitalama_board_block_chart {
            chart() {
                return this.block().Chart(null);
            }
            names() {
                return [...this.traversed().by_group.keys()];
            }
            series_y(group_name) {
                const labels = this.labels();
                const by_label = this.traversed().by_group.get(group_name);
                return labels.map(l => Number(by_label?.get(l)));
            }
            labels() {
                return [...this.traversed().labels];
            }
            traversed() {
                return this.chart().traversed();
            }
            settings_add() {
                const left = this.left() + this.width();
                const top = this.top();
                const settings = this.board().block_add('chart_settings', [left, top], 180, 290);
                settings?.Use_chart_from(null)?.remote(this.block());
                this.Board_page().contextmenu_showed(false);
            }
            filter_add(name) {
                const pos = this.Board_page().get_pointer_pos();
                const block = this.board().block_add('chart_filter', pos, 180, 290);
                block?.text(name);
                block?.Use_chart_from(null)?.remote(this.block());
                this.Board_page().contextmenu_showed(false);
            }
            filter_buttons() {
                return this.chart().table_head().map(name => this.Filter_add(name));
            }
            filter_name(id) {
                return id;
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_chart.prototype, "chart", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_board_block_chart.prototype, "series_y", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_chart.prototype, "traversed", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_board_block_chart.prototype, "settings_add", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_board_block_chart.prototype, "filter_add", null);
        $$.$shm_hitalama_board_block_chart = $shm_hitalama_board_block_chart;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_board_block_chart, {
            background: {
                color: $mol_theme.card,
            },
            Drag_view: {
                position: 'absolute',
                width: '100%',
                height: '100%',
            },
            Filters_add: {
                width: 'fit-content',
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_select_list) = class $mol_select_list extends ($.$mol_view) {
		Badges(){
			return [];
		}
		badge_title(id){
			return "badge";
		}
		remove(id, next){
			if(next !== undefined) return next;
			return null;
		}
		badge_hint(){
			return (this.$.$mol_locale.text("$mol_select_list_badge_hint"));
		}
		enabled(){
			return true;
		}
		drop_enabled(){
			return (this.enabled());
		}
		event_select(id, next){
			if(next !== undefined) return next;
			return null;
		}
		align_hor(){
			return "right";
		}
		options(){
			return [];
		}
		options_pickable(){
			return (this.options());
		}
		pick(next){
			if(next !== undefined) return next;
			return "";
		}
		option_title(id){
			return "";
		}
		pick_enabled(){
			return (this.enabled());
		}
		pick_hint(){
			return (this.$.$mol_locale.text("$mol_select_list_pick_hint"));
		}
		filter_pattern(next){
			return (this.Pick().filter_pattern(next));
		}
		Pick_icon(){
			const obj = new this.$.$mol_icon_plus();
			return obj;
		}
		Pick(){
			const obj = new this.$.$mol_select();
			(obj.event_select) = (id, next) => ((this.event_select(id, next)));
			(obj.align_hor) = () => ((this.align_hor()));
			(obj.options) = () => ((this.options_pickable()));
			(obj.value) = (next) => ((this.pick(next)));
			(obj.option_label) = (id) => ((this.option_title(id)));
			(obj.trigger_enabled) = () => ((this.pick_enabled()));
			(obj.hint) = () => ((this.pick_hint()));
			(obj.Trigger_icon) = () => ((this.Pick_icon()));
			return obj;
		}
		value(next){
			if(next !== undefined) return next;
			return [];
		}
		dictionary(){
			return {};
		}
		badges_list(){
			return (this.Badges());
		}
		Badge(id){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ((this.badge_title(id)));
			(obj.click) = (next) => ((this.remove(id, next)));
			(obj.hint) = () => ((this.badge_hint()));
			(obj.enabled) = () => ((this.drop_enabled()));
			return obj;
		}
		sub(){
			return [(this.Pick()), ...(this.badges_list())];
		}
	};
	($mol_mem_key(($.$mol_select_list.prototype), "remove"));
	($mol_mem_key(($.$mol_select_list.prototype), "event_select"));
	($mol_mem(($.$mol_select_list.prototype), "pick"));
	($mol_mem(($.$mol_select_list.prototype), "Pick_icon"));
	($mol_mem(($.$mol_select_list.prototype), "Pick"));
	($mol_mem(($.$mol_select_list.prototype), "value"));
	($mol_mem_key(($.$mol_select_list.prototype), "Badge"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_select_list extends $.$mol_select_list {
            value(val) {
                return super.value(val);
            }
            pick(key) {
                if (!key)
                    return '';
                this.value([...this.value(), key]);
                return '';
            }
            event_select(id, event) {
                event?.preventDefault();
                this.pick(id);
            }
            options() {
                return Object.keys(this.dictionary());
            }
            options_pickable() {
                if (!this.enabled())
                    return [];
                const exists = new Set(this.value());
                return this.options().filter(key => !exists.has(key));
            }
            option_title(key) {
                const value = this.dictionary()[key];
                return value == null ? key : value;
            }
            badge_title(key) {
                return this.option_title(key);
            }
            pick_enabled() {
                return this.options_pickable().length > 0;
            }
            Badges() {
                return this.value()
                    .map(id => this.Badge(id))
                    .reverse();
            }
            title() {
                return this.value().map(key => this.option_title(key)).join(' + ');
            }
            remove(key) {
                this.value(this.value().filter(id => id !== key));
            }
        }
        __decorate([
            $mol_mem
        ], $mol_select_list.prototype, "pick", null);
        __decorate([
            $mol_mem
        ], $mol_select_list.prototype, "options", null);
        __decorate([
            $mol_mem
        ], $mol_select_list.prototype, "options_pickable", null);
        __decorate([
            $mol_mem
        ], $mol_select_list.prototype, "pick_enabled", null);
        __decorate([
            $mol_mem
        ], $mol_select_list.prototype, "title", null);
        __decorate([
            $mol_action
        ], $mol_select_list.prototype, "remove", null);
        $$.$mol_select_list = $mol_select_list;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        const { rem } = $mol_style_unit;
        $mol_style_define($mol_select_list, {
            flex: {
                wrap: 'wrap',
                shrink: 1,
                grow: 1,
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_board_block_chart_settings) = class $shm_hitalama_board_block_chart_settings extends ($.$shm_hitalama_board_block_float) {
		head(){
			return [];
		}
		axis(next){
			if(next !== undefined) return next;
			return "";
		}
		Axis(){
			const obj = new this.$.$mol_select();
			(obj.Filter) = () => (null);
			(obj.options) = () => ((this.head()));
			(obj.value) = (next) => ((this.axis(next)));
			return obj;
		}
		axis_details(next){
			if(next !== undefined) return next;
			return "day";
		}
		Axis_details(){
			const obj = new this.$.$mol_select();
			(obj.Filter) = () => (null);
			(obj.dictionary) = () => ({
				"day": "День", 
				"month": "Месяц", 
				"year": "Год"
			});
			(obj.value) = (next) => ((this.axis_details(next)));
			return obj;
		}
		axis_details_visible(){
			return [(this.Axis_details())];
		}
		Axis_content(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Axis()), ...(this.axis_details_visible())]);
			return obj;
		}
		Axis_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("Ось");
			(obj.Content) = () => ((this.Axis_content()));
			return obj;
		}
		values_title(next){
			if(next !== undefined) return next;
			return "";
		}
		Values(){
			const obj = new this.$.$mol_select();
			(obj.Filter) = () => (null);
			(obj.options) = () => ((this.head()));
			(obj.value) = (next) => ((this.values_title(next)));
			return obj;
		}
		Values_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("Значения");
			(obj.Content) = () => ((this.Values()));
			return obj;
		}
		groups(next){
			if(next !== undefined) return next;
			return [];
		}
		Groups(){
			const obj = new this.$.$mol_select_list();
			(obj.value) = (next) => ((this.groups(next)));
			(obj.options) = () => ((this.head()));
			return obj;
		}
		Groups_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("Группировка");
			(obj.Content) = () => ((this.Groups()));
			return obj;
		}
		Form(){
			const obj = new this.$.$mol_list();
			(obj.sub) = () => ([
				(this.Axis_field()), 
				(this.Values_field()), 
				(this.Groups_field())
			]);
			return obj;
		}
		tools(){
			return [
				(this.Top()), 
				(this.Bottom()), 
				(this.Delete()), 
				(this.Copy_code())
			];
		}
		sub(){
			return [
				...(this.content()), 
				...(this.edges()), 
				...(this.toolbar())
			];
		}
		content(){
			return [(this.Drag_view()), (this.Form())];
		}
	};
	($mol_mem(($.$shm_hitalama_board_block_chart_settings.prototype), "axis"));
	($mol_mem(($.$shm_hitalama_board_block_chart_settings.prototype), "Axis"));
	($mol_mem(($.$shm_hitalama_board_block_chart_settings.prototype), "axis_details"));
	($mol_mem(($.$shm_hitalama_board_block_chart_settings.prototype), "Axis_details"));
	($mol_mem(($.$shm_hitalama_board_block_chart_settings.prototype), "Axis_content"));
	($mol_mem(($.$shm_hitalama_board_block_chart_settings.prototype), "Axis_field"));
	($mol_mem(($.$shm_hitalama_board_block_chart_settings.prototype), "values_title"));
	($mol_mem(($.$shm_hitalama_board_block_chart_settings.prototype), "Values"));
	($mol_mem(($.$shm_hitalama_board_block_chart_settings.prototype), "Values_field"));
	($mol_mem(($.$shm_hitalama_board_block_chart_settings.prototype), "groups"));
	($mol_mem(($.$shm_hitalama_board_block_chart_settings.prototype), "Groups"));
	($mol_mem(($.$shm_hitalama_board_block_chart_settings.prototype), "Groups_field"));
	($mol_mem(($.$shm_hitalama_board_block_chart_settings.prototype), "Form"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_board_block_chart_settings extends $.$shm_hitalama_board_block_chart_settings {
            chart() {
                const block = this.block().Use_chart_from()?.remote();
                return block.Chart();
            }
            traversed() {
                return this.chart().traversed();
            }
            head() {
                return this.chart().table_head();
            }
            axis(next) {
                return this.chart().axis(next);
            }
            values(next) {
                return this.chart().values(next);
            }
            values_title(next) {
                return this.chart().values_title(next);
            }
            groups(next) {
                return this.chart().groups(next);
            }
            axis_details_visible() {
                return this.axis() == 'Дата' ? super.axis_details_visible() : [];
            }
            axis_details(next) {
                return this.chart().date_axis_details(this.axis(), next);
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_chart_settings.prototype, "chart", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_chart_settings.prototype, "traversed", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_chart_settings.prototype, "head", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_chart_settings.prototype, "axis_details", null);
        $$.$shm_hitalama_board_block_chart_settings = $shm_hitalama_board_block_chart_settings;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_board_block_chart_settings, {
            background: {
                color: $mol_theme.card,
            },
            Drag_view: {
                position: 'absolute',
                height: '100%',
                width: '100%',
            },
            Form: {
                padding: $mol_gap.block,
                gap: $mol_gap.space,
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_check_list) = class $shm_hitalama_check_list extends ($.$mol_list) {
		All(){
			const obj = new this.$.$mol_check_group();
			(obj.title) = () => ("Все");
			(obj.checks) = () => ((this.checks()));
			return obj;
		}
		checks(){
			return [];
		}
		Checks(){
			const obj = new this.$.$mol_list();
			(obj.rows) = () => ((this.checks()));
			return obj;
		}
		check_title(id){
			return "";
		}
		checked(id, next){
			if(next !== undefined) return next;
			return false;
		}
		options(){
			return [];
		}
		value(next){
			if(next !== undefined) return next;
			return [];
		}
		rows(){
			return [(this.All()), (this.Checks())];
		}
		Check(id){
			const obj = new this.$.$mol_check_box();
			(obj.title) = () => ((this.check_title(id)));
			(obj.checked) = (next) => ((this.checked(id, next)));
			return obj;
		}
	};
	($mol_mem(($.$shm_hitalama_check_list.prototype), "All"));
	($mol_mem(($.$shm_hitalama_check_list.prototype), "Checks"));
	($mol_mem_key(($.$shm_hitalama_check_list.prototype), "checked"));
	($mol_mem(($.$shm_hitalama_check_list.prototype), "value"));
	($mol_mem_key(($.$shm_hitalama_check_list.prototype), "Check"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_check_list extends $.$shm_hitalama_check_list {
            checks() {
                return this.options().map(t => this.Check(t));
            }
            check_title(id) {
                return id;
            }
            checked(id, next) {
                const val = this.value() ?? [];
                if (next === undefined)
                    return val?.includes(id);
                const val_next = next
                    ? val?.includes(id) ? val : [...val, id]
                    : val.filter(title => title != id);
                this.value(val_next);
                return next;
            }
        }
        $$.$shm_hitalama_check_list = $shm_hitalama_check_list;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_check_list, {
            All: {
                box: {
                    shadow: [
                        { inset: false, x: 0, y: '1px', blur: 0, spread: 0, color: $mol_theme.line, },
                    ],
                },
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_board_block_chart_filter) = class $shm_hitalama_board_block_chart_filter extends ($.$shm_hitalama_board_block_float) {
		field_name(){
			return "";
		}
		filter_options(){
			return [];
		}
		filter_options_checked(next){
			if(next !== undefined) return next;
			return [];
		}
		Filter_options(){
			const obj = new this.$.$shm_hitalama_check_list();
			(obj.options) = () => ((this.filter_options()));
			(obj.value) = (next) => ((this.filter_options_checked(next)));
			return obj;
		}
		Field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ((this.field_name()));
			(obj.Content) = () => ((this.Filter_options()));
			return obj;
		}
		Form(){
			const obj = new this.$.$mol_list();
			(obj.sub) = () => ([(this.Field())]);
			return obj;
		}
		tools(){
			return [
				(this.Top()), 
				(this.Bottom()), 
				(this.Delete()), 
				(this.Copy_code())
			];
		}
		content(){
			return [(this.Drag_view()), (this.Form())];
		}
	};
	($mol_mem(($.$shm_hitalama_board_block_chart_filter.prototype), "filter_options_checked"));
	($mol_mem(($.$shm_hitalama_board_block_chart_filter.prototype), "Filter_options"));
	($mol_mem(($.$shm_hitalama_board_block_chart_filter.prototype), "Field"));
	($mol_mem(($.$shm_hitalama_board_block_chart_filter.prototype), "Form"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_board_block_chart_filter extends $.$shm_hitalama_board_block_chart_filter {
            chart() {
                const block = this.block().Use_chart_from()?.remote();
                return block.Chart();
            }
            traversed() {
                return this.chart().traversed();
            }
            field_name() {
                return this.block().text();
            }
            filter_options() {
                return this.chart().filter_options(this.field_name());
            }
            filter_options_checked(next) {
                return this.chart().filter_options_checked(this.field_name(), next);
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_chart_filter.prototype, "chart", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_chart_filter.prototype, "traversed", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_chart_filter.prototype, "filter_options", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_chart_filter.prototype, "filter_options_checked", null);
        $$.$shm_hitalama_board_block_chart_filter = $shm_hitalama_board_block_chart_filter;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_board_block_chart_filter, {
            background: {
                color: $mol_theme.card,
            },
            Drag_view: {
                position: 'absolute',
                height: '100%',
                width: '100%',
            },
            Form: {
                padding: $mol_gap.block,
                gap: $mol_gap.space,
            },
            Field: {
                gap: $mol_gap.space,
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_icon_code_braces) = class $mol_icon_code_braces extends ($.$mol_icon) {
		path(){
			return "M8,3A2,2 0 0,0 6,5V9A2,2 0 0,1 4,11H3V13H4A2,2 0 0,1 6,15V19A2,2 0 0,0 8,21H10V19H8V14A2,2 0 0,0 6,12A2,2 0 0,0 8,10V5H10V3M16,3A2,2 0 0,1 18,5V9A2,2 0 0,0 20,11H21V13H20A2,2 0 0,0 18,15V19A2,2 0 0,1 16,21H14V19H16V14A2,2 0 0,1 18,12A2,2 0 0,1 16,10V5H14V3H16Z";
		}
	};


;
"use strict";

;
	($.$shm_hitalama_board_block_customdom) = class $shm_hitalama_board_block_customdom extends ($.$shm_hitalama_board_block_float) {
		Dom(){
			return null;
		}
		Add_code_icon(){
			const obj = new this.$.$mol_icon_code_braces();
			return obj;
		}
		add_code_block(next){
			if(next !== undefined) return next;
			return null;
		}
		Add_code(){
			const obj = new this.$.$mol_button_minor();
			(obj.hint) = () => ("Код");
			(obj.sub) = () => ([(this.Add_code_icon())]);
			(obj.click) = (next) => ((this.add_code_block(next)));
			return obj;
		}
		content(){
			return [(this.Drag_view()), (this.Dom())];
		}
		tools(){
			return [
				(this.Top()), 
				(this.Bottom()), 
				(this.Add_code()), 
				(this.Delete())
			];
		}
	};
	($mol_mem(($.$shm_hitalama_board_block_customdom.prototype), "Add_code_icon"));
	($mol_mem(($.$shm_hitalama_board_block_customdom.prototype), "add_code_block"));
	($mol_mem(($.$shm_hitalama_board_block_customdom.prototype), "Add_code"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_board_block_customdom extends $.$shm_hitalama_board_block_customdom {
            code(next) {
                return this.block().Text(next)?.text(next) ?? '';
            }
            data;
            Dom() {
                try {
                    const func = new Function('const board = this.board;\nconst page = this.page;\nconst view = this.view;\n' + this.code());
                    const res = func.call({ page: this.Board_page(), board: this.board(), view: this });
                    return res;
                }
                catch (error) {
                    if (!$mol_promise_like(error)) {
                        this.data = undefined;
                    }
                    throw error;
                }
            }
            add_code_block() {
                const left = this.left() + this.width();
                const top = this.top();
                const code = this.board().block_add('code', [left, top], 1220, 680);
                code?.Use_text_from(null)?.remote(this.block());
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_customdom.prototype, "code", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_customdom.prototype, "Dom", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_board_block_customdom.prototype, "add_code_block", null);
        $$.$shm_hitalama_board_block_customdom = $shm_hitalama_board_block_customdom;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_board_block_customdom, {
            Drag_view: {
                position: 'absolute',
                width: '100%',
                height: '100%',
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_board_block_file) = class $shm_hitalama_board_block_file extends ($.$shm_hitalama_board_block_float) {
		title_dom_name(){
			return "h1";
		}
		name(){
			return "";
		}
		Title(){
			const obj = new this.$.$mol_paragraph();
			(obj.dom_name) = () => ((this.title_dom_name()));
			(obj.title) = () => ((this.name()));
			return obj;
		}
		contextmenu_body(){
			return [];
		}
		unpacking(next){
			if(next !== undefined) return next;
			return null;
		}
		Unpacking(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ("Распаковка");
			(obj.click) = (next) => ((this.unpacking(next)));
			return obj;
		}
		sub(){
			return [
				(this.Drag_view()), 
				...(this.edges()), 
				...(this.toolbar())
			];
		}
		font_tools(){
			return [];
		}
		drag_body(){
			return [(this.Title())];
		}
		Contextmenu_body(){
			const obj = new this.$.$mol_list();
			(obj.sub) = () => ((this.contextmenu_body()));
			return obj;
		}
		contextmenu_for(){
			return {"csv": [(this.Unpacking())]};
		}
	};
	($mol_mem(($.$shm_hitalama_board_block_file.prototype), "Title"));
	($mol_mem(($.$shm_hitalama_board_block_file.prototype), "unpacking"));
	($mol_mem(($.$shm_hitalama_board_block_file.prototype), "Unpacking"));
	($mol_mem(($.$shm_hitalama_board_block_file.prototype), "Contextmenu_body"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_board_block_file extends $.$shm_hitalama_board_block_file {
            name() {
                return this.block().File()?.remote()?.title() ?? '';
            }
            ext() {
                return this.name().split('.').at(-1) ?? '';
            }
            contextmenu_body() {
                return this.contextmenu_for()[this.ext()] ?? [];
            }
            unpacking() {
                const pos = this.Board_page().get_pointer_pos();
                const code = this.board().block_add('code', pos, 800, 400);
                const code_str = this.$.$mol_fetch.text($shm_hitalama_app_ghpages_fix_link('/shm/hitalama/board/snippets/_table_from_csv.js'))
                    .replace('BLOCK_ID', `'${this.block().ref().description?.toString()}'`);
                code?.Text(null)?.value(code_str);
                this.Board_page().contextmenu_showed(false);
            }
        }
        $$.$shm_hitalama_board_block_file = $shm_hitalama_board_block_file;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_board_block_file, {
            background: {
                color: $mol_theme.card,
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$rise_range) = class $rise_range extends ($.$mol_view) {
		label_min(){
			return "";
		}
		Min(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.label_min())]);
			return obj;
		}
		label_medium(){
			return "";
		}
		Medium(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.label_medium())]);
			return obj;
		}
		label_max(){
			return "";
		}
		Max(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.label_max())]);
			return obj;
		}
		Labels(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([
				(this.Min()), 
				(this.Medium()), 
				(this.Max())
			]);
			return obj;
		}
		disabled(){
			return false;
		}
		min(next){
			if(next !== undefined) return next;
			return 0;
		}
		max(next){
			if(next !== undefined) return next;
			return 10;
		}
		step(next){
			if(next !== undefined) return next;
			return 1;
		}
		value(next){
			if(next !== undefined) return next;
			return 0;
		}
		event_input(next){
			if(next !== undefined) return next;
			return null;
		}
		Input(){
			const obj = new this.$.$rise_range_input();
			(obj.disabled) = () => ((this.disabled()));
			(obj.min) = () => ((this.min()));
			(obj.max) = () => ((this.max()));
			(obj.step) = () => ((this.step()));
			(obj.value) = (next) => ((this.value(next)));
			(obj.event_input) = (next) => ((this.event_input(next)));
			return obj;
		}
		Value(){
			const obj = new this.$.$rise_range_value();
			(obj.sub) = () => ([(this.value())]);
			(obj.disabled) = () => ((this.disabled()));
			return obj;
		}
		Current(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Value())]);
			return obj;
		}
		percent(){
			return "0%";
		}
		minimal_height(){
			return 48;
		}
		unit(){
			return "";
		}
		medium(next){
			if(next !== undefined) return next;
			return 5;
		}
		enabled(){
			return true;
		}
		sub(){
			return [
				(this.Labels()), 
				(this.Input()), 
				(this.Current())
			];
		}
		attr(){
			return {...(super.attr()), "disabled": (this.disabled())};
		}
		style(){
			return {...(super.style()), "--rise_range_percent": (this.percent())};
		}
	};
	($mol_mem(($.$rise_range.prototype), "Min"));
	($mol_mem(($.$rise_range.prototype), "Medium"));
	($mol_mem(($.$rise_range.prototype), "Max"));
	($mol_mem(($.$rise_range.prototype), "Labels"));
	($mol_mem(($.$rise_range.prototype), "min"));
	($mol_mem(($.$rise_range.prototype), "max"));
	($mol_mem(($.$rise_range.prototype), "step"));
	($mol_mem(($.$rise_range.prototype), "value"));
	($mol_mem(($.$rise_range.prototype), "event_input"));
	($mol_mem(($.$rise_range.prototype), "Input"));
	($mol_mem(($.$rise_range.prototype), "Value"));
	($mol_mem(($.$rise_range.prototype), "Current"));
	($mol_mem(($.$rise_range.prototype), "medium"));
	($.$rise_range_input) = class $rise_range_input extends ($.$mol_view) {
		disabled(){
			return false;
		}
		min(next){
			if(next !== undefined) return next;
			return 0;
		}
		max(next){
			if(next !== undefined) return next;
			return 10;
		}
		step(next){
			if(next !== undefined) return next;
			return 1;
		}
		value(next){
			if(next !== undefined) return next;
			return 0;
		}
		event_input(next){
			if(next !== undefined) return next;
			return null;
		}
		dom_name(){
			return "input";
		}
		attr(){
			return {
				...(super.attr()), 
				"type": "range", 
				"disabled": (this.disabled())
			};
		}
		field(){
			return {
				...(super.field()), 
				"min": (this.min()), 
				"max": (this.max()), 
				"step": (this.step()), 
				"value": (this.value())
			};
		}
		event(){
			return {...(super.event()), "input": (next) => (this.event_input(next))};
		}
	};
	($mol_mem(($.$rise_range_input.prototype), "min"));
	($mol_mem(($.$rise_range_input.prototype), "max"));
	($mol_mem(($.$rise_range_input.prototype), "step"));
	($mol_mem(($.$rise_range_input.prototype), "value"));
	($mol_mem(($.$rise_range_input.prototype), "event_input"));
	($.$rise_range_value) = class $rise_range_value extends ($.$mol_view) {
		disabled(){
			return false;
		}
		attr(){
			return {...(super.attr()), "disabled": (this.disabled())};
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $rise_range extends $.$rise_range {
            event_input(event) {
                const el = event.target;
                this.value(Number(el.value));
            }
            medium() {
                return Math.round((this.min() + this.max()) / 2);
            }
            label_min() {
                return this.min() + ' ' + this.unit();
            }
            label_max() {
                return this.max() + ' ' + this.unit();
            }
            label_medium() {
                return this.medium() + ' ' + this.unit();
            }
            percent() {
                const val = this.value() - this.min();
                const range = this.max() - this.min();
                return (val / range) * 100 + '%';
            }
            disabled() {
                return !this.enabled();
            }
        }
        __decorate([
            $mol_action
        ], $rise_range.prototype, "event_input", null);
        $$.$rise_range = $rise_range;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        const Thumb_size = $mol_gap.block;
        const Track_height = $mol_gap.space;
        const Track_margin = $mol_gap.block;
        $mol_style_define($rise_range, {
            flex: {
                grow: 1,
                direction: 'column',
            },
            padding: {
                top: $mol_gap.space,
                bottom: $mol_gap.space,
            },
            Labels: {
                pointerEvents: 'none',
                left: 0,
                right: 0,
                justify: {
                    content: 'space-between',
                },
            },
            Current: {
                pointerEvents: 'none',
                position: 'relative',
                height: '1.5rem',
                margin: {
                    left: $mol_style_func.calc(`${Thumb_size} / 2`),
                    right: $mol_style_func.calc(`${Thumb_size} / 2`),
                },
            },
            '[disabled]': {
                'true': {
                    Value: {
                        color: $mol_theme.shade,
                    },
                },
            },
            Value: {
                position: 'absolute',
                left: $mol_style_func.vary('--rise_range_percent'),
                transform: 'translateX(-50%)',
                color: $mol_theme.current,
            },
        });
        const Track = {
            height: Track_height,
            border: {
                radius: $mol_gap.round,
            },
            background: {
                color: $mol_theme.line,
            },
        };
        const Thumb = {
            height: Thumb_size,
            width: Thumb_size,
            margin: {
                top: $mol_style_func.calc(`(${Track_height} - ${Thumb_size}) / 2`),
            },
            appearance: 'none',
            border: {
                radius: '50%',
            },
            background: {
                color: $mol_theme.current,
            },
        };
        $mol_style_define($rise_range_input, {
            height: $mol_style_func.calc(`${Thumb_size} + 2 * ${Track_margin}`),
            margin: {
                top: $mol_style_func.calc(`-1 * ${Track_margin} / 2 - var(--mol_gap_space)`),
                bottom: $mol_style_func.calc(`-1 * ${Track_margin} / 2`),
                left: 0,
                right: 0,
            },
            '::-webkit-slider-runnable-track': Track,
            ['::-moz-range-track']: Track,
            '::-webkit-slider-thumb': Thumb,
            ['::-moz-range-thumb']: Thumb,
            appearance: 'none',
            background: {
                color: 'transparent',
            },
            cursor: 'pointer',
            ':disabled': {
                cursor: 'default',
                '::-webkit-slider-thumb': {
                    background: {
                        color: $mol_theme.shade,
                    },
                },
                ['::-moz-range-thumb']: {
                    background: {
                        color: $mol_theme.shade,
                    },
                },
            },
            ':focus': {
                outline: 'none',
            },
        });
        $mol_style_define($rise_range_value, {
            '[disabled]': {
                'true': {
                    color: $mol_theme.shade,
                },
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_board_block_range) = class $shm_hitalama_board_block_range extends ($.$shm_hitalama_board_block_float) {
		value(next){
			if(next !== undefined) return next;
			return 0;
		}
		min(next){
			if(next !== undefined) return next;
			return 0;
		}
		max(next){
			if(next !== undefined) return next;
			return 10;
		}
		step(next){
			if(next !== undefined) return next;
			return 1;
		}
		Control(){
			const obj = new this.$.$rise_range();
			(obj.value) = (next) => ((this.value(next)));
			(obj.min) = () => ((this.min()));
			(obj.max) = () => ((this.max()));
			(obj.step) = () => ((this.step()));
			return obj;
		}
		Settings_trigger_icon(){
			const obj = new this.$.$mol_icon_cog_outline();
			return obj;
		}
		Min_label(){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ("Min");
			return obj;
		}
		Min(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.min(next)));
			return obj;
		}
		Min_row(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Min_label()), (this.Min())]);
			return obj;
		}
		Max_label(){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ("Max");
			return obj;
		}
		Max(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.max(next)));
			return obj;
		}
		Max_row(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Max_label()), (this.Max())]);
			return obj;
		}
		Step_label(){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ("Step");
			return obj;
		}
		Step(){
			const obj = new this.$.$mol_number();
			(obj.value) = (next) => ((this.step(next)));
			(obj.precision) = () => (0.01);
			(obj.precision_change) = () => (1);
			return obj;
		}
		Step_row(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Step_label()), (this.Step())]);
			return obj;
		}
		Settings_content(){
			const obj = new this.$.$mol_list();
			(obj.sub) = () => ([
				(this.Min_row()), 
				(this.Max_row()), 
				(this.Step_row())
			]);
			return obj;
		}
		Settings_pop(){
			const obj = new this.$.$mol_pick();
			(obj.hint) = () => ((this.$.$mol_locale.text("$shm_hitalama_board_block_range_Settings_pop_hint")));
			(obj.trigger_content) = () => ([(this.Settings_trigger_icon())]);
			(obj.bubble_content) = () => ([(this.Settings_content())]);
			return obj;
		}
		sub(){
			return [
				(this.Drag_view()), 
				(this.Control()), 
				...(this.edges()), 
				...(this.toolbar())
			];
		}
		font_tools(){
			return [];
		}
		tools(){
			return [
				(this.Top()), 
				(this.Bottom()), 
				(this.Settings_pop()), 
				(this.Delete()), 
				(this.Copy_code())
			];
		}
		copy_code_template(){
			return "board.block('{ref}').range().value()";
		}
	};
	($mol_mem(($.$shm_hitalama_board_block_range.prototype), "value"));
	($mol_mem(($.$shm_hitalama_board_block_range.prototype), "min"));
	($mol_mem(($.$shm_hitalama_board_block_range.prototype), "max"));
	($mol_mem(($.$shm_hitalama_board_block_range.prototype), "step"));
	($mol_mem(($.$shm_hitalama_board_block_range.prototype), "Control"));
	($mol_mem(($.$shm_hitalama_board_block_range.prototype), "Settings_trigger_icon"));
	($mol_mem(($.$shm_hitalama_board_block_range.prototype), "Min_label"));
	($mol_mem(($.$shm_hitalama_board_block_range.prototype), "Min"));
	($mol_mem(($.$shm_hitalama_board_block_range.prototype), "Min_row"));
	($mol_mem(($.$shm_hitalama_board_block_range.prototype), "Max_label"));
	($mol_mem(($.$shm_hitalama_board_block_range.prototype), "Max"));
	($mol_mem(($.$shm_hitalama_board_block_range.prototype), "Max_row"));
	($mol_mem(($.$shm_hitalama_board_block_range.prototype), "Step_label"));
	($mol_mem(($.$shm_hitalama_board_block_range.prototype), "Step"));
	($mol_mem(($.$shm_hitalama_board_block_range.prototype), "Step_row"));
	($mol_mem(($.$shm_hitalama_board_block_range.prototype), "Settings_content"));
	($mol_mem(($.$shm_hitalama_board_block_range.prototype), "Settings_pop"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_board_block_range extends $.$shm_hitalama_board_block_range {
            value(next) {
                return this.block().range().value(next);
            }
            min(next) {
                return this.block().range().min(next);
            }
            max(next) {
                return this.block().range().max(next);
            }
            step(next) {
                return this.block().range().step(next);
            }
        }
        $$.$shm_hitalama_board_block_range = $shm_hitalama_board_block_range;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        const Label = {
            width: '4rem',
            padding: $mol_gap.text,
        };
        $mol_style_define($shm_hitalama_board_block_range, {
            Drag_view: {
                position: 'absolute',
                width: '100%',
                height: '100%',
            },
            Control: {
                justify: {
                    content: 'center',
                },
                Input: {
                    zIndex: 1,
                },
            },
            Settings_content: {
                padding: $mol_gap.space,
            },
            Min_label: {
                ...Label,
            },
            Max_label: {
                ...Label,
            },
            Step_label: {
                ...Label,
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_grid) = class $shm_hitalama_grid extends ($.$mol_grid) {
		Table_view(){
			const obj = new this.$.$shm_hitalama_grid_table();
			(obj.sub) = () => ((this.rows()));
			return obj;
		}
		sub(){
			return [(this.Head()), (this.Table_view())];
		}
	};
	($mol_mem(($.$shm_hitalama_grid.prototype), "Table_view"));
	($.$shm_hitalama_grid_table) = class $shm_hitalama_grid_table extends ($.$mol_view) {};


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("shm/hitalama/grid/grid.view.css", "[shm_hitalama_grid_table] {\n\tborder-spacing: 0;\n\tdisplay: table-row-group;\n\tposition: relative;\n}\n\n[shm_hitalama_grid_table] > * {\n\tdisplay: table-row;\n\ttransition: none;\n}\n\n[shm_hitalama_grid_table] > * > * {\n\tdisplay: table-cell;\n\tpadding: var(--mol_gap_text);\n\twhite-space: nowrap;\n\tvertical-align: middle;\n\tbox-shadow: inset 2px 2px 0 -1px var(--mol_theme_line);\n}\n\n[shm_hitalama_grid_table] > * > *:where(:first-child) {\n\tbox-shadow: inset 0px 2px 0 -1px var(--mol_theme_line);\n}\n\n[shm_hitalama_grid_table] > [mol_grid_row]:where(:first-child) > *:where(:first-child) {\n\tbox-shadow: none;\n}\t\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$shm_hitalama_board_block_table_novirt) = class $shm_hitalama_board_block_table_novirt extends ($.$shm_hitalama_board_block_table) {
		cell_content_text(id){
			return (this.Table().cell_content_text(id));
		}
		table_row_ids(){
			return (this.Table().row_ids());
		}
		Table(){
			const obj = new this.$.$shm_hitalama_grid();
			(obj.records) = () => ((this.rows()));
			(obj.col_ids) = () => ((this.col_ids()));
			(obj.col_head_content) = (id) => ((this.col_head_content(id)));
			(obj.Cell) = (id) => ((this.Cell(id)));
			return obj;
		}
	};
	($mol_mem(($.$shm_hitalama_board_block_table_novirt.prototype), "Table"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_board_block_table_novirt, {
            Cell_text: {
                whiteSpace: 'normal',
                position: 'relative',
            },
            Cell_checkbox: {
                padding: 0,
            },
            Cell_file: {
                padding: 0,
            },
            Cell_delete: {
                padding: 0,
            },
            Cell_edit: {
                padding: 0,
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_board_block_form_edit) = class $shm_hitalama_board_block_form_edit extends ($.$shm_hitalama_board_block_float) {
		form(){
			const obj = new this.$.$shm_hitalama_board_form();
			return obj;
		}
		board(){
			const obj = new this.$.$shm_hitalama_board();
			return obj;
		}
		Form(){
			const obj = new this.$.$shm_hitalama_board_form_view();
			(obj.form) = () => ((this.form()));
			(obj.board) = () => ((this.board()));
			(obj.buttons) = () => ([]);
			return obj;
		}
		content(){
			return [(this.Drag_view()), (this.Form())];
		}
		font_tools(){
			return [];
		}
	};
	($mol_mem(($.$shm_hitalama_board_block_form_edit.prototype), "form"));
	($mol_mem(($.$shm_hitalama_board_block_form_edit.prototype), "board"));
	($mol_mem(($.$shm_hitalama_board_block_form_edit.prototype), "Form"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_board_block_form_edit extends $.$shm_hitalama_board_block_form_edit {
            form() {
                return this.block().Form_edit()?.remote();
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_form_edit.prototype, "form", null);
        $$.$shm_hitalama_board_block_form_edit = $shm_hitalama_board_block_form_edit;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_board_block_form_edit, {
            background: {
                color: $mol_theme.card,
            },
            Drag_view: {
                position: 'absolute',
                width: '100%',
                height: '100%',
            },
            Form: {
                padding: $mol_gap.block,
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$rise_toggle) = class $rise_toggle extends ($.$mol_check) {
		minimal_height(){
			return 24;
		}
		minimal_width(){
			return 24;
		}
		sub(){
			return [];
		}
	};


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("rise/toggle/toggle.view.css", "[rise_toggle] {\n    background-color: var(--mol_theme_shade);\n    width: 2.5rem;\n    height: 1.375rem;\n    border-radius: 2rem;\n    cursor: pointer;\n    position: relative;\n    transition: 0.2s;\n}\n[rise_toggle]:hover {\n    background-color: var(--mol_theme_shade);\n}\n[rise_toggle]::before {\n    position: absolute;\n    content: '';\n    background-color: var(--mol_theme_back);\n    width: 1.25rem;\n    height: 1.25rem;\n    border-radius: 2rem;\n    margin: -0.625rem;\n    transition: 0.2s;\n}\n\n[rise_toggle]:where([mol_check_checked]) {\n    background-color: var(--mol_theme_current);\n}\n[rise_toggle]:where([mol_check_checked]):hover {\n    background-color: var(--mol_theme_current);\n}\n[rise_toggle]:where([mol_check_checked])::before {\n    transform: translateX(1rem);\n}\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$shm_hitalama_board_block_code_css) = class $shm_hitalama_board_block_code_css extends ($.$shm_hitalama_board_block_code) {
		attach(){
			return null;
		}
		enabled(next){
			if(next !== undefined) return next;
			return true;
		}
		Toggle(){
			const obj = new this.$.$rise_toggle();
			(obj.checked) = (next) => ((this.enabled(next)));
			return obj;
		}
		Overlay(){
			return null;
		}
		auto(){
			return [(this.attach())];
		}
		tools(){
			return [
				(this.Top()), 
				(this.Bottom()), 
				(this.Toggle()), 
				(this.Delete()), 
				(this.Copy_code())
			];
		}
	};
	($mol_mem(($.$shm_hitalama_board_block_code_css.prototype), "enabled"));
	($mol_mem(($.$shm_hitalama_board_block_code_css.prototype), "Toggle"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_board_block_code_css extends $.$shm_hitalama_board_block_code_css {
            attach() {
                if (!this.enabled())
                    return null;
                const id = this.block().ref().description;
                const style_el = this.$.$mol_style_attach(id, this.block().text());
                if (style_el)
                    Object.assign(style_el, {
                        destructor() {
                            style_el.remove();
                        }
                    });
                return style_el;
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_code_css.prototype, "attach", null);
        $$.$shm_hitalama_board_block_code_css = $shm_hitalama_board_block_code_css;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_board_block_code_css, {
            Toggle: {
                align: {
                    self: 'center',
                },
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_board_block_any) = class $shm_hitalama_board_block_any extends ($.$mol_ghost) {
		height(){
			return (this.Sub().height());
		}
		width(){
			return (this.Sub().width());
		}
		top(){
			return (this.Sub().top());
		}
		left(){
			return (this.Sub().left());
		}
		block(){
			const obj = new this.$.$shm_hitalama_board_block();
			return obj;
		}
		board(){
			const obj = new this.$.$shm_hitalama_board();
			return obj;
		}
		Board_page(){
			const obj = new this.$.$shm_hitalama_board_page();
			return obj;
		}
		delete(){
			return null;
		}
		to_top(){
			return null;
		}
		to_bottom(){
			return null;
		}
		sticks_y(){
			return [0];
		}
		sticks_x(){
			return [0];
		}
		selected(next){
			if(next !== undefined) return next;
			return false;
		}
		hovered(next){
			if(next !== undefined) return next;
			return false;
		}
		editing(next){
			return (this.Sub().editing(next));
		}
		has_scrollbar(){
			return (this.Sub().has_scrollbar());
		}
		drags_synced(){
			return [];
		}
		on_contextmenu(next){
			if(next !== undefined) return next;
			return null;
		}
		Contextmenu_body(){
			return (this.Sub().Contextmenu_body());
		}
		zoom(){
			return 1;
		}
		Input(){
			const obj = new this.$.$shm_hitalama_board_block_input();
			return obj;
		}
		Iframe(){
			const obj = new this.$.$shm_hitalama_board_block_iframe();
			return obj;
		}
		Text(){
			const obj = new this.$.$shm_hitalama_board_block_text();
			return obj;
		}
		Form(){
			const obj = new this.$.$shm_hitalama_board_block_form();
			return obj;
		}
		Table(){
			const obj = new this.$.$shm_hitalama_board_block_table();
			return obj;
		}
		Code(){
			const obj = new this.$.$shm_hitalama_board_block_code();
			return obj;
		}
		Chart(){
			const obj = new this.$.$shm_hitalama_board_block_chart();
			return obj;
		}
		Chart_settings(){
			const obj = new this.$.$shm_hitalama_board_block_chart_settings();
			return obj;
		}
		Chart_filter(){
			const obj = new this.$.$shm_hitalama_board_block_chart_filter();
			return obj;
		}
		Customdom(){
			const obj = new this.$.$shm_hitalama_board_block_customdom();
			return obj;
		}
		File(){
			const obj = new this.$.$shm_hitalama_board_block_file();
			return obj;
		}
		Range(){
			const obj = new this.$.$shm_hitalama_board_block_range();
			return obj;
		}
		Table_novirt(){
			const obj = new this.$.$shm_hitalama_board_block_table_novirt();
			return obj;
		}
		Form_edit(){
			const obj = new this.$.$shm_hitalama_board_block_form_edit();
			return obj;
		}
		Code_css(){
			const obj = new this.$.$shm_hitalama_board_block_code_css();
			return obj;
		}
		Sub(){
			const obj = new this.$.$shm_hitalama_board_block_float();
			(obj.block) = () => ((this.block()));
			(obj.board) = () => ((this.board()));
			(obj.Board_page) = () => ((this.Board_page()));
			(obj.delete) = () => ((this.delete()));
			(obj.to_top) = () => ((this.to_top()));
			(obj.to_bottom) = () => ((this.to_bottom()));
			(obj.sticks_y) = () => ((this.sticks_y()));
			(obj.sticks_x) = () => ((this.sticks_x()));
			(obj.selected) = (next) => ((this.selected(next)));
			(obj.hovered) = (next) => ((this.hovered(next)));
			(obj.drags_synced) = () => ((this.drags_synced()));
			(obj.on_contextmenu) = (next) => ((this.on_contextmenu(next)));
			(obj.zoom) = () => ((this.zoom()));
			return obj;
		}
		blocks(){
			return {
				"input": (this.Input()), 
				"iframe": (this.Iframe()), 
				"text": (this.Text()), 
				"form": (this.Form()), 
				"table": (this.Table()), 
				"code": (this.Code()), 
				"chart": (this.Chart()), 
				"chart_settings": (this.Chart_settings()), 
				"chart_filter": (this.Chart_filter()), 
				"customdom": (this.Customdom()), 
				"file": (this.File()), 
				"range": (this.Range()), 
				"table_novirt": (this.Table_novirt()), 
				"form_edit": (this.Form_edit()), 
				"code_css": (this.Code_css())
			};
		}
	};
	($mol_mem(($.$shm_hitalama_board_block_any.prototype), "block"));
	($mol_mem(($.$shm_hitalama_board_block_any.prototype), "board"));
	($mol_mem(($.$shm_hitalama_board_block_any.prototype), "Board_page"));
	($mol_mem(($.$shm_hitalama_board_block_any.prototype), "selected"));
	($mol_mem(($.$shm_hitalama_board_block_any.prototype), "hovered"));
	($mol_mem(($.$shm_hitalama_board_block_any.prototype), "on_contextmenu"));
	($mol_mem(($.$shm_hitalama_board_block_any.prototype), "Input"));
	($mol_mem(($.$shm_hitalama_board_block_any.prototype), "Iframe"));
	($mol_mem(($.$shm_hitalama_board_block_any.prototype), "Text"));
	($mol_mem(($.$shm_hitalama_board_block_any.prototype), "Form"));
	($mol_mem(($.$shm_hitalama_board_block_any.prototype), "Table"));
	($mol_mem(($.$shm_hitalama_board_block_any.prototype), "Code"));
	($mol_mem(($.$shm_hitalama_board_block_any.prototype), "Chart"));
	($mol_mem(($.$shm_hitalama_board_block_any.prototype), "Chart_settings"));
	($mol_mem(($.$shm_hitalama_board_block_any.prototype), "Chart_filter"));
	($mol_mem(($.$shm_hitalama_board_block_any.prototype), "Customdom"));
	($mol_mem(($.$shm_hitalama_board_block_any.prototype), "File"));
	($mol_mem(($.$shm_hitalama_board_block_any.prototype), "Range"));
	($mol_mem(($.$shm_hitalama_board_block_any.prototype), "Table_novirt"));
	($mol_mem(($.$shm_hitalama_board_block_any.prototype), "Form_edit"));
	($mol_mem(($.$shm_hitalama_board_block_any.prototype), "Code_css"));
	($mol_mem(($.$shm_hitalama_board_block_any.prototype), "Sub"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_board_block_any extends $.$shm_hitalama_board_block_any {
            Sub() {
                const type = this.block().Type()?.val();
                const obj = this.blocks()[type] ?? super.Sub();
                obj.block = () => this.block();
                obj.board = () => this.board();
                obj.Board_page = () => this.Board_page();
                obj.delete = () => this.delete();
                obj.to_top = () => this.to_top();
                obj.to_bottom = () => this.to_bottom();
                obj.sticks_y = () => this.sticks_y();
                obj.sticks_x = () => this.sticks_x();
                obj.selected = (next) => this.selected(next);
                obj.hovered = (next) => this.hovered(next);
                obj.drags_synced = () => this.drags_synced();
                obj.on_contextmenu = (next) => this.on_contextmenu(next);
                obj.zoom = () => this.zoom();
                return obj;
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_block_any.prototype, "Sub", null);
        $$.$shm_hitalama_board_block_any = $shm_hitalama_board_block_any;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_icon_cursor_default) = class $mol_icon_cursor_default extends ($.$mol_icon) {
		path(){
			return "M13.64,21.97C13.14,22.21 12.54,22 12.31,21.5L10.13,16.76L7.62,18.78C7.45,18.92 7.24,19 7,19A1,1 0 0,1 6,18V3A1,1 0 0,1 7,2C7.24,2 7.47,2.09 7.64,2.23L7.65,2.22L19.14,11.86C19.57,12.22 19.62,12.85 19.27,13.27C19.12,13.45 18.91,13.57 18.7,13.61L15.54,14.23L17.74,18.96C18,19.46 17.76,20.05 17.26,20.28L13.64,21.97Z";
		}
	};


;
"use strict";

;
	($.$shm_hitalama_board_presence_cursor) = class $shm_hitalama_board_presence_cursor extends ($.$mol_view) {
		top_px(){
			return "";
		}
		left_px(){
			return "";
		}
		Icon(){
			const obj = new this.$.$mol_icon_cursor_default();
			return obj;
		}
		name(){
			return "afasfs";
		}
		Name(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.name())]);
			return obj;
		}
		pos(){
			return [];
		}
		style(){
			return {
				...(super.style()), 
				"top": (this.top_px()), 
				"left": (this.left_px())
			};
		}
		sub(){
			return [(this.Icon()), (this.Name())];
		}
	};
	($mol_mem(($.$shm_hitalama_board_presence_cursor.prototype), "Icon"));
	($mol_mem(($.$shm_hitalama_board_presence_cursor.prototype), "Name"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_board_presence_cursor extends $.$shm_hitalama_board_presence_cursor {
            left_px() {
                return this.pos()?.[0] + 'px';
            }
            top_px() {
                return this.pos()?.[1] + 'px';
            }
            name() {
                const profile = $shm_hitalama_profile.current();
                return profile?.Login()?.val() ?? profile?.ref().description?.toString();
            }
        }
        $$.$shm_hitalama_board_presence_cursor = $shm_hitalama_board_presence_cursor;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_board_presence_cursor, {
            position: 'absolute',
            Icon: {
                padding: 0,
                width: '1.5rem',
                height: '1.5rem',
                margin: {
                    top: '-1px',
                    left: '-6px',
                },
            },
            Name: {
                padding: {
                    top: $mol_gap.block,
                    left: $mol_gap.space,
                },
            },
            pointerEvents: 'none',
            transition: 'top 0.2s, left 0.2s',
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_board_touch) = class $shm_hitalama_board_touch extends ($.$mol_touch) {};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_board_touch extends $.$shm_hitalama_board_touch {
            event_wheel(event) {
                if (!this.allow_zoom())
                    return;
                return super.event_wheel(event);
            }
            event_start(event) {
                if (event.button != 2)
                    return;
                return super.event_start(event);
            }
        }
        $$.$shm_hitalama_board_touch = $shm_hitalama_board_touch;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_board_back) = class $shm_hitalama_board_back extends ($.$mol_view) {
		event_pointerdown(next){
			if(next !== undefined) return next;
			return null;
		}
		event_contextmenu(next){
			if(next !== undefined) return next;
			return null;
		}
		event(){
			return {
				...(super.event()), 
				"pointerdown": (next) => (this.event_pointerdown(next)), 
				"contextmenu": (next) => (this.event_contextmenu(next))
			};
		}
	};
	($mol_mem(($.$shm_hitalama_board_back.prototype), "event_pointerdown"));
	($mol_mem(($.$shm_hitalama_board_back.prototype), "event_contextmenu"));


;
"use strict";

;
	($.$mol_drop) = class $mol_drop extends ($.$mol_ghost) {
		enter(next){
			if(next !== undefined) return next;
			return null;
		}
		move(next){
			if(next !== undefined) return next;
			return null;
		}
		leave(next){
			if(next !== undefined) return next;
			return null;
		}
		drop(next){
			if(next !== undefined) return next;
			return null;
		}
		status(next){
			if(next !== undefined) return next;
			return "ready";
		}
		enabled(next){
			if(next !== undefined) return next;
			return true;
		}
		event(){
			return {
				"dragenter": (next) => (this.enter(next)), 
				"dragover": (next) => (this.move(next)), 
				"dragleave": (next) => (this.leave(next)), 
				"drop": (next) => (this.drop(next))
			};
		}
		attr(){
			return {"mol_drop_status": (this.status())};
		}
		adopt(next){
			if(next !== undefined) return next;
			return {};
		}
		receive(next){
			if(next !== undefined) return next;
			return null;
		}
		allow(){
			return [
				"copy", 
				"move", 
				"link"
			];
		}
	};
	($mol_mem(($.$mol_drop.prototype), "enter"));
	($mol_mem(($.$mol_drop.prototype), "move"));
	($mol_mem(($.$mol_drop.prototype), "leave"));
	($mol_mem(($.$mol_drop.prototype), "drop"));
	($mol_mem(($.$mol_drop.prototype), "status"));
	($mol_mem(($.$mol_drop.prototype), "enabled"));
	($mol_mem(($.$mol_drop.prototype), "adopt"));
	($mol_mem(($.$mol_drop.prototype), "receive"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_drop extends $.$mol_drop {
            status(next = 'ready') { return next; }
            _target = null;
            enter(event) {
                if (event.defaultPrevented)
                    return;
                if (!this.enabled())
                    return;
                const action = this.decide_action(event);
                event.dataTransfer.dropEffect = action;
                if (action !== 'none')
                    this.status('drag');
                this._target = event.target;
                event.preventDefault();
            }
            move(event) {
                if (event.defaultPrevented)
                    return;
                if (!this.enabled())
                    return;
                event.dataTransfer.dropEffect = this.decide_action(event);
                event.preventDefault();
            }
            decide_action(event) {
                const allow = this.allow();
                if (allow.includes('move') && event.shiftKey)
                    return 'move';
                else if (allow.includes('copy') && event.ctrlKey)
                    return 'copy';
                else if (allow.includes('link') && event.altKey)
                    return 'link';
                else
                    return allow[0];
            }
            leave(event) {
                if (this._target === event.target) {
                    this.status('ready');
                }
            }
            receive(transfer) {
                return transfer;
            }
            drop(event) {
                if (event.defaultPrevented)
                    return;
                event.preventDefault();
                setTimeout(() => this.status('ready'));
                const obj = this.adopt(event.dataTransfer);
                if (!obj)
                    return;
                this.receive(obj);
            }
        }
        __decorate([
            $mol_mem
        ], $mol_drop.prototype, "status", null);
        $$.$mol_drop = $mol_drop;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_board_pane) = class $shm_hitalama_board_pane extends ($.$mol_view) {
		selecting(next){
			if(next !== undefined) return next;
			return false;
		}
		keydown_listener(){
			return null;
		}
		keyup_listener(){
			return null;
		}
		ctrl_pressed(next){
			if(next !== undefined) return next;
			return false;
		}
		shift_pressed(next){
			if(next !== undefined) return next;
			return false;
		}
		viewport_shifting(next){
			if(next !== undefined) return next;
			return false;
		}
		zoom(next){
			if(next !== undefined) return next;
			return 1;
		}
		shift(next){
			if(next !== undefined) return next;
			const obj = new this.$.$mol_vector_2d(0, 0);
			return obj;
		}
		cursor_position(){
			return (this.Touch().pointer_center());
		}
		allow_zoom(){
			return true;
		}
		action_type(){
			return (this.Touch().action_type());
		}
		action_point(){
			return (this.Touch().action_point());
		}
		Touch(){
			const obj = new this.$.$shm_hitalama_board_touch();
			(obj.zoom) = (next) => ((this.zoom(next)));
			(obj.pan) = (next) => ((this.shift(next)));
			(obj.allow_draw) = () => (false);
			(obj.allow_zoom) = () => ((this.allow_zoom()));
			return obj;
		}
		back_event_pointerdown(next){
			if(next !== undefined) return next;
			return null;
		}
		back_event_contextmenu(next){
			if(next !== undefined) return next;
			return null;
		}
		Back(){
			const obj = new this.$.$shm_hitalama_board_back();
			(obj.event_pointerdown) = (next) => ((this.back_event_pointerdown(next)));
			(obj.event_contextmenu) = (next) => ((this.back_event_contextmenu(next)));
			return obj;
		}
		event_drop(next){
			if(next !== undefined) return next;
			return null;
		}
		Drop(){
			const obj = new this.$.$mol_drop();
			(obj.Sub) = () => ((this.Back()));
			(obj.drop) = (next) => ((this.event_drop(next)));
			return obj;
		}
		outside(){
			return [];
		}
		body(){
			return [];
		}
		content_view_rect(){
			return (this.Content().view_rect());
		}
		transform(){
			return "";
		}
		Content(){
			const obj = new this.$.$mol_view();
			(obj.minimal_height) = () => (0);
			(obj.minimal_width) = () => (0);
			(obj.sub) = () => ((this.body()));
			(obj.style) = () => ({"transform": (this.transform())});
			return obj;
		}
		select_rect_left(next){
			if(next !== undefined) return next;
			return "0px";
		}
		select_rect_top(next){
			if(next !== undefined) return next;
			return "0px";
		}
		select_rect_width(next){
			if(next !== undefined) return next;
			return "0px";
		}
		select_rect_height(next){
			if(next !== undefined) return next;
			return "0px";
		}
		Select_rect(){
			const obj = new this.$.$mol_view();
			(obj.style) = () => ({
				"left": (this.select_rect_left()), 
				"top": (this.select_rect_top()), 
				"width": (this.select_rect_width()), 
				"height": (this.select_rect_height())
			});
			return obj;
		}
		select_rect(){
			return [(this.Select_rect())];
		}
		pointer_move(next){
			if(next !== undefined) return next;
			return null;
		}
		pointer_down(next){
			if(next !== undefined) return next;
			return null;
		}
		pointer_up(next){
			if(next !== undefined) return next;
			return null;
		}
		wheel(next){
			if(next !== undefined) return next;
			return null;
		}
		attr(){
			return {...(super.attr()), "selecting": (this.selecting())};
		}
		pointer_pos(){
			return [];
		}
		real_pointer_pos(next){
			if(next !== undefined) return next;
			return [];
		}
		to_real_pos(id){
			return null;
		}
		auto(){
			return [
				(this.keydown_listener()), 
				(this.keyup_listener()), 
				(this.ctrl_pressed()), 
				(this.shift_pressed()), 
				(this.viewport_shifting())
			];
		}
		plugins(){
			return [...(super.plugins()), (this.Touch())];
		}
		sub(){
			return [
				(this.Drop()), 
				...(this.outside()), 
				(this.Content()), 
				...(this.select_rect())
			];
		}
		select_rect_start_x(next){
			if(next !== undefined) return next;
			return NaN;
		}
		select_rect_start_y(next){
			if(next !== undefined) return next;
			return NaN;
		}
		select_rect_end_x(next){
			if(next !== undefined) return next;
			return NaN;
		}
		select_rect_end_y(next){
			if(next !== undefined) return next;
			return NaN;
		}
		select_rect_size(){
			return [];
		}
		select_rect_pos(){
			return [];
		}
		select_start(next){
			if(next !== undefined) return next;
			return null;
		}
		select_resize(next){
			if(next !== undefined) return next;
			return null;
		}
		client_pos_to_pane_pos(id){
			return null;
		}
		prevent_zoom(next){
			if(next !== undefined) return next;
			return false;
		}
		event(){
			return {
				...(super.event()), 
				"pointermove": (next) => (this.pointer_move(next)), 
				"pointerdown": (next) => (this.pointer_down(next)), 
				"pointerup": (next) => (this.pointer_up(next)), 
				"wheel": (next) => (this.wheel(next))
			};
		}
	};
	($mol_mem(($.$shm_hitalama_board_pane.prototype), "selecting"));
	($mol_mem(($.$shm_hitalama_board_pane.prototype), "ctrl_pressed"));
	($mol_mem(($.$shm_hitalama_board_pane.prototype), "shift_pressed"));
	($mol_mem(($.$shm_hitalama_board_pane.prototype), "viewport_shifting"));
	($mol_mem(($.$shm_hitalama_board_pane.prototype), "zoom"));
	($mol_mem(($.$shm_hitalama_board_pane.prototype), "shift"));
	($mol_mem(($.$shm_hitalama_board_pane.prototype), "Touch"));
	($mol_mem(($.$shm_hitalama_board_pane.prototype), "back_event_pointerdown"));
	($mol_mem(($.$shm_hitalama_board_pane.prototype), "back_event_contextmenu"));
	($mol_mem(($.$shm_hitalama_board_pane.prototype), "Back"));
	($mol_mem(($.$shm_hitalama_board_pane.prototype), "event_drop"));
	($mol_mem(($.$shm_hitalama_board_pane.prototype), "Drop"));
	($mol_mem(($.$shm_hitalama_board_pane.prototype), "Content"));
	($mol_mem(($.$shm_hitalama_board_pane.prototype), "select_rect_left"));
	($mol_mem(($.$shm_hitalama_board_pane.prototype), "select_rect_top"));
	($mol_mem(($.$shm_hitalama_board_pane.prototype), "select_rect_width"));
	($mol_mem(($.$shm_hitalama_board_pane.prototype), "select_rect_height"));
	($mol_mem(($.$shm_hitalama_board_pane.prototype), "Select_rect"));
	($mol_mem(($.$shm_hitalama_board_pane.prototype), "pointer_move"));
	($mol_mem(($.$shm_hitalama_board_pane.prototype), "pointer_down"));
	($mol_mem(($.$shm_hitalama_board_pane.prototype), "pointer_up"));
	($mol_mem(($.$shm_hitalama_board_pane.prototype), "wheel"));
	($mol_mem(($.$shm_hitalama_board_pane.prototype), "real_pointer_pos"));
	($mol_mem(($.$shm_hitalama_board_pane.prototype), "select_rect_start_x"));
	($mol_mem(($.$shm_hitalama_board_pane.prototype), "select_rect_start_y"));
	($mol_mem(($.$shm_hitalama_board_pane.prototype), "select_rect_end_x"));
	($mol_mem(($.$shm_hitalama_board_pane.prototype), "select_rect_end_y"));
	($mol_mem(($.$shm_hitalama_board_pane.prototype), "select_start"));
	($mol_mem(($.$shm_hitalama_board_pane.prototype), "select_resize"));
	($mol_mem(($.$shm_hitalama_board_pane.prototype), "prevent_zoom"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_board_pane extends $.$shm_hitalama_board_pane {
            select_start(event) {
                if (event?.button == 2)
                    return;
                this.selecting(true);
                this.select_rect_start_x(event.clientX);
                this.select_rect_start_y(event.clientY);
                this.select_rect_end_x(event.clientX);
                this.select_rect_end_y(event.clientY);
                const mousemove = new $mol_dom_listener(this.$.$mol_dom_context.document, 'mousemove', $mol_wire_async(event => {
                    this.select_rect_end_x(event.clientX);
                    this.select_rect_end_y(event.clientY);
                    this.select_resize(event);
                }));
                const mouseup = new $mol_dom_listener(this.$.$mol_dom_context.document, 'mouseup', $mol_wire_async(event => {
                    this.selecting(false);
                    mouseup?.destructor();
                    mousemove?.destructor();
                }));
            }
            pointer_client_pos = [0, 0];
            pointer_move(event) {
                this.pointer_client_pos = [event.clientX, event.clientY];
                this.real_pointer_pos(this.to_real_pos(this.client_pos_to_pane_pos(this.pointer_client_pos)));
            }
            pointer_down(event) {
                if (event?.button == 2) {
                    this.viewport_shifting(true);
                }
            }
            ctrl_pressed(next) {
                return this.viewport_shifting(next);
            }
            allow_zoom() {
                return this.viewport_shifting() ? true : false;
            }
            pointer_up(event) {
                if (event?.button == 2)
                    this.viewport_shifting(false);
            }
            pane_contextmenu(event) {
                event?.preventDefault();
            }
            pointer_pos() {
                return this.client_pos_to_pane_pos(this.pointer_client_pos);
            }
            real_pointer_pos(next) {
                return next ?? super.real_pointer_pos();
            }
            to_real_pos([x, y]) {
                const shift = this.shift();
                const zoom = this.zoom();
                return [
                    (x - shift[0]) / zoom,
                    (y - shift[1]) / zoom,
                ];
            }
            client_pos_to_pane_pos(client_pos) {
                const { left, top } = this.dom_node().getBoundingClientRect();
                let x = client_pos[0] - left;
                let y = client_pos[1] - top;
                return [x, y];
            }
            select_rect() {
                return this.selecting() ? super.select_rect() : [];
            }
            select_rect_pos() {
                return this.client_pos_to_pane_pos([
                    Math.min(this.select_rect_start_x(), this.select_rect_end_x()),
                    Math.min(this.select_rect_start_y(), this.select_rect_end_y()),
                ]);
            }
            select_rect_size() {
                return [
                    Math.abs(this.select_rect_end_x() - this.select_rect_start_x()),
                    Math.abs(this.select_rect_end_y() - this.select_rect_start_y()),
                ];
            }
            select_rect_left() {
                return this.select_rect_pos()[0] + 'px';
            }
            select_rect_top() {
                return this.select_rect_pos()[1] + 'px';
            }
            select_rect_width() {
                return this.select_rect_size()[0] + 'px';
            }
            select_rect_height() {
                return this.select_rect_size()[1] + 'px';
            }
            transform() {
                const [shift_x, shift_y] = this.shift();
                const scale = this.zoom();
                const pos_x = shift_x;
                const pos_y = shift_y;
                return `translate3d(${pos_x}px,${pos_y}px,0px) scale(${scale})`;
            }
            zoom(next) {
                return this.$.$mol_state_local.value(this.toString() + 'zoom', next) ?? 1;
            }
            shift(next) {
                if (next === undefined)
                    return new this.$.$mol_vector_2d(...(this.$.$mol_state_local.value(this.toString() + 'shift') ?? [0, 0]));
                return this.$.$mol_state_local.value(this.toString() + 'shift', next) ?? super.shift();
            }
            keydown_listener() {
                return new $mol_dom_listener(this.$.$mol_dom_context.document, 'keydown', $mol_wire_async(event => {
                    if (event.key == 'Control') {
                        this.ctrl_pressed(true);
                    }
                    else if (event.key == 'Shift') {
                        this.shift_pressed(true);
                    }
                }));
            }
            keyup_listener() {
                return new $mol_dom_listener(this.$.$mol_dom_context.document, 'keyup', $mol_wire_async(event => {
                    if (event.key == 'Control') {
                        this.ctrl_pressed(false);
                    }
                    else if (event.key == 'Shift') {
                        this.shift_pressed(false);
                    }
                }));
            }
            wheel(event) {
                this.ctrl_pressed(event.ctrlKey);
                this.shift_pressed(event.shiftKey);
                if (this.viewport_shifting())
                    return;
                if (this.prevent_zoom())
                    return;
                const shift = this.shift();
                if (this.shift_pressed() && (Math.abs(event.deltaX) == 0)) {
                    this.shift(new this.$.$mol_vector_2d(shift.x - event.deltaY, shift.y));
                }
                else {
                    this.shift(new this.$.$mol_vector_2d(shift.x - event.deltaX, shift.y - event.deltaY));
                }
            }
            content_pointer_events() {
                return this.viewport_shifting() ? 'none' : 'auto';
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_pane.prototype, "real_pointer_pos", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_pane.prototype, "select_rect_left", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_pane.prototype, "select_rect_top", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_pane.prototype, "select_rect_width", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_pane.prototype, "select_rect_height", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_pane.prototype, "transform", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_pane.prototype, "zoom", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_pane.prototype, "shift", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_pane.prototype, "keydown_listener", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_pane.prototype, "keyup_listener", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_pane.prototype, "content_pointer_events", null);
        $$.$shm_hitalama_board_pane = $shm_hitalama_board_pane;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_board_pane, {
            '[selecting]': {
                true: {
                    userSelect: 'none',
                    pointerEvents: 'none',
                },
            },
            Back: {
                position: 'absolute',
                width: '100%',
                height: '100%',
                outline: '1px solid gray'
            },
            Content: {
                position: 'absolute',
                transition: 'none',
                width: 0,
                height: 0,
                transformOrigin: '0 0',
            },
            Select_rect: {
                position: 'absolute',
                transition: 'none',
                pointerEvents: 'none',
                background: {
                    color: $mol_style_func.rgba(112, 166, 219, 0.1),
                },
                outline: '1px solid #70A6DB'
            },
            position: 'absolute',
            width: '100%',
            height: '100%',
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_board_page) = class $shm_hitalama_board_page extends ($.$shm_hitalama_entity_page) {
		keydown_listener(){
			return null;
		}
		keyup_listener(){
			return null;
		}
		paste_listener(){
			return null;
		}
		shift_pressed(next){
			if(next !== undefined) return next;
			return false;
		}
		pull_drags_synced(){
			return null;
		}
		hovered_ref(next){
			if(next !== undefined) return next;
			return null;
		}
		send_cursor_pos_atom(){
			return null;
		}
		Open_in_new_icon(){
			const obj = new this.$.$mol_icon_open_in_new();
			return obj;
		}
		board_id(){
			return "";
		}
		Open_in_new(){
			const obj = new this.$.$mol_link_iconed();
			(obj.sub) = () => ([(this.Open_in_new_icon())]);
			(obj.arg) = () => ({"section": "board", "board": (this.board_id())});
			(obj.external) = () => (true);
			return obj;
		}
		Settings_trigger_icon(){
			const obj = new this.$.$mol_icon_dots_vertical();
			return obj;
		}
		description(next){
			if(next !== undefined) return next;
			return "";
		}
		Description_edit(){
			const obj = new this.$.$mol_textarea();
			(obj.value) = (next) => ((this.description(next)));
			return obj;
		}
		Description_field(){
			const obj = new this.$.$mol_form_field();
			(obj.name) = () => ("Описание");
			(obj.Content) = () => ((this.Description_edit()));
			return obj;
		}
		Settings_content(){
			const obj = new this.$.$mol_list();
			(obj.sub) = () => ([(this.Description_field()), (this.Cut())]);
			return obj;
		}
		Settings(){
			const obj = new this.$.$mol_pick();
			(obj.hint) = () => ("Click to show settings");
			(obj.trigger_content) = () => ([(this.Settings_trigger_icon())]);
			(obj.bubble_content) = () => ([(this.Settings_content())]);
			return obj;
		}
		scale_percent(){
			return "100%";
		}
		reset_scale(next){
			if(next !== undefined) return next;
			return null;
		}
		Scale(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ((this.scale_percent()));
			(obj.click) = (next) => ((this.reset_scale(next)));
			return obj;
		}
		Head_panel(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([
				(this.Open_in_new()), 
				(this.Title()), 
				(this.Settings()), 
				(this.Scale())
			]);
			return obj;
		}
		exported_json(){
			return "";
		}
		exported_file_name(){
			return "";
		}
		Export(){
			const obj = new this.$.$mol_button_download();
			(obj.uri) = () => ((this.exported_json()));
			(obj.file_name) = () => ((this.exported_file_name()));
			(obj.title) = () => ("Экспорт");
			return obj;
		}
		Head_right_panel(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Export())]);
			return obj;
		}
		text_add(next){
			if(next !== undefined) return next;
			return null;
		}
		Text_add(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ("Добавить текст");
			(obj.click) = (next) => ((this.text_add(next)));
			return obj;
		}
		input_add(next){
			if(next !== undefined) return next;
			return null;
		}
		Input_add(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ("Добавить input");
			(obj.click) = (next) => ((this.input_add(next)));
			return obj;
		}
		iframe_add(next){
			if(next !== undefined) return next;
			return null;
		}
		Iframe_add(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ("Добавить iframe");
			(obj.click) = (next) => ((this.iframe_add(next)));
			return obj;
		}
		range_add(next){
			if(next !== undefined) return next;
			return null;
		}
		Range_add(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ("Добавить range");
			(obj.click) = (next) => ((this.range_add(next)));
			return obj;
		}
		form_add(next){
			if(next !== undefined) return next;
			return null;
		}
		Form_add(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ("Добавить виджет: Сбор 1% выгрузки БА");
			(obj.click) = (next) => ((this.form_add(next)));
			return obj;
		}
		deckgl_example_add(next){
			if(next !== undefined) return next;
			return null;
		}
		Deckgl_example_add(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ("Добавить deck.gl example");
			(obj.click) = (next) => ((this.deckgl_example_add(next)));
			return obj;
		}
		echarts_example_add(next){
			if(next !== undefined) return next;
			return null;
		}
		Echarts_example_add(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ("Добавить ECharts example");
			(obj.click) = (next) => ((this.echarts_example_add(next)));
			return obj;
		}
		code_css_add(next){
			if(next !== undefined) return next;
			return null;
		}
		Code_css_add(){
			const obj = new this.$.$mol_button_minor();
			(obj.title) = () => ("Добавить css");
			(obj.click) = (next) => ((this.code_css_add(next)));
			return obj;
		}
		event_drop(next){
			if(next !== undefined) return next;
			return null;
		}
		select_start(next){
			return (this.Pane().select_start(next));
		}
		select_rect_pos(){
			return (this.Pane().select_rect_pos());
		}
		select_rect_size(){
			return (this.Pane().select_rect_size());
		}
		select_resize(){
			return null;
		}
		zoom(next){
			return (this.Pane().zoom(next));
		}
		pointer_pos(){
			return (this.Pane().pointer_pos());
		}
		real_pointer_pos(){
			return (this.Pane().real_pointer_pos());
		}
		to_real_pos(id){
			return (this.Pane().to_real_pos(id));
		}
		client_pos_to_pane_pos(id){
			return (this.Pane().client_pos_to_pane_pos(id));
		}
		back_event_pointerdown(next){
			if(next !== undefined) return next;
			return null;
		}
		back_event_contextmenu(next){
			if(next !== undefined) return next;
			return null;
		}
		prevent_zoom(){
			return false;
		}
		contextmenu_pos(next){
			if(next !== undefined) return next;
			return [];
		}
		contextmenu_showed(next){
			if(next !== undefined) return next;
			return false;
		}
		Context_menu(){
			const obj = new this.$.$shm_hitalama_contextmenu();
			(obj.body) = () => ((this.contextmenu_body()));
			(obj.pos) = (next) => ((this.contextmenu_pos(next)));
			(obj.showed) = (next) => ((this.contextmenu_showed(next)));
			return obj;
		}
		contextmenu_visible(){
			return [(this.Context_menu())];
		}
		Board_page(){
			const obj = new this.$.$shm_hitalama_board_page();
			return obj;
		}
		block_by_ref(id){
			const obj = new this.$.$shm_hitalama_board_block();
			return obj;
		}
		block_delete(id){
			return null;
		}
		block_to_top(id){
			return null;
		}
		block_to_bottom(id){
			return null;
		}
		block_height(id){
			return (this.Block(id).height());
		}
		block_width(id){
			return (this.Block(id).width());
		}
		block_top(id){
			return (this.Block(id).top());
		}
		block_left(id){
			return (this.Block(id).left());
		}
		sticks_y(id){
			return [0];
		}
		sticks_x(id){
			return [0];
		}
		selected(id, next){
			if(next !== undefined) return next;
			return false;
		}
		hovered(id, next){
			if(next !== undefined) return next;
			return false;
		}
		has_scrollbar(id){
			return (this.Block(id).has_scrollbar());
		}
		editing(id, next){
			return (this.Block(id).editing(next));
		}
		drags_synced(id){
			return [];
		}
		block_event_contextmenu(id, next){
			if(next !== undefined) return next;
			return null;
		}
		Block_contextmenu_body(id){
			return (this.Block(id).Contextmenu_body());
		}
		Block(id){
			const obj = new this.$.$shm_hitalama_board_block_any();
			(obj.Board_page) = () => ((this.Board_page()));
			(obj.block) = () => ((this.block_by_ref(id)));
			(obj.board) = () => ((this.board()));
			(obj.delete) = () => ((this.block_delete(id)));
			(obj.to_top) = () => ((this.block_to_top(id)));
			(obj.to_bottom) = () => ((this.block_to_bottom(id)));
			(obj.zoom) = () => ((this.zoom()));
			(obj.sticks_y) = () => ((this.sticks_y(id)));
			(obj.sticks_x) = () => ((this.sticks_x(id)));
			(obj.selected) = (next) => ((this.selected(id, next)));
			(obj.hovered) = (next) => ((this.hovered(id, next)));
			(obj.drags_synced) = () => ((this.drags_synced(id)));
			(obj.on_contextmenu) = (next) => ((this.block_event_contextmenu(id, next)));
			return obj;
		}
		blocks(){
			return [(this.Block(id))];
		}
		cursor_pos(id){
			return null;
		}
		Cursor(id){
			const obj = new this.$.$shm_hitalama_board_presence_cursor();
			(obj.pos) = () => ((this.cursor_pos(id)));
			return obj;
		}
		cursors(){
			return [(this.Cursor(id))];
		}
		board(){
			const obj = new this.$.$shm_hitalama_board();
			return obj;
		}
		cut_title(){
			return "Удалить карту";
		}
		auto(){
			return [
				(this.keydown_listener()), 
				(this.keyup_listener()), 
				(this.paste_listener()), 
				(this.shift_pressed()), 
				(this.pull_drags_synced()), 
				(this.hovered_ref()), 
				(this.send_cursor_pos_atom())
			];
		}
		selected_refs(next){
			if(next !== undefined) return next;
			return [];
		}
		sub(){
			return [
				(this.Head_panel()), 
				(this.Head_right_panel()), 
				(this.Pane())
			];
		}
		contextmenu_body(next){
			if(next !== undefined) return next;
			return [];
		}
		get_pointer_pos(){
			return [];
		}
		contextmenu_real_pos(){
			return [];
		}
		Back_contextmenu_body(){
			const obj = new this.$.$mol_list();
			(obj.sub) = () => ([
				(this.Text_add()), 
				(this.Input_add()), 
				(this.Iframe_add()), 
				(this.Range_add()), 
				(this.Form_add()), 
				(this.Deckgl_example_add()), 
				(this.Echarts_example_add()), 
				(this.Code_css_add())
			]);
			return obj;
		}
		Pane(){
			const obj = new this.$.$shm_hitalama_board_pane();
			(obj.event_drop) = (next) => ((this.event_drop(next)));
			(obj.select_resize) = () => ((this.select_resize()));
			(obj.back_event_pointerdown) = (next) => ((this.back_event_pointerdown(next)));
			(obj.back_event_contextmenu) = (next) => ((this.back_event_contextmenu(next)));
			(obj.prevent_zoom) = () => ((this.prevent_zoom()));
			(obj.outside) = () => ([...(this.contextmenu_visible())]);
			(obj.body) = () => ([...(this.blocks()), ...(this.cursors())]);
			return obj;
		}
	};
	($mol_mem(($.$shm_hitalama_board_page.prototype), "shift_pressed"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "hovered_ref"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "Open_in_new_icon"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "Open_in_new"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "Settings_trigger_icon"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "description"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "Description_edit"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "Description_field"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "Settings_content"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "Settings"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "reset_scale"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "Scale"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "Head_panel"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "Export"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "Head_right_panel"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "text_add"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "Text_add"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "input_add"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "Input_add"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "iframe_add"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "Iframe_add"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "range_add"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "Range_add"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "form_add"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "Form_add"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "deckgl_example_add"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "Deckgl_example_add"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "echarts_example_add"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "Echarts_example_add"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "code_css_add"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "Code_css_add"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "event_drop"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "back_event_pointerdown"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "back_event_contextmenu"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "contextmenu_pos"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "contextmenu_showed"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "Context_menu"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "Board_page"));
	($mol_mem_key(($.$shm_hitalama_board_page.prototype), "block_by_ref"));
	($mol_mem_key(($.$shm_hitalama_board_page.prototype), "selected"));
	($mol_mem_key(($.$shm_hitalama_board_page.prototype), "hovered"));
	($mol_mem_key(($.$shm_hitalama_board_page.prototype), "block_event_contextmenu"));
	($mol_mem_key(($.$shm_hitalama_board_page.prototype), "Block"));
	($mol_mem_key(($.$shm_hitalama_board_page.prototype), "Cursor"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "board"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "selected_refs"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "contextmenu_body"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "Back_contextmenu_body"));
	($mol_mem(($.$shm_hitalama_board_page.prototype), "Pane"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_board_page extends $.$shm_hitalama_board_page {
            board() {
                return this.entity().cast($shm_hitalama_board);
            }
            Board_page() {
                return this;
            }
            board_id() {
                return this.board().ref().description;
            }
            description(next) {
                return this.board().Description(next)?.val(next) ?? '';
            }
            board_cut() {
                $shm_hitalama_profile.current()?.boards()?.cut(this.board().ref());
            }
            exported_file_name() {
                return this.board().title() + '.json';
            }
            exported_json() {
                const obj = this.board().serialized();
                const data_uri = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(obj, null, '\t'));
                return data_uri;
            }
            block_delete(ref) {
                this.board().Blocks(null)?.cut(ref);
            }
            block_to_top(ref) {
                const pos = this.pos_by_ref.get(ref.description);
                this.board().Blocks(null)?.move(pos, this.board().Blocks(null)?.remote_list().length);
            }
            block_to_bottom(ref) {
                const pos = this.pos_by_ref.get(ref.description);
                this.board().Blocks(null)?.move(pos, 0);
            }
            block_by_ref(ref) {
                return $hyoo_crus_glob.Node(ref, $shm_hitalama_board_block);
            }
            pos_by_ref = new Map;
            blocks() {
                return this.board().Blocks()?.remote_list().map((f, i) => {
                    this.pos_by_ref.set(f.ref().description, i);
                    return this.Block(f.ref());
                }) ?? [];
            }
            blocks_clear() {
                this.board().Blocks()?.remote_list([]);
            }
            sticks_y_by_block(ref) {
                const height = this.block_height(ref);
                const top = this.block_top(ref);
                return [top, top + height];
            }
            sticks_x_by_block(ref) {
                const width = this.block_width(ref);
                const left = this.block_left(ref);
                return [left, left + width];
            }
            sticks_x(ref) {
                if (this.selected_refs().length > 1)
                    return [];
                const blocks = this.board().Blocks()?.remote_list() ?? [];
                const sticks = [...super.sticks_x(ref)];
                blocks.forEach(b => {
                    if (b.ref() != ref)
                        sticks.push(...this.sticks_x_by_block(b.ref()));
                });
                return sticks;
            }
            sticks_y(ref) {
                if (this.selected_refs().length > 1)
                    return [];
                const blocks = this.board().Blocks()?.remote_list() ?? [];
                const sticks = [...super.sticks_y(ref)];
                blocks.forEach(b => {
                    if (b.ref() != ref)
                        sticks.push(...this.sticks_y_by_block(b.ref()));
                });
                return sticks;
            }
            drags_synced(ref) {
                return this.selected_refs().flatMap(sref => sref == ref ? [] : [this.Block(sref).Sub().Drag()]);
            }
            pull_drags_synced() {
                return this.blocks().map(b => this.drags_synced(b.block().ref()));
            }
            selected(ref, next) {
                if (next === undefined)
                    return this.selected_refs().includes(ref);
                if (next) {
                    if (this.shift_pressed()) {
                        const set = new Set([...this.selected_refs(), ref]);
                        this.selected_refs([...set.values()]);
                    }
                    else if (!this.selected_refs().includes(ref)) {
                        this.selected_refs([ref]);
                    }
                }
                else {
                    this.selected_refs(this.shift_pressed() ? this.selected_refs().filter(r => r !== ref) : []);
                }
                return next;
            }
            reset_scale() {
                this.zoom(1);
            }
            hovered(ref, next) {
                if (next == true)
                    this.hovered_ref(ref);
                if (next == false && this.hovered_ref() == ref)
                    this.hovered_ref(null);
                return next ?? false;
            }
            prevent_zoom() {
                const ref = this.hovered_ref();
                if (!ref)
                    return false;
                return this.has_scrollbar(ref) ?? false;
            }
            select_resize() {
                let [left, top] = this.select_rect_pos();
                [left, top] = this.to_real_pos([left, top]);
                let [width, height] = this.select_rect_size();
                const zoom = this.zoom();
                width /= zoom;
                height /= zoom;
                const blocks = this.blocks().filter(b => {
                    if (left + width < b.Sub().left())
                        return;
                    if (top + height < b.Sub().top())
                        return;
                    if (left > b.Sub().left() + b.Sub().width())
                        return;
                    if (top > b.Sub().top() + b.Sub().height())
                        return;
                    return true;
                });
                this.selected_refs(blocks.map(b => b.block().ref()));
            }
            deselect_all() {
                const blocks = this.board().Blocks()?.remote_list() ?? [];
                blocks.forEach(b => this.selected(b.ref(), false));
            }
            back_event_pointerdown_last;
            back_event_pointerdown(event) {
                this.back_event_pointerdown_last = event;
                if (event.button != 2)
                    this.deselect_all();
                this.select_start(event);
            }
            back_event_contextmenu(event) {
                event.preventDefault();
                if (!this.back_event_pointerdown_last
                    || is_panning(this.back_event_pointerdown_last, event))
                    return;
                this.contextmenu_body([this.Back_contextmenu_body()]);
                this.contextmenu_pos([event.offsetX, event.offsetY]);
                this.contextmenu_showed(true);
            }
            block_event_contextmenu(ref, event) {
                const Body = this.Block_contextmenu_body(ref);
                if (!Body)
                    return;
                this.contextmenu_body([Body]);
                this.contextmenu_pos(this.client_pos_to_pane_pos([event.clientX, event.clientY]));
                this.contextmenu_showed(true);
            }
            contextmenu_pos(next) {
                return next ?? [0, 0];
            }
            contextmenu_real_pos() {
                return this.to_real_pos(this.contextmenu_pos());
            }
            contextmenu_visible() {
                return this.contextmenu_showed() ? super.contextmenu_visible() : [];
            }
            text_add() {
                const block = this.board().text_add(this.contextmenu_real_pos());
                this.contextmenu_showed(false);
                return block;
            }
            input_add() {
                const block = this.board().block_add('input', this.contextmenu_real_pos());
                block?.Text(null)?.value('Hello');
                this.contextmenu_showed(false);
                return block;
            }
            iframe_add() {
                const block = this.board().block_add('iframe', this.contextmenu_real_pos(), 500, 700);
                block?.Src(null)?.val('https://www.google.com/search?igu=1');
                this.contextmenu_showed(false);
                return block;
            }
            range_add() {
                const block = this.board().block_add('range', this.contextmenu_real_pos());
                this.contextmenu_showed(false);
                return block;
            }
            guid_sync() {
                return $mol_guid();
            }
            form_add() {
                const form_pos = this.contextmenu_real_pos();
                const form = this.board().block_add('form', form_pos, 450, 780);
                const table_pos = [form_pos[0] + 460, form_pos[1]];
                const block_table = this.board().table_novirt_add(table_pos, 1000, 780);
                block_table.table_head(['Запрос', 'Минус', 'Период', 'Страна', 'Язык', 'Соц.медиа', 'СМИ', 'Type', 'Tags', 'Category', '', '']);
                block_table.table_col_types(['any', 'any', 'any', 'any', 'any', 'file', 'file', 'any', 'any', 'any', 'action_edit', 'action_delete']);
                const rows_method = this.$.$mol_fetch.text($shm_hitalama_app_ghpages_fix_link('/shm/hitalama/board/snippets/_search_statistics_rows.js'));
                block_table.Table(null)?.ensure(block_table.land())?.Rows_method(null)?.val(rows_method);
                const code_pos = [form_pos[0], form_pos[1] + 790];
                const code = this.board().block_add('code', code_pos, 1220, 680);
                const code_str = this.$.$mol_fetch.text($shm_hitalama_app_ghpages_fix_link('/shm/hitalama/board/snippets/_table.js'))
                    .replace('BLOCK_TITLE', `'${'Table_' + this.guid_sync()}'`);
                code?.Text(null)?.value(code_str);
                this.contextmenu_showed(false);
            }
            deckgl_example_add() {
                const block = this.board().block_add('customdom', this.contextmenu_real_pos(), 700, 700);
                const code_str = this.$.$mol_fetch.text($shm_hitalama_app_ghpages_fix_link('/shm/hitalama/board/snippets/_deckgl_example.js'));
                block?.Text(null)?.value(code_str);
                this.contextmenu_showed(false);
                return block;
            }
            echarts_example_add() {
                const block = this.board().block_add('customdom', this.contextmenu_real_pos(), 700, 500);
                const code_str = this.$.$mol_fetch.text($shm_hitalama_app_ghpages_fix_link('/shm/hitalama/board/snippets/_echarts_example.js'));
                block?.Text(null)?.value(code_str);
                this.contextmenu_showed(false);
                return block;
            }
            code_css_add() {
                const block = this.board().block_add('code_css', this.contextmenu_real_pos(), 600, 300);
                const code_str = this.$.$mol_fetch.text($shm_hitalama_app_ghpages_fix_link('/shm/hitalama/board/snippets/_css_example.css'));
                block?.Text(null)?.value(code_str);
                this.contextmenu_showed(false);
                return block;
            }
            async image_blob_size(blob) {
                const bmp = await createImageBitmap(blob);
                const { width, height } = bmp;
                bmp.close();
                return { width, height };
            }
            image_add(blob) {
                const pos = this.get_pointer_pos();
                const size = this.$.$mol_wire_sync(this).image_blob_size(blob);
                const block = this.board().block_add('text', pos, size.width, size.height);
                block?.Image(null)?.blob(blob);
                return block;
            }
            paste_text(text) {
                const pos = this.get_pointer_pos();
                const block = this.board().text_add(pos, text);
                return block;
            }
            get_pointer_pos() {
                return this.to_real_pos(this.pointer_pos());
            }
            shift_pressed(next) {
                return next ?? false;
            }
            scale_percent() {
                return (this.zoom() * 100).toFixed(2) + '%';
            }
            presences() {
                const board = this.board();
                return board.Presences()?.remote() ?? board.Presences(null)?.ensure({ '': $hyoo_crus_rank_make('post', 'just') });
            }
            presence() {
                const profile = $shm_hitalama_profile.current();
                const id = profile?.ref().description?.toString();
                const presence = this.presences().key(id, 'auto').ensure(profile?.land());
                presence?.Profile(null)?.remote(profile);
                return presence;
            }
            send_cursor_pos_atom() {
                new $mol_wire_atom('send_cursor_pos', () => {
                    $mol_state_time.now(50);
                    this.presence()?.Pos(null)?.val(this.get_pointer_pos());
                }).fresh();
            }
            cursor_pos(key) {
                const presence = this.presences()?.key(key).remote();
                return presence?.Pos()?.val();
            }
            cursors() {
                const profile = $shm_hitalama_profile.current();
                const id = profile?.ref().description?.toString();
                return this.presences()?.keys().flatMap(key => {
                    return key == id ? [] : [this.Cursor(key)];
                }) ?? [];
            }
            file_add(file, pos) {
                const board_file = this.board().Files(null)?.make(this.board().land());
                board_file?.title(file.name);
                board_file?.Size(null)?.val(file.size);
                board_file?.File(null).ensure(this.board().land()).blob(file);
                const block = this.board().block_add('file', pos);
                block.File(null).remote(board_file);
                return block;
            }
            event_drop(event) {
                event.preventDefault();
                const file_list = event.dataTransfer?.files;
                if (!file_list)
                    return;
                const files = [...file_list].map((_, i) => file_list.item(i));
                if (files.length == 0)
                    return;
                $mol_wire_async(() => {
                    const pos = this.to_real_pos(this.client_pos_to_pane_pos([event.clientX, event.clientY]));
                    files.forEach((f, i) => this.file_add(f, [pos[0] + i * 20, pos[1] + i * 20]));
                })();
            }
            keydown_listener() {
                return new $mol_dom_listener(this.$.$mol_dom_context.document, 'keydown', $mol_wire_async(event => {
                    if (event.key == 'Delete') {
                        if (input_focused())
                            return;
                        const refs = this.selected_refs();
                        refs.forEach(r => this.block_delete(r));
                    }
                    else if (event.key == 'Shift') {
                        this.shift_pressed(true);
                    }
                }));
            }
            keyup_listener() {
                return new $mol_dom_listener(this.$.$mol_dom_context.document, 'keyup', $mol_wire_async((event) => {
                    if (event.key == 'Shift') {
                        this.shift_pressed(false);
                    }
                    else if (event.code == 'KeyC' && event.ctrlKey) {
                        if (input_focused())
                            return;
                        const refs = this.selected_refs();
                        const blocks = refs.map(r => this.block_by_ref(r));
                        const serialized = this.board().serialize_blocks(blocks);
                        navigator.clipboard.writeText(JSON.stringify(serialized));
                    }
                }));
            }
            deserialize_below_pointer(dto) {
                const pointer_pos = this.get_pointer_pos();
                let left = Infinity;
                let top = Infinity;
                let right = -Infinity;
                let bottom = -Infinity;
                dto.blocks?.forEach(b => {
                    left = Math.min(left, b.body_x + b.left_edge_x);
                    top = Math.min(top, b.body_y + b.top_edge_y);
                    right = Math.max(right, b.body_x + b.right_edge_x);
                    bottom = Math.max(bottom, b.body_y + b.bottom_edge_y);
                });
                const width = right - left;
                const height = bottom - top;
                const offset_x = pointer_pos[0] - left - width / 2;
                const offset_y = pointer_pos[1] - top - height / 2;
                const dto_translated = {
                    ...dto,
                    blocks: dto.blocks?.map(b => {
                        return {
                            ...b,
                            body_x: b.body_x + offset_x,
                            body_y: b.body_y + offset_y,
                        };
                    })
                };
                this.board().deserialize(dto_translated);
            }
            paste_listener() {
                return new $mol_dom_listener(this.$.$mol_dom_context.document, 'paste', $mol_wire_async(event => {
                    if (input_focused())
                        return;
                    const items = (event.clipboardData || event.originalEvent.clipboardData).items;
                    for (let index in items) {
                        const item = items[index];
                        if (item.type === 'text/plain') {
                            item.getAsString((str) => {
                                try {
                                    const dto = JSON.parse(str);
                                    $mol_wire_async(this).deserialize_below_pointer(dto);
                                }
                                catch (error) {
                                    $mol_wire_async(this).paste_text(str);
                                }
                            });
                        }
                        if (item.kind === 'file') {
                            const blob = item.getAsFile();
                            $mol_wire_async(this).image_add(blob);
                        }
                    }
                }));
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_page.prototype, "board", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_page.prototype, "board_id", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_page.prototype, "description", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_board_page.prototype, "board_cut", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_page.prototype, "exported_file_name", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_page.prototype, "exported_json", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_board_page.prototype, "block_delete", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_board_page.prototype, "block_to_top", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_board_page.prototype, "block_to_bottom", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_board_page.prototype, "block_by_ref", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_page.prototype, "blocks", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_page.prototype, "blocks_clear", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_board_page.prototype, "sticks_y_by_block", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_board_page.prototype, "sticks_x_by_block", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_board_page.prototype, "sticks_x", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_board_page.prototype, "sticks_y", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_board_page.prototype, "drags_synced", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_page.prototype, "pull_drags_synced", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_board_page.prototype, "selected", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_board_page.prototype, "hovered", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_page.prototype, "prevent_zoom", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_board_page.prototype, "block_event_contextmenu", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_page.prototype, "contextmenu_pos", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_page.prototype, "contextmenu_real_pos", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_board_page.prototype, "text_add", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_board_page.prototype, "input_add", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_board_page.prototype, "iframe_add", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_board_page.prototype, "range_add", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_board_page.prototype, "guid_sync", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_board_page.prototype, "form_add", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_board_page.prototype, "deckgl_example_add", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_board_page.prototype, "echarts_example_add", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_board_page.prototype, "code_css_add", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_board_page.prototype, "image_add", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_board_page.prototype, "paste_text", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_board_page.prototype, "get_pointer_pos", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_page.prototype, "shift_pressed", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_page.prototype, "scale_percent", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_page.prototype, "presences", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_page.prototype, "presence", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_page.prototype, "send_cursor_pos_atom", null);
        __decorate([
            $mol_mem_key
        ], $shm_hitalama_board_page.prototype, "cursor_pos", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_page.prototype, "cursors", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_board_page.prototype, "file_add", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_board_page.prototype, "event_drop", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_page.prototype, "keydown_listener", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_page.prototype, "keyup_listener", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_page.prototype, "paste_listener", null);
        $$.$shm_hitalama_board_page = $shm_hitalama_board_page;
        function input_focused() {
            return ['INPUT', 'TEXTAREA'].includes($mol_view_selection.focused()[0].nodeName);
        }
        function is_panning(start, end) {
            if (end.timeStamp - start?.timeStamp > 500
                || Math.abs(end.x - start?.x) > 10
                || Math.abs(end.y - start?.y) > 10)
                return true;
            return false;
        }
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        const Head_panel = {
            padding: $mol_gap.block,
            background: {
                color: $mol_theme.card,
            },
            border: {
                radius: $mol_gap.round,
            },
            box: {
                shadow: [[0, `0.5rem`, `0.5rem`, `-0.5rem`, $mol_style_func.hsla(0, 0, 0, .25)]],
            },
            position: 'absolute',
            zIndex: $mol_layer.float
        };
        $mol_style_define($shm_hitalama_board_page, {
            background: {
                color: 'transparent',
            },
            Head: {},
            Head_panel: {
                ...Head_panel,
            },
            Head_right_panel: {
                ...Head_panel,
                right: 0,
            },
            Title: {
                ['fieldSizing']: 'content',
                maxWidth: '30rem',
            },
            Settings_content: {
                padding: $mol_gap.block,
            },
            Description_field: {
                padding: {
                    bottom: $mol_gap.block,
                },
            },
            Pane: {
                overflow: 'hidden',
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_board_catalog) = class $shm_hitalama_board_catalog extends ($.$shm_hitalama_entity_catalog) {
		import(next){
			if(next !== undefined) return next;
			return null;
		}
		Import(){
			const obj = new this.$.$mol_attach();
			(obj.attach_new) = (next) => ((this.import(next)));
			return obj;
		}
		menu_title(){
			return "Карты";
		}
		param(){
			return "board";
		}
		title_default(){
			return "Новая карта";
		}
		Page(id){
			const obj = new this.$.$shm_hitalama_board_page();
			(obj.entity) = () => ((this.entity(id)));
			(obj.cut) = () => ((this.cut(id)));
			return obj;
		}
		menu_tools(){
			return [(this.Import()), ...(super.menu_tools())];
		}
	};
	($mol_mem(($.$shm_hitalama_board_catalog.prototype), "import"));
	($mol_mem(($.$shm_hitalama_board_catalog.prototype), "Import"));
	($mol_mem_key(($.$shm_hitalama_board_catalog.prototype), "Page"));


;
"use strict";
var $;
(function ($) {
    function $mol_blob_text(blob) {
        return new Promise((done, fail) => {
            const reader = new FileReader;
            reader.onerror = fail;
            reader.onload = event => done(event.target.result);
            reader.readAsText(blob);
        });
    }
    $.$mol_blob_text = $mol_blob_text;
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    async function $mol_blob_json(blob) {
        const json = await $mol_blob_text(blob);
        return JSON.parse(json);
    }
    $.$mol_blob_json = $mol_blob_json;
})($ || ($ = {}));

;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_board_catalog extends $.$shm_hitalama_board_catalog {
            list() {
                return $shm_hitalama_profile.current()?.boards(null);
            }
            add() {
                const entity = this.list()?.make({ '': $hyoo_crus_rank_deny });
                entity?.title(this.title_default());
                this.spread(entity.ref().description);
                return entity;
            }
            cut(id) {
                $shm_hitalama_profile.current()?.Boards_removed(null)?.add($hyoo_crus_ref(id));
                super.cut(id);
            }
            import(files) {
                const json = $mol_wire_sync(this.$).$mol_blob_json(files[0]);
                const board = this.add();
                board.deserialize(json);
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_board_catalog.prototype, "list", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_board_catalog.prototype, "add", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_board_catalog.prototype, "cut", null);
        __decorate([
            $mol_action
        ], $shm_hitalama_board_catalog.prototype, "import", null);
        $$.$shm_hitalama_board_catalog = $shm_hitalama_board_catalog;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_board_catalog, {
            Import: {
                Content: {
                    padding: 0,
                },
                Add: {
                    width: '1rem',
                    height: '1rem',
                    Icon: {
                        width: '1rem',
                        height: '1rem',
                    },
                },
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_icon_eye) = class $mol_icon_eye extends ($.$mol_icon) {
		path(){
			return "M12,9A3,3 0 0,0 9,12A3,3 0 0,0 12,15A3,3 0 0,0 15,12A3,3 0 0,0 12,9M12,17A5,5 0 0,1 7,12A5,5 0 0,1 12,7A5,5 0 0,1 17,12A5,5 0 0,1 12,17M12,4.5C7,4.5 2.73,7.61 1,12C2.73,16.39 7,19.5 12,19.5C17,19.5 21.27,16.39 23,12C21.27,7.61 17,4.5 12,4.5Z";
		}
	};


;
"use strict";

;
	($.$mol_password) = class $mol_password extends ($.$mol_view) {
		hint(){
			return "";
		}
		value(next){
			if(next !== undefined) return next;
			return "";
		}
		submit(next){
			if(next !== undefined) return next;
			return null;
		}
		enabled(){
			return true;
		}
		Pass(){
			const obj = new this.$.$mol_string();
			(obj.type) = () => ((this.type()));
			(obj.hint) = () => ((this.hint()));
			(obj.value) = (next) => ((this.value(next)));
			(obj.submit) = (next) => ((this.submit(next)));
			(obj.enabled) = () => ((this.enabled()));
			return obj;
		}
		checked(next){
			if(next !== undefined) return next;
			return true;
		}
		Show_icon(){
			const obj = new this.$.$mol_icon_eye();
			return obj;
		}
		Show(){
			const obj = new this.$.$mol_check_icon();
			(obj.checked) = (next) => ((this.checked(next)));
			(obj.Icon) = () => ((this.Show_icon()));
			return obj;
		}
		content(){
			return [(this.Pass()), (this.Show())];
		}
		type(next){
			if(next !== undefined) return next;
			return "password";
		}
		sub(){
			return (this.content());
		}
	};
	($mol_mem(($.$mol_password.prototype), "value"));
	($mol_mem(($.$mol_password.prototype), "submit"));
	($mol_mem(($.$mol_password.prototype), "Pass"));
	($mol_mem(($.$mol_password.prototype), "checked"));
	($mol_mem(($.$mol_password.prototype), "Show_icon"));
	($mol_mem(($.$mol_password.prototype), "Show"));
	($mol_mem(($.$mol_password.prototype), "type"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $mol_password extends $.$mol_password {
            checked(next) {
                this.type(next ? 'text' : 'password');
                return next ?? false;
            }
        }
        __decorate([
            $mol_mem
        ], $mol_password.prototype, "checked", null);
        $$.$mol_password = $mol_password;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_profile_register) = class $shm_hitalama_profile_register extends ($.$mol_section) {
		login(next){
			if(next !== undefined) return next;
			return "";
		}
		Login(){
			const obj = new this.$.$mol_string();
			(obj.value) = (next) => ((this.login(next)));
			return obj;
		}
		Login_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Логин");
			(obj.content) = () => ([(this.Login())]);
			return obj;
		}
		passwond(next){
			if(next !== undefined) return next;
			return "";
		}
		Password(){
			const obj = new this.$.$mol_password();
			(obj.value) = (next) => ((this.passwond(next)));
			return obj;
		}
		Password_label(){
			const obj = new this.$.$mol_labeler();
			(obj.title) = () => ("Пароль");
			(obj.content) = () => ([(this.Password())]);
			return obj;
		}
		submit_title(){
			return "Зарегистрироваться";
		}
		submit(next){
			if(next !== undefined) return next;
			return null;
		}
		submit_enabled(next){
			if(next !== undefined) return next;
			return true;
		}
		Submit(){
			const obj = new this.$.$mol_button_major();
			(obj.title) = () => ((this.submit_title()));
			(obj.click) = (next) => ((this.submit(next)));
			(obj.enabled) = (next) => ((this.submit_enabled(next)));
			return obj;
		}
		message(next){
			if(next !== undefined) return next;
			return "";
		}
		Message(){
			const obj = new this.$.$mol_text();
			(obj.text) = () => ((this.message()));
			return obj;
		}
		message_view(){
			return [(this.Message())];
		}
		title(){
			return "Регистрация";
		}
		profiles(){
			const obj = new this.$.$shm_hitalama_profile_dict();
			return obj;
		}
		account_exist_message(){
			return "Пользовать \"{login}\" уже существует";
		}
		content(){
			return [
				(this.Login_label()), 
				(this.Password_label()), 
				(this.Submit()), 
				...(this.message_view())
			];
		}
	};
	($mol_mem(($.$shm_hitalama_profile_register.prototype), "login"));
	($mol_mem(($.$shm_hitalama_profile_register.prototype), "Login"));
	($mol_mem(($.$shm_hitalama_profile_register.prototype), "Login_label"));
	($mol_mem(($.$shm_hitalama_profile_register.prototype), "passwond"));
	($mol_mem(($.$shm_hitalama_profile_register.prototype), "Password"));
	($mol_mem(($.$shm_hitalama_profile_register.prototype), "Password_label"));
	($mol_mem(($.$shm_hitalama_profile_register.prototype), "submit"));
	($mol_mem(($.$shm_hitalama_profile_register.prototype), "submit_enabled"));
	($mol_mem(($.$shm_hitalama_profile_register.prototype), "Submit"));
	($mol_mem(($.$shm_hitalama_profile_register.prototype), "message"));
	($mol_mem(($.$shm_hitalama_profile_register.prototype), "Message"));
	($mol_mem(($.$shm_hitalama_profile_register.prototype), "profiles"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_profile_register extends $.$shm_hitalama_profile_register {
            submit(next) {
                const profile = this.profiles().key(this.login(), 'auto')?.remote(this.$.$shm_hitalama_profile.current());
                profile?.Login(null).val(this.login());
                profile?.password(this.passwond());
                if (profile) {
                    const home = this.$.$hyoo_crus_glob.home();
                    home.Hall(null).remote(profile);
                    this.$.$mol_state_arg.value('section', null);
                }
            }
            account_exist() {
                return this.profiles().has(this.login());
            }
            submit_enabled() {
                if (this.login() == '')
                    return false;
                return this.message() ? false : true;
            }
            message(next) {
                return this.account_exist()
                    ? this.account_exist_message().replace('{login}', this.login())
                    : next ?? '';
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_profile_register.prototype, "account_exist", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_profile_register.prototype, "submit_enabled", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_profile_register.prototype, "message", null);
        $$.$shm_hitalama_profile_register = $shm_hitalama_profile_register;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_profile_register, {
            align: {
                items: 'flex-start',
            },
            gap: $mol_gap.block,
            Login_label: {
                Content: {
                    align: {
                        self: 'flex-start',
                    },
                },
            },
            Submit: {
                margin: {
                    top: '2rem',
                    left: $mol_gap.block,
                    right: $mol_gap.block,
                    bottom: $mol_gap.block,
                },
            },
            Message: {
                color: 'red',
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$shm_hitalama_profile_enter) = class $shm_hitalama_profile_enter extends ($.$shm_hitalama_profile_register) {
		pull_pass_keys(){
			return null;
		}
		title(){
			return "Вход";
		}
		submit_title(){
			return "Войти";
		}
		auto(){
			return [(this.pull_pass_keys())];
		}
		message_incorrect_pass(){
			return "Неверный логин или пароль";
		}
	};


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_profile_enter extends $.$shm_hitalama_profile_enter {
            login(next) {
                this.message('');
                return next ?? '';
            }
            passwond(next) {
                this.message('');
                return next ?? '';
            }
            pull_pass_keys() {
                this.profiles()?.keys().forEach(k => {
                    try {
                        this.profiles().key(k)?.remote()?.Pass_key()?.val();
                    }
                    catch (error) {
                        console.log(error);
                    }
                });
            }
            submit(next) {
                const profile = this.profiles().key(this.login())?.remote();
                if (profile?.enter(this.passwond())) {
                    this.$.$mol_state_arg.value('section', null);
                    return;
                }
                this.message(this.message_incorrect_pass());
            }
            message(next) {
                return next ?? '';
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_profile_enter.prototype, "login", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_profile_enter.prototype, "passwond", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_profile_enter.prototype, "pull_pass_keys", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_profile_enter.prototype, "message", null);
        $$.$shm_hitalama_profile_enter = $shm_hitalama_profile_enter;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
	($.$mol_text_list) = class $mol_text_list extends ($.$mol_text) {
		type(){
			return "";
		}
		auto_scroll(){
			return null;
		}
		attr(){
			return {...(super.attr()), "mol_text_list_type": (this.type())};
		}
		Paragraph(id){
			const obj = new this.$.$mol_text_list_item();
			(obj.index) = () => ((this.item_index(id)));
			(obj.sub) = () => ((this.block_content(id)));
			return obj;
		}
	};
	($mol_mem_key(($.$mol_text_list.prototype), "Paragraph"));
	($.$mol_text_list_item) = class $mol_text_list_item extends ($.$mol_paragraph) {
		index(){
			return 0;
		}
		attr(){
			return {...(super.attr()), "mol_text_list_item_index": (this.index())};
		}
	};


;
"use strict";
var $;
(function ($) {
    $mol_style_attach("mol/text/list/list.view.css", "[mol_text_list] {\r\n\tpadding-left: 1.75rem;\r\n}\r\n\r\n[mol_text_list_item] {\r\n\tcontain: none;\r\n\tdisplay: list-item;\r\n}\r\n\r\n[mol_text_list_item]::before {\r\n\tcontent: attr( mol_text_list_item_index ) \".\";\r\n\twidth: 1.25rem;\r\n\tdisplay: inline-block;\r\n\tposition: absolute;\r\n\tmargin-left: -1.75rem;\r\n\ttext-align: end;\r\n}\r\n\r\n[mol_text_list_type=\"-\"] > [mol_text_list_item]::before,\r\n[mol_text_list_type=\"*\"] > [mol_text_list_item]::before {\r\n\tcontent: \"•\";\r\n}\r\n");
})($ || ($ = {}));

;
"use strict";

;
	($.$shm_hitalama_app) = class $shm_hitalama_app extends ($.$mol_book2_catalog) {
		Theme(){
			const obj = new this.$.$mol_theme_auto();
			return obj;
		}
		Status(){
			const obj = new this.$.$hyoo_crus_status();
			return obj;
		}
		Lights(){
			const obj = new this.$.$mol_lights_toggle();
			return obj;
		}
		Foot_label(){
			const obj = new this.$.$mol_paragraph();
			(obj.title) = () => ("разработано в");
			return obj;
		}
		logo_uri(){
			return "/shm/hitalama/app/foot/foot_logo.png";
		}
		Foot_logo(){
			const obj = new this.$.$mol_image();
			(obj.uri) = () => ((this.logo_uri()));
			return obj;
		}
		Tokens_label(){
			const obj = new this.$.$mol_text();
			(obj.text) = () => ("Сбор осуществляется от имени");
			return obj;
		}
		token(){
			return (this.Token_switch().current());
		}
		Token_switch(){
			const obj = new this.$.$shm_hitalama_token_switch();
			return obj;
		}
		Tokens(){
			const obj = new this.$.$mol_view();
			(obj.sub) = () => ([(this.Tokens_label()), (this.Token_switch())]);
			return obj;
		}
		Profile(){
			const obj = new this.$.$shm_hitalama_profile_switch();
			return obj;
		}
		Spread_current(){
			const obj = new this.$.$mol_view();
			return obj;
		}
		Main(){
			const obj = new this.$.$mol_page();
			(obj.head) = () => ([(this.Tokens()), (this.Profile())]);
			(obj.body) = () => ([(this.Spread_current())]);
			return obj;
		}
		Analysis(){
			const obj = new this.$.$shm_hitalama_analysis();
			(obj.token) = () => ((this.token()));
			return obj;
		}
		Lists(){
			const obj = new this.$.$shm_hitalama_lists();
			(obj.token) = () => ((this.token()));
			return obj;
		}
		Projects(){
			const obj = new this.$.$shm_hitalama_project_catalog();
			return obj;
		}
		Duckdb(){
			const obj = new this.$.$shm_hitalama_duckdb_page();
			return obj;
		}
		Boards(){
			const obj = new this.$.$shm_hitalama_board_catalog();
			return obj;
		}
		profiles(){
			const obj = new this.$.$shm_hitalama_profile_dict();
			return obj;
		}
		board(){
			const obj = new this.$.$shm_hitalama_board();
			return obj;
		}
		param(){
			return "section";
		}
		menu_title(){
			return "Hitalama";
		}
		plugins(){
			return [(this.Theme())];
		}
		menu_tools(){
			return [(this.Status()), (this.Lights())];
		}
		menu_foot(){
			return [(this.Foot_label()), (this.Foot_logo())];
		}
		pages(){
			return [(this.Menu()), (this.Main())];
		}
		spreads(){
			return {
				"": (this.Analysis()), 
				"lists": (this.Lists()), 
				"projects": (this.Projects()), 
				"duckdb_page": (this.Duckdb()), 
				"boards": (this.Boards())
			};
		}
		Enter(){
			const obj = new this.$.$shm_hitalama_profile_enter();
			(obj.profiles) = () => ((this.profiles()));
			return obj;
		}
		Register(){
			const obj = new this.$.$shm_hitalama_profile_register();
			(obj.profiles) = () => ((this.profiles()));
			return obj;
		}
		Placeholder(){
			return null;
		}
		Board(){
			const obj = new this.$.$shm_hitalama_board_page();
			(obj.entity) = () => ((this.board()));
			(obj.Open_in_new) = () => (null);
			(obj.tools) = () => ([(this.Lights())]);
			return obj;
		}
	};
	($mol_mem(($.$shm_hitalama_app.prototype), "Theme"));
	($mol_mem(($.$shm_hitalama_app.prototype), "Status"));
	($mol_mem(($.$shm_hitalama_app.prototype), "Lights"));
	($mol_mem(($.$shm_hitalama_app.prototype), "Foot_label"));
	($mol_mem(($.$shm_hitalama_app.prototype), "Foot_logo"));
	($mol_mem(($.$shm_hitalama_app.prototype), "Tokens_label"));
	($mol_mem(($.$shm_hitalama_app.prototype), "Token_switch"));
	($mol_mem(($.$shm_hitalama_app.prototype), "Tokens"));
	($mol_mem(($.$shm_hitalama_app.prototype), "Profile"));
	($mol_mem(($.$shm_hitalama_app.prototype), "Spread_current"));
	($mol_mem(($.$shm_hitalama_app.prototype), "Main"));
	($mol_mem(($.$shm_hitalama_app.prototype), "Analysis"));
	($mol_mem(($.$shm_hitalama_app.prototype), "Lists"));
	($mol_mem(($.$shm_hitalama_app.prototype), "Projects"));
	($mol_mem(($.$shm_hitalama_app.prototype), "Duckdb"));
	($mol_mem(($.$shm_hitalama_app.prototype), "Boards"));
	($mol_mem(($.$shm_hitalama_app.prototype), "profiles"));
	($mol_mem(($.$shm_hitalama_app.prototype), "board"));
	($mol_mem(($.$shm_hitalama_app.prototype), "Enter"));
	($mol_mem(($.$shm_hitalama_app.prototype), "Register"));
	($mol_mem(($.$shm_hitalama_app.prototype), "Board"));


;
"use strict";

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        class $shm_hitalama_app extends $.$shm_hitalama_app {
            profiles_ref() {
                return 'oAlVNV5P_XfclijB0';
            }
            Spread_current() {
                const spread = this.spread();
                if (spread == 'enter')
                    return this.Enter();
                if (spread == 'register')
                    return this.Register();
                return this.Spread(spread);
            }
            pages() {
                switch (this.spread()) {
                    case 'board':
                        return [this.Board()];
                    case '':
                    case 'lists':
                    case 'enter':
                    case 'register':
                        return super.pages();
                }
                const spread = this.spread() === '' ? this.Spread_default() : this.Spread(this.spread());
                return [
                    this.Menu(),
                    ...spread
                        ? spread instanceof $mol_book2
                            ? spread.pages()
                            : [spread]
                        : [],
                ];
            }
            logo_uri() {
                return $shm_hitalama_app_ghpages_fix_link(super.logo_uri());
            }
            profiles() {
                $mol_wire_solid();
                const ref = $hyoo_crus_ref(this.profiles_ref());
                const profiles = this.$.$hyoo_crus_glob.Node(ref, $shm_hitalama_profile_dict);
                return profiles;
            }
            board() {
                const id = this.$.$mol_state_arg.value('board');
                return $hyoo_crus_glob.Node($hyoo_crus_ref(id), $shm_hitalama_board);
            }
        }
        __decorate([
            $mol_mem
        ], $shm_hitalama_app.prototype, "pages", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_app.prototype, "profiles", null);
        __decorate([
            $mol_mem
        ], $shm_hitalama_app.prototype, "board", null);
        $$.$shm_hitalama_app = $shm_hitalama_app;
        function $shm_hitalama_app_ghpages_fix_link(link) {
            return ($.$mol_dom_context.document?.location.host == 'hitalama.github.io'
                ? '/hitalama-mol' : '') + link;
        }
        $$.$shm_hitalama_app_ghpages_fix_link = $shm_hitalama_app_ghpages_fix_link;
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));

;
"use strict";
var $;
(function ($) {
    var $$;
    (function ($$) {
        $mol_style_define($shm_hitalama_app, {
            Tokens: {
                align: {
                    content: 'center',
                },
            },
            Tokens_label: {
                justify: {
                    content: 'center'
                },
            },
            Menu: {
                Body_content: {
                    gap: '1.5rem',
                },
                Foot: {
                    flex: {
                        direction: 'column',
                    },
                    gap: '0.5rem',
                    padding: {
                        left: '1.5rem',
                        right: '1.5rem',
                        bottom: '1rem',
                    }
                },
                flex: {
                    basis: '14rem',
                },
            },
            Foot_label: {
                justify: {
                    content: 'center',
                },
            },
            Main: {
                flex: {
                    grow: 1,
                },
                Head: {
                    justify: {
                        content: 'flex-start',
                    },
                    align: {
                        content: 'center',
                    },
                    padding: {
                        top: 0,
                        bottom: 0,
                    },
                },
            },
            Profile: {
                margin: {
                    left: 'auto',
                },
                Enter_link: {
                    align: {
                        items: 'center',
                    },
                },
                Register_link: {
                    align: {
                        items: 'center',
                    },
                },
            },
        });
    })($$ = $.$$ || ($.$$ = {}));
})($ || ($ = {}));


//# sourceMappingURL=node.js.map
